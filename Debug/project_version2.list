
project_version2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1e4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  0800b37c  0800b37c  0001b37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5dc  0800b5dc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5dc  0800b5dc  0001b5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5e4  0800b5e4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5e4  0800b5e4  0001b5e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5e8  0800b5e8  0001b5e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800b5ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f48  20000090  0800b67c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fd8  0800b67c  00020fd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000214e7  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000475b  00000000  00000000  000415a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  00045d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001578  00000000  00000000  00047408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bfec  00000000  00000000  00048980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021b7f  00000000  00000000  0006496c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1b40  00000000  00000000  000864eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012802b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061d0  00000000  00000000  00128080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800b364 	.word	0x0800b364

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	0800b364 	.word	0x0800b364

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004d6:	463b      	mov	r3, r7
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004e2:	4b28      	ldr	r3, [pc, #160]	; (8000584 <MX_ADC1_Init+0xb4>)
 80004e4:	4a28      	ldr	r2, [pc, #160]	; (8000588 <MX_ADC1_Init+0xb8>)
 80004e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004e8:	4b26      	ldr	r3, [pc, #152]	; (8000584 <MX_ADC1_Init+0xb4>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004ee:	4b25      	ldr	r3, [pc, #148]	; (8000584 <MX_ADC1_Init+0xb4>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004f4:	4b23      	ldr	r3, [pc, #140]	; (8000584 <MX_ADC1_Init+0xb4>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004fa:	4b22      	ldr	r3, [pc, #136]	; (8000584 <MX_ADC1_Init+0xb4>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000500:	4b20      	ldr	r3, [pc, #128]	; (8000584 <MX_ADC1_Init+0xb4>)
 8000502:	2200      	movs	r2, #0
 8000504:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000508:	4b1e      	ldr	r3, [pc, #120]	; (8000584 <MX_ADC1_Init+0xb4>)
 800050a:	2200      	movs	r2, #0
 800050c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800050e:	4b1d      	ldr	r3, [pc, #116]	; (8000584 <MX_ADC1_Init+0xb4>)
 8000510:	4a1e      	ldr	r2, [pc, #120]	; (800058c <MX_ADC1_Init+0xbc>)
 8000512:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000514:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <MX_ADC1_Init+0xb4>)
 8000516:	2200      	movs	r2, #0
 8000518:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800051a:	4b1a      	ldr	r3, [pc, #104]	; (8000584 <MX_ADC1_Init+0xb4>)
 800051c:	2202      	movs	r2, #2
 800051e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000520:	4b18      	ldr	r3, [pc, #96]	; (8000584 <MX_ADC1_Init+0xb4>)
 8000522:	2200      	movs	r2, #0
 8000524:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <MX_ADC1_Init+0xb4>)
 800052a:	2201      	movs	r2, #1
 800052c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800052e:	4815      	ldr	r0, [pc, #84]	; (8000584 <MX_ADC1_Init+0xb4>)
 8000530:	f001 f8d8 	bl	80016e4 <HAL_ADC_Init>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800053a:	f000 fd8b 	bl	8001054 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800053e:	2301      	movs	r3, #1
 8000540:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000542:	2301      	movs	r3, #1
 8000544:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000546:	2307      	movs	r3, #7
 8000548:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054a:	463b      	mov	r3, r7
 800054c:	4619      	mov	r1, r3
 800054e:	480d      	ldr	r0, [pc, #52]	; (8000584 <MX_ADC1_Init+0xb4>)
 8000550:	f001 fa26 	bl	80019a0 <HAL_ADC_ConfigChannel>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800055a:	f000 fd7b 	bl	8001054 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800055e:	2302      	movs	r3, #2
 8000560:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000562:	2302      	movs	r3, #2
 8000564:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000566:	463b      	mov	r3, r7
 8000568:	4619      	mov	r1, r3
 800056a:	4806      	ldr	r0, [pc, #24]	; (8000584 <MX_ADC1_Init+0xb4>)
 800056c:	f001 fa18 	bl	80019a0 <HAL_ADC_ConfigChannel>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000576:	f000 fd6d 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	200000d8 	.word	0x200000d8
 8000588:	40012000 	.word	0x40012000
 800058c:	0f000001 	.word	0x0f000001

08000590 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	; 0x28
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a2f      	ldr	r2, [pc, #188]	; (800066c <HAL_ADC_MspInit+0xdc>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d157      	bne.n	8000662 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]
 80005b6:	4b2e      	ldr	r3, [pc, #184]	; (8000670 <HAL_ADC_MspInit+0xe0>)
 80005b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ba:	4a2d      	ldr	r2, [pc, #180]	; (8000670 <HAL_ADC_MspInit+0xe0>)
 80005bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c0:	6453      	str	r3, [r2, #68]	; 0x44
 80005c2:	4b2b      	ldr	r3, [pc, #172]	; (8000670 <HAL_ADC_MspInit+0xe0>)
 80005c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
 80005d2:	4b27      	ldr	r3, [pc, #156]	; (8000670 <HAL_ADC_MspInit+0xe0>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a26      	ldr	r2, [pc, #152]	; (8000670 <HAL_ADC_MspInit+0xe0>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4b24      	ldr	r3, [pc, #144]	; (8000670 <HAL_ADC_MspInit+0xe0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80005ea:	2306      	movs	r3, #6
 80005ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ee:	2303      	movs	r3, #3
 80005f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	4619      	mov	r1, r3
 80005fc:	481d      	ldr	r0, [pc, #116]	; (8000674 <HAL_ADC_MspInit+0xe4>)
 80005fe:	f002 fa9d 	bl	8002b3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000602:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <HAL_ADC_MspInit+0xe8>)
 8000604:	4a1d      	ldr	r2, [pc, #116]	; (800067c <HAL_ADC_MspInit+0xec>)
 8000606:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <HAL_ADC_MspInit+0xe8>)
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <HAL_ADC_MspInit+0xe8>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <HAL_ADC_MspInit+0xe8>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <HAL_ADC_MspInit+0xe8>)
 800061c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000620:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <HAL_ADC_MspInit+0xe8>)
 8000624:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000628:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <HAL_ADC_MspInit+0xe8>)
 800062c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000630:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <HAL_ADC_MspInit+0xe8>)
 8000634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000638:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <HAL_ADC_MspInit+0xe8>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <HAL_ADC_MspInit+0xe8>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000646:	480c      	ldr	r0, [pc, #48]	; (8000678 <HAL_ADC_MspInit+0xe8>)
 8000648:	f001 fd6a 	bl	8002120 <HAL_DMA_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000652:	f000 fcff 	bl	8001054 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_ADC_MspInit+0xe8>)
 800065a:	639a      	str	r2, [r3, #56]	; 0x38
 800065c:	4a06      	ldr	r2, [pc, #24]	; (8000678 <HAL_ADC_MspInit+0xe8>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000662:	bf00      	nop
 8000664:	3728      	adds	r7, #40	; 0x28
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40012000 	.word	0x40012000
 8000670:	40023800 	.word	0x40023800
 8000674:	40020000 	.word	0x40020000
 8000678:	20000120 	.word	0x20000120
 800067c:	40026410 	.word	0x40026410

08000680 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_DMA_Init+0x4c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0f      	ldr	r2, [pc, #60]	; (80006cc <MX_DMA_Init+0x4c>)
 8000690:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <MX_DMA_Init+0x4c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	2038      	movs	r0, #56	; 0x38
 80006a8:	f001 fcea 	bl	8002080 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006ac:	2038      	movs	r0, #56	; 0x38
 80006ae:	f001 fd13 	bl	80020d8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	2039      	movs	r0, #57	; 0x39
 80006b8:	f001 fce2 	bl	8002080 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80006bc:	2039      	movs	r0, #57	; 0x39
 80006be:	f001 fd0b 	bl	80020d8 <HAL_NVIC_EnableIRQ>

}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800

080006d0 <MX_GPIO_Init>:
     PC7   ------> I2S3_MCK
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08c      	sub	sp, #48	; 0x30
 80006d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	61bb      	str	r3, [r7, #24]
 80006ea:	4b91      	ldr	r3, [pc, #580]	; (8000930 <MX_GPIO_Init+0x260>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a90      	ldr	r2, [pc, #576]	; (8000930 <MX_GPIO_Init+0x260>)
 80006f0:	f043 0310 	orr.w	r3, r3, #16
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b8e      	ldr	r3, [pc, #568]	; (8000930 <MX_GPIO_Init+0x260>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0310 	and.w	r3, r3, #16
 80006fe:	61bb      	str	r3, [r7, #24]
 8000700:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
 8000706:	4b8a      	ldr	r3, [pc, #552]	; (8000930 <MX_GPIO_Init+0x260>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a89      	ldr	r2, [pc, #548]	; (8000930 <MX_GPIO_Init+0x260>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b87      	ldr	r3, [pc, #540]	; (8000930 <MX_GPIO_Init+0x260>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	4b83      	ldr	r3, [pc, #524]	; (8000930 <MX_GPIO_Init+0x260>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a82      	ldr	r2, [pc, #520]	; (8000930 <MX_GPIO_Init+0x260>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b80      	ldr	r3, [pc, #512]	; (8000930 <MX_GPIO_Init+0x260>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	4b7c      	ldr	r3, [pc, #496]	; (8000930 <MX_GPIO_Init+0x260>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a7b      	ldr	r2, [pc, #492]	; (8000930 <MX_GPIO_Init+0x260>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b79      	ldr	r3, [pc, #484]	; (8000930 <MX_GPIO_Init+0x260>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	4b75      	ldr	r3, [pc, #468]	; (8000930 <MX_GPIO_Init+0x260>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a74      	ldr	r2, [pc, #464]	; (8000930 <MX_GPIO_Init+0x260>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b72      	ldr	r3, [pc, #456]	; (8000930 <MX_GPIO_Init+0x260>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b6e      	ldr	r3, [pc, #440]	; (8000930 <MX_GPIO_Init+0x260>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a6d      	ldr	r2, [pc, #436]	; (8000930 <MX_GPIO_Init+0x260>)
 800077c:	f043 0308 	orr.w	r3, r3, #8
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b6b      	ldr	r3, [pc, #428]	; (8000930 <MX_GPIO_Init+0x260>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0308 	and.w	r3, r3, #8
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2108      	movs	r1, #8
 8000792:	4868      	ldr	r0, [pc, #416]	; (8000934 <MX_GPIO_Init+0x264>)
 8000794:	f002 fc6e 	bl	8003074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	2101      	movs	r1, #1
 800079c:	4866      	ldr	r0, [pc, #408]	; (8000938 <MX_GPIO_Init+0x268>)
 800079e:	f002 fc69 	bl	8003074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007a2:	2200      	movs	r2, #0
 80007a4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007a8:	4864      	ldr	r0, [pc, #400]	; (800093c <MX_GPIO_Init+0x26c>)
 80007aa:	f002 fc63 	bl	8003074 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80007ae:	2304      	movs	r3, #4
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4619      	mov	r1, r3
 80007c0:	485c      	ldr	r0, [pc, #368]	; (8000934 <MX_GPIO_Init+0x264>)
 80007c2:	f002 f9bb 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007c6:	2308      	movs	r3, #8
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	4855      	ldr	r0, [pc, #340]	; (8000934 <MX_GPIO_Init+0x264>)
 80007de:	f002 f9ad 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80007e2:	2332      	movs	r3, #50	; 0x32
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007e6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	4619      	mov	r1, r3
 80007f6:	484f      	ldr	r0, [pc, #316]	; (8000934 <MX_GPIO_Init+0x264>)
 80007f8:	f002 f9a0 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007fc:	2301      	movs	r3, #1
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4849      	ldr	r0, [pc, #292]	; (8000938 <MX_GPIO_Init+0x268>)
 8000814:	f002 f992 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000818:	2308      	movs	r3, #8
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000828:	2305      	movs	r3, #5
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4841      	ldr	r0, [pc, #260]	; (8000938 <MX_GPIO_Init+0x268>)
 8000834:	f002 f982 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000838:	2301      	movs	r3, #1
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800083c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	483c      	ldr	r0, [pc, #240]	; (8000940 <MX_GPIO_Init+0x270>)
 800084e:	f002 f975 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000852:	2310      	movs	r3, #16
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000862:	2306      	movs	r3, #6
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4834      	ldr	r0, [pc, #208]	; (8000940 <MX_GPIO_Init+0x270>)
 800086e:	f002 f965 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000872:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000884:	2305      	movs	r3, #5
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	482d      	ldr	r0, [pc, #180]	; (8000944 <MX_GPIO_Init+0x274>)
 8000890:	f002 f954 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000894:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4619      	mov	r1, r3
 80008aa:	4824      	ldr	r0, [pc, #144]	; (800093c <MX_GPIO_Init+0x26c>)
 80008ac:	f002 f946 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008b0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008b4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	481c      	ldr	r0, [pc, #112]	; (800093c <MX_GPIO_Init+0x26c>)
 80008ca:	f002 f937 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008ce:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e0:	2306      	movs	r3, #6
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4813      	ldr	r0, [pc, #76]	; (8000938 <MX_GPIO_Init+0x268>)
 80008ec:	f002 f926 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008f0:	2320      	movs	r3, #32
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	480e      	ldr	r0, [pc, #56]	; (800093c <MX_GPIO_Init+0x26c>)
 8000904:	f002 f91a 	bl	8002b3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000908:	2200      	movs	r2, #0
 800090a:	2100      	movs	r1, #0
 800090c:	2017      	movs	r0, #23
 800090e:	f001 fbb7 	bl	8002080 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000912:	2017      	movs	r0, #23
 8000914:	f001 fbe0 	bl	80020d8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	2028      	movs	r0, #40	; 0x28
 800091e:	f001 fbaf 	bl	8002080 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000922:	2028      	movs	r0, #40	; 0x28
 8000924:	f001 fbd8 	bl	80020d8 <HAL_NVIC_EnableIRQ>

}
 8000928:	bf00      	nop
 800092a:	3730      	adds	r7, #48	; 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40021000 	.word	0x40021000
 8000938:	40020800 	.word	0x40020800
 800093c:	40020c00 	.word	0x40020c00
 8000940:	40020000 	.word	0x40020000
 8000944:	40020400 	.word	0x40020400

08000948 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_I2C1_Init+0x50>)
 800094e:	4a13      	ldr	r2, [pc, #76]	; (800099c <MX_I2C1_Init+0x54>)
 8000950:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_I2C1_Init+0x50>)
 8000954:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <MX_I2C1_Init+0x58>)
 8000956:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_I2C1_Init+0x50>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_I2C1_Init+0x50>)
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_I2C1_Init+0x50>)
 8000966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800096a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <MX_I2C1_Init+0x50>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_I2C1_Init+0x50>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <MX_I2C1_Init+0x50>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_I2C1_Init+0x50>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_I2C1_Init+0x50>)
 8000986:	f004 f93b 	bl	8004c00 <HAL_I2C_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000990:	f000 fb60 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000180 	.word	0x20000180
 800099c:	40005400 	.word	0x40005400
 80009a0:	000186a0 	.word	0x000186a0

080009a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <HAL_I2C_MspInit+0x84>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d12c      	bne.n	8000a20 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009e2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e8:	2312      	movs	r3, #18
 80009ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f4:	2304      	movs	r3, #4
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	480c      	ldr	r0, [pc, #48]	; (8000a30 <HAL_I2C_MspInit+0x8c>)
 8000a00:	f002 f89c 	bl	8002b3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 8000a0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a12:	6413      	str	r3, [r2, #64]	; 0x40
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	; 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020400 	.word	0x40020400

08000a34 <HAL_GPIO_EXTI_Callback>:

volatile int light = 0;
volatile int pressed = 0; // Ініціалізується нулем по замовчуванню, але так гарніше
volatile int button_is_pressed = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	80fb      	strh	r3, [r7, #6]
 if( GPIO_Pin == GPIO_PIN_8)
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a44:	d129      	bne.n	8000a9a <HAL_GPIO_EXTI_Callback+0x66>
 {
  static uint32_t last_change_tick;
  if( HAL_GetTick() - last_change_tick < 50 )
 8000a46:	f000 fe1d 	bl	8001684 <HAL_GetTick>
 8000a4a:	4602      	mov	r2, r0
 8000a4c:	4b43      	ldr	r3, [pc, #268]	; (8000b5c <HAL_GPIO_EXTI_Callback+0x128>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	2b31      	cmp	r3, #49	; 0x31
 8000a54:	d97a      	bls.n	8000b4c <HAL_GPIO_EXTI_Callback+0x118>
  {
   return;
  }
  last_change_tick = HAL_GetTick();
 8000a56:	f000 fe15 	bl	8001684 <HAL_GetTick>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4a3f      	ldr	r2, [pc, #252]	; (8000b5c <HAL_GPIO_EXTI_Callback+0x128>)
 8000a5e:	6013      	str	r3, [r2, #0]
  if(button_is_pressed)
 8000a60:	4b3f      	ldr	r3, [pc, #252]	; (8000b60 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d015      	beq.n	8000a94 <HAL_GPIO_EXTI_Callback+0x60>
  {
   button_is_pressed = 0;
 8000a68:	4b3d      	ldr	r3, [pc, #244]	; (8000b60 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
   ++pressed;
 8000a6e:	4b3d      	ldr	r3, [pc, #244]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x130>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	3301      	adds	r3, #1
 8000a74:	4a3b      	ldr	r2, [pc, #236]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x130>)
 8000a76:	6013      	str	r3, [r2, #0]
	  if (light == -1) {
 8000a78:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <HAL_GPIO_EXTI_Callback+0x134>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a80:	d103      	bne.n	8000a8a <HAL_GPIO_EXTI_Callback+0x56>
		light = 0;
 8000a82:	4b39      	ldr	r3, [pc, #228]	; (8000b68 <HAL_GPIO_EXTI_Callback+0x134>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	e007      	b.n	8000a9a <HAL_GPIO_EXTI_Callback+0x66>
	  } else {
		light = -1;
 8000a8a:	4b37      	ldr	r3, [pc, #220]	; (8000b68 <HAL_GPIO_EXTI_Callback+0x134>)
 8000a8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	e002      	b.n	8000a9a <HAL_GPIO_EXTI_Callback+0x66>
	  }
  }else
  {
   button_is_pressed = 1;
 8000a94:	4b32      	ldr	r3, [pc, #200]	; (8000b60 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	601a      	str	r2, [r3, #0]
  }
 }

 if( GPIO_Pin == GPIO_PIN_9)
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000aa0:	d127      	bne.n	8000af2 <HAL_GPIO_EXTI_Callback+0xbe>
 {
  static uint32_t last_change_tick;
  if( HAL_GetTick() - last_change_tick < 50 )
 8000aa2:	f000 fdef 	bl	8001684 <HAL_GetTick>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	4b30      	ldr	r3, [pc, #192]	; (8000b6c <HAL_GPIO_EXTI_Callback+0x138>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	2b31      	cmp	r3, #49	; 0x31
 8000ab0:	d94e      	bls.n	8000b50 <HAL_GPIO_EXTI_Callback+0x11c>
  {
   return;
  }
  last_change_tick = HAL_GetTick();
 8000ab2:	f000 fde7 	bl	8001684 <HAL_GetTick>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4a2c      	ldr	r2, [pc, #176]	; (8000b6c <HAL_GPIO_EXTI_Callback+0x138>)
 8000aba:	6013      	str	r3, [r2, #0]
  if(button_is_pressed)
 8000abc:	4b28      	ldr	r3, [pc, #160]	; (8000b60 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d013      	beq.n	8000aec <HAL_GPIO_EXTI_Callback+0xb8>
  {
   button_is_pressed = 0;
 8000ac4:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
   ++pressed;
 8000aca:	4b26      	ldr	r3, [pc, #152]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x130>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	4a24      	ldr	r2, [pc, #144]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x130>)
 8000ad2:	6013      	str	r3, [r2, #0]
	  if (light == 1) {
 8000ad4:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <HAL_GPIO_EXTI_Callback+0x134>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d103      	bne.n	8000ae4 <HAL_GPIO_EXTI_Callback+0xb0>
		light = 0;
 8000adc:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <HAL_GPIO_EXTI_Callback+0x134>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	e006      	b.n	8000af2 <HAL_GPIO_EXTI_Callback+0xbe>
	  } else {
		light = 1;
 8000ae4:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <HAL_GPIO_EXTI_Callback+0x134>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	e002      	b.n	8000af2 <HAL_GPIO_EXTI_Callback+0xbe>
	  }
  }else
  {
   button_is_pressed = 1;
 8000aec:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	601a      	str	r2, [r3, #0]
  }
 }

 if( GPIO_Pin == GPIO_PIN_10)
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000af8:	d12d      	bne.n	8000b56 <HAL_GPIO_EXTI_Callback+0x122>
 {
  static uint32_t last_change_tick;
  if( HAL_GetTick() - last_change_tick < 50 )
 8000afa:	f000 fdc3 	bl	8001684 <HAL_GetTick>
 8000afe:	4602      	mov	r2, r0
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	2b31      	cmp	r3, #49	; 0x31
 8000b08:	d924      	bls.n	8000b54 <HAL_GPIO_EXTI_Callback+0x120>
  {
   return;
  }
  last_change_tick = HAL_GetTick();
 8000b0a:	f000 fdbb 	bl	8001684 <HAL_GetTick>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000b12:	6013      	str	r3, [r2, #0]
  if(button_is_pressed)
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d013      	beq.n	8000b44 <HAL_GPIO_EXTI_Callback+0x110>
  {
   button_is_pressed = 0;
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
   ++pressed;
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x130>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	3301      	adds	r3, #1
 8000b28:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x130>)
 8000b2a:	6013      	str	r3, [r2, #0]
	  if (light == 2) {
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_GPIO_EXTI_Callback+0x134>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d103      	bne.n	8000b3c <HAL_GPIO_EXTI_Callback+0x108>
		light = 0;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <HAL_GPIO_EXTI_Callback+0x134>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	e00c      	b.n	8000b56 <HAL_GPIO_EXTI_Callback+0x122>
	  } else {
		light = 2;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_GPIO_EXTI_Callback+0x134>)
 8000b3e:	2202      	movs	r2, #2
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	e008      	b.n	8000b56 <HAL_GPIO_EXTI_Callback+0x122>
	  }
  }else
  {
   button_is_pressed = 1;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	e004      	b.n	8000b56 <HAL_GPIO_EXTI_Callback+0x122>
   return;
 8000b4c:	bf00      	nop
 8000b4e:	e002      	b.n	8000b56 <HAL_GPIO_EXTI_Callback+0x122>
   return;
 8000b50:	bf00      	nop
 8000b52:	e000      	b.n	8000b56 <HAL_GPIO_EXTI_Callback+0x122>
   return;
 8000b54:	bf00      	nop
  }
 }


}
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	200000bc 	.word	0x200000bc
 8000b60:	200000b4 	.word	0x200000b4
 8000b64:	200000b0 	.word	0x200000b0
 8000b68:	200000ac 	.word	0x200000ac
 8000b6c:	200000c0 	.word	0x200000c0
 8000b70:	200000c4 	.word	0x200000c4

08000b74 <HAL_TIM_PWM_PulseFinishedCallback>:

int datasentflag=0;  // to make sure that the dma does not send another data while the first data is still transmitted


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)  // this callback is called when data transmission is finished
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);  // stop dma, when the transmission is finished
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000b80:	f005 fd2e 	bl	80065e0 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	601a      	str	r2, [r3, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200008a0 	.word	0x200008a0
 8000b98:	200000b8 	.word	0x200000b8

08000b9c <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
 8000ba8:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	b2d9      	uxtb	r1, r3
 8000bae:	4a11      	ldr	r2, [pc, #68]	; (8000bf4 <Set_LED+0x58>)
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;  // store green first as ws2821b requires this order (g,r,b)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	b2d9      	uxtb	r1, r3
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <Set_LED+0x58>)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	4413      	add	r3, r2
 8000bc2:	460a      	mov	r2, r1
 8000bc4:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	b2d9      	uxtb	r1, r3
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <Set_LED+0x58>)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4413      	add	r3, r2
 8000bd2:	460a      	mov	r2, r1
 8000bd4:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	b2d9      	uxtb	r1, r3
 8000bda:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <Set_LED+0x58>)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4413      	add	r3, r2
 8000be2:	460a      	mov	r2, r1
 8000be4:	70da      	strb	r2, [r3, #3]
}
 8000be6:	bf00      	nop
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	200001d4 	.word	0x200001d4

08000bf8 <Set_Brightness>:

#define PI 3.14159265359

void Set_Brightness (int brightness)  // 0-45
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
		}
	}

#endif

}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <WS2812_Send>:


uint16_t pwmData[(24*MAX_LED)+50]; // store 24 bits for each led + 50 values for reset code

void WS2812_Send (void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
	uint32_t color;  //32 bit variable to store 24 bits of color


	for (int i= 0; i<MAX_LED; i++)  // iterate through all of the LEDs
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	e036      	b.n	8000c8a <WS2812_Send+0x7e>
	{

#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 8000c1c:	4a2e      	ldr	r2, [pc, #184]	; (8000cd8 <WS2812_Send+0xcc>)
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	785b      	ldrb	r3, [r3, #1]
 8000c26:	041a      	lsls	r2, r3, #16
 8000c28:	492b      	ldr	r1, [pc, #172]	; (8000cd8 <WS2812_Send+0xcc>)
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	440b      	add	r3, r1
 8000c30:	789b      	ldrb	r3, [r3, #2]
 8000c32:	021b      	lsls	r3, r3, #8
 8000c34:	431a      	orrs	r2, r3
 8000c36:	4928      	ldr	r1, [pc, #160]	; (8000cd8 <WS2812_Send+0xcc>)
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	78db      	ldrb	r3, [r3, #3]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	607b      	str	r3, [r7, #4]
#endif
		for (int i=23; i>=0; i--) // iterate through the 24 bits which specify the color
 8000c44:	2317      	movs	r3, #23
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	e019      	b.n	8000c7e <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	461a      	mov	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4013      	ands	r3, r2
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d005      	beq.n	8000c68 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 57; // if the bit is 1, the duty cycle is 64%
 8000c5c:	4a1f      	ldr	r2, [pc, #124]	; (8000cdc <WS2812_Send+0xd0>)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	2139      	movs	r1, #57	; 0x39
 8000c62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c66:	e004      	b.n	8000c72 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 28;  // if the bit is 0, the duty cycle is 32%
 8000c68:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <WS2812_Send+0xd0>)
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	211c      	movs	r1, #28
 8000c6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--) // iterate through the 24 bits which specify the color
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	dae2      	bge.n	8000c4a <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)  // iterate through all of the LEDs
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	3301      	adds	r3, #1
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	2b19      	cmp	r3, #25
 8000c8e:	ddc5      	ble.n	8000c1c <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)  // store values to keep the pulse low for 50+ us, reset code
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	e00a      	b.n	8000cac <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 8000c96:	4a11      	ldr	r2, [pc, #68]	; (8000cdc <WS2812_Send+0xd0>)
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)  // store values to keep the pulse low for 50+ us, reset code
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	2b31      	cmp	r3, #49	; 0x31
 8000cb0:	ddf1      	ble.n	8000c96 <WS2812_Send+0x8a>
	}
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);  // send the data to the dma
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	4a09      	ldr	r2, [pc, #36]	; (8000cdc <WS2812_Send+0xd0>)
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <WS2812_Send+0xd4>)
 8000cbc:	f005 fa56 	bl	800616c <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};  // this flag will be set when the data transmission is finished, dma is stopped and now we can send another data
 8000cc0:	bf00      	nop
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <WS2812_Send+0xd8>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d0fb      	beq.n	8000cc2 <WS2812_Send+0xb6>
	datasentflag = 0;
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <WS2812_Send+0xd8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	200001d4 	.word	0x200001d4
 8000cdc:	200002a4 	.word	0x200002a4
 8000ce0:	200008a0 	.word	0x200008a0
 8000ce4:	200000b8 	.word	0x200000b8

08000ce8 <attention_signal.9795>:
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	  void attention_signal() {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	f8c7 c004 	str.w	ip, [r7, #4]
			  for (int i = 0; i < 30; i++) {
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	e00b      	b.n	8000d10 <attention_signal.9795+0x28>
				  Set_LED(i, 139, 0, 0);
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	218b      	movs	r1, #139	; 0x8b
 8000cfe:	68f8      	ldr	r0, [r7, #12]
 8000d00:	f7ff ff4c 	bl	8000b9c <Set_LED>
				  Set_Brightness(45);
 8000d04:	202d      	movs	r0, #45	; 0x2d
 8000d06:	f7ff ff77 	bl	8000bf8 <Set_Brightness>
			  for (int i = 0; i < 30; i++) {
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2b1d      	cmp	r3, #29
 8000d14:	ddf0      	ble.n	8000cf8 <attention_signal.9795+0x10>
			  }

			  WS2812_Send();
 8000d16:	f7ff ff79 	bl	8000c0c <WS2812_Send>
			  HAL_Delay(700);
 8000d1a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000d1e:	f000 fcbd 	bl	800169c <HAL_Delay>

			  for (int i = 0; i < 30; i++) {
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	e008      	b.n	8000d3a <attention_signal.9795+0x52>
				  Set_LED(i, 0, 0, 0);
 8000d28:	2300      	movs	r3, #0
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	68b8      	ldr	r0, [r7, #8]
 8000d30:	f7ff ff34 	bl	8000b9c <Set_LED>
			  for (int i = 0; i < 30; i++) {
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	3301      	adds	r3, #1
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	2b1d      	cmp	r3, #29
 8000d3e:	ddf3      	ble.n	8000d28 <attention_signal.9795+0x40>
			  }

			  WS2812_Send();
 8000d40:	f7ff ff64 	bl	8000c0c <WS2812_Send>
			  HAL_Delay(550);
 8000d44:	f240 2026 	movw	r0, #550	; 0x226
 8000d48:	f000 fca8 	bl	800169c <HAL_Delay>

		  };
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <main>:
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
int main(void)
 8000d5a:	f107 0310 	add.w	r3, r7, #16
 8000d5e:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d60:	f000 fc2a 	bl	80015b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d64:	f000 f90e 	bl	8000f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d68:	f7ff fcb2 	bl	80006d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d6c:	f7ff fdec 	bl	8000948 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d70:	f000 f980 	bl	8001074 <MX_SPI1_Init>
  MX_DMA_Init();
 8000d74:	f7ff fc84 	bl	8000680 <MX_DMA_Init>
  MX_USB_HOST_Init();
 8000d78:	f009 fee2 	bl	800ab40 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000d7c:	f000 fac4 	bl	8001308 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000d80:	f7ff fba6 	bl	80004d0 <MX_ADC1_Init>


//  Set_LED(0, 254, 0, 0);
//  WS2812_Send();

  int mode = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	607b      	str	r3, [r7, #4]
//	while( HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8) == GPIO_PIN_RESET )
//	{}
//	HAL_Delay(50);
//	 }

	 if (light == 0){
 8000d88:	4b31      	ldr	r3, [pc, #196]	; (8000e50 <main+0xfc>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d112      	bne.n	8000db6 <main+0x62>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8000d90:	2201      	movs	r2, #1
 8000d92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d96:	482f      	ldr	r0, [pc, #188]	; (8000e54 <main+0x100>)
 8000d98:	f002 f96c 	bl	8003074 <HAL_GPIO_WritePin>
			 HAL_Delay(200);
 8000d9c:	20c8      	movs	r0, #200	; 0xc8
 8000d9e:	f000 fc7d 	bl	800169c <HAL_Delay>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da8:	482a      	ldr	r0, [pc, #168]	; (8000e54 <main+0x100>)
 8000daa:	f002 f963 	bl	8003074 <HAL_GPIO_WritePin>
			 attention_signal();
 8000dae:	463b      	mov	r3, r7
 8000db0:	469c      	mov	ip, r3
 8000db2:	f7ff ff99 	bl	8000ce8 <attention_signal.9795>
		 }

	 if (light == 1) {
 8000db6:	4b26      	ldr	r3, [pc, #152]	; (8000e50 <main+0xfc>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d113      	bne.n	8000de6 <main+0x92>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dc4:	4823      	ldr	r0, [pc, #140]	; (8000e54 <main+0x100>)
 8000dc6:	f002 f955 	bl	8003074 <HAL_GPIO_WritePin>
		 HAL_Delay(200);
 8000dca:	20c8      	movs	r0, #200	; 0xc8
 8000dcc:	f000 fc66 	bl	800169c <HAL_Delay>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dd6:	481f      	ldr	r0, [pc, #124]	; (8000e54 <main+0x100>)
 8000dd8:	f002 f94c 	bl	8003074 <HAL_GPIO_WritePin>
//		 warning_signal();
		 turn_signal(1);
 8000ddc:	463b      	mov	r3, r7
 8000dde:	469c      	mov	ip, r3
 8000de0:	2001      	movs	r0, #1
 8000de2:	f000 f839 	bl	8000e58 <turn_signal.9806>
	 }

	 if (light == -1) {
 8000de6:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <main+0xfc>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dee:	d114      	bne.n	8000e1a <main+0xc6>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000df0:	2201      	movs	r2, #1
 8000df2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df6:	4817      	ldr	r0, [pc, #92]	; (8000e54 <main+0x100>)
 8000df8:	f002 f93c 	bl	8003074 <HAL_GPIO_WritePin>
		 HAL_Delay(200);
 8000dfc:	20c8      	movs	r0, #200	; 0xc8
 8000dfe:	f000 fc4d 	bl	800169c <HAL_Delay>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e08:	4812      	ldr	r0, [pc, #72]	; (8000e54 <main+0x100>)
 8000e0a:	f002 f933 	bl	8003074 <HAL_GPIO_WritePin>
		 turn_signal(-1);
 8000e0e:	463b      	mov	r3, r7
 8000e10:	469c      	mov	ip, r3
 8000e12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e16:	f000 f81f 	bl	8000e58 <turn_signal.9806>
	 }

	 if (light == 2) {
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <main+0xfc>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d112      	bne.n	8000e48 <main+0xf4>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e28:	480a      	ldr	r0, [pc, #40]	; (8000e54 <main+0x100>)
 8000e2a:	f002 f923 	bl	8003074 <HAL_GPIO_WritePin>
		 HAL_Delay(200);
 8000e2e:	20c8      	movs	r0, #200	; 0xc8
 8000e30:	f000 fc34 	bl	800169c <HAL_Delay>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000e34:	2200      	movs	r2, #0
 8000e36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e3a:	4806      	ldr	r0, [pc, #24]	; (8000e54 <main+0x100>)
 8000e3c:	f002 f91a 	bl	8003074 <HAL_GPIO_WritePin>
		 warning_signal();
 8000e40:	463b      	mov	r3, r7
 8000e42:	469c      	mov	ip, r3
 8000e44:	f000 f85d 	bl	8000f02 <warning_signal.9821>
//	  attention_signal();
//	  turn_signal(-1);
//	  warning_signal();

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e48:	f009 fea0 	bl	800ab8c <MX_USB_HOST_Process>
	 if (light == 0){
 8000e4c:	e79c      	b.n	8000d88 <main+0x34>
 8000e4e:	bf00      	nop
 8000e50:	200000ac 	.word	0x200000ac
 8000e54:	40020c00 	.word	0x40020c00

08000e58 <turn_signal.9806>:
	  void turn_signal(int direction) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	f8c7 c000 	str.w	ip, [r7]
		  int mid = MAX_LED / 2;
 8000e64:	230d      	movs	r3, #13
 8000e66:	60bb      	str	r3, [r7, #8]
		  if (direction == -1){
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e6e:	d116      	bne.n	8000e9e <turn_signal.9806+0x46>
	 		    for (int i = mid; i >= 0; i--) {
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	e010      	b.n	8000e98 <turn_signal.9806+0x40>
					Set_LED(i, 255, 69, 0);
 8000e76:	2300      	movs	r3, #0
 8000e78:	2245      	movs	r2, #69	; 0x45
 8000e7a:	21ff      	movs	r1, #255	; 0xff
 8000e7c:	6978      	ldr	r0, [r7, #20]
 8000e7e:	f7ff fe8d 	bl	8000b9c <Set_LED>
					Set_Brightness(45);
 8000e82:	202d      	movs	r0, #45	; 0x2d
 8000e84:	f7ff feb8 	bl	8000bf8 <Set_Brightness>
					WS2812_Send();
 8000e88:	f7ff fec0 	bl	8000c0c <WS2812_Send>
					HAL_Delay(30);
 8000e8c:	201e      	movs	r0, #30
 8000e8e:	f000 fc05 	bl	800169c <HAL_Delay>
	 		    for (int i = mid; i >= 0; i--) {
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	3b01      	subs	r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	daeb      	bge.n	8000e76 <turn_signal.9806+0x1e>
		  if (direction == 1){
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d116      	bne.n	8000ed2 <turn_signal.9806+0x7a>
	 		    for (int i = mid; i < MAX_LED; i++) {
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	e010      	b.n	8000ecc <turn_signal.9806+0x74>
					Set_LED(i, 255, 69, 0);
 8000eaa:	2300      	movs	r3, #0
 8000eac:	2245      	movs	r2, #69	; 0x45
 8000eae:	21ff      	movs	r1, #255	; 0xff
 8000eb0:	6938      	ldr	r0, [r7, #16]
 8000eb2:	f7ff fe73 	bl	8000b9c <Set_LED>
					Set_Brightness(45);
 8000eb6:	202d      	movs	r0, #45	; 0x2d
 8000eb8:	f7ff fe9e 	bl	8000bf8 <Set_Brightness>
					WS2812_Send();
 8000ebc:	f7ff fea6 	bl	8000c0c <WS2812_Send>
					HAL_Delay(30);
 8000ec0:	201e      	movs	r0, #30
 8000ec2:	f000 fbeb 	bl	800169c <HAL_Delay>
	 		    for (int i = mid; i < MAX_LED; i++) {
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	2b19      	cmp	r3, #25
 8000ed0:	ddeb      	ble.n	8000eaa <turn_signal.9806+0x52>
		 for (int i = 0; i < MAX_LED; i++) {
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	e008      	b.n	8000eea <turn_signal.9806+0x92>
		 	Set_LED(i, 0, 0, 0);
 8000ed8:	2300      	movs	r3, #0
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	68f8      	ldr	r0, [r7, #12]
 8000ee0:	f7ff fe5c 	bl	8000b9c <Set_LED>
		 for (int i = 0; i < MAX_LED; i++) {
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2b19      	cmp	r3, #25
 8000eee:	ddf3      	ble.n	8000ed8 <turn_signal.9806+0x80>
		 HAL_Delay(120);
 8000ef0:	2078      	movs	r0, #120	; 0x78
 8000ef2:	f000 fbd3 	bl	800169c <HAL_Delay>
		 WS2812_Send();
 8000ef6:	f7ff fe89 	bl	8000c0c <WS2812_Send>
	  };
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <warning_signal.9821>:
	  void warning_signal() {
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	f8c7 c004 	str.w	ip, [r7, #4]
		  int mid = MAX_LED / 2;
 8000f0c:	230d      	movs	r3, #13
 8000f0e:	60fb      	str	r3, [r7, #12]
			for (int i = 0; i <= mid; i++) {
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	e01a      	b.n	8000f4c <warning_signal.9821+0x4a>
				Set_LED(mid + i, 255, 69, 0);
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	18d0      	adds	r0, r2, r3
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	2245      	movs	r2, #69	; 0x45
 8000f20:	21ff      	movs	r1, #255	; 0xff
 8000f22:	f7ff fe3b 	bl	8000b9c <Set_LED>
				Set_LED(mid - i, 255, 69, 0);
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	1ad0      	subs	r0, r2, r3
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	2245      	movs	r2, #69	; 0x45
 8000f30:	21ff      	movs	r1, #255	; 0xff
 8000f32:	f7ff fe33 	bl	8000b9c <Set_LED>
				Set_Brightness(45);
 8000f36:	202d      	movs	r0, #45	; 0x2d
 8000f38:	f7ff fe5e 	bl	8000bf8 <Set_Brightness>
				WS2812_Send();
 8000f3c:	f7ff fe66 	bl	8000c0c <WS2812_Send>
				HAL_Delay(30);
 8000f40:	201e      	movs	r0, #30
 8000f42:	f000 fbab 	bl	800169c <HAL_Delay>
			for (int i = 0; i <= mid; i++) {
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	dde0      	ble.n	8000f16 <warning_signal.9821+0x14>
		 for (int i = 0; i < MAX_LED; i++) {
 8000f54:	2300      	movs	r3, #0
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	e008      	b.n	8000f6c <warning_signal.9821+0x6a>
		 	Set_LED(i, 0, 0, 0);
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	6938      	ldr	r0, [r7, #16]
 8000f62:	f7ff fe1b 	bl	8000b9c <Set_LED>
		 for (int i = 0; i < MAX_LED; i++) {
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	2b19      	cmp	r3, #25
 8000f70:	ddf3      	ble.n	8000f5a <warning_signal.9821+0x58>
		 HAL_Delay(120);
 8000f72:	2078      	movs	r0, #120	; 0x78
 8000f74:	f000 fb92 	bl	800169c <HAL_Delay>
		 WS2812_Send();
 8000f78:	f7ff fe48 	bl	8000c0c <WS2812_Send>
	  };
 8000f7c:	bf00      	nop
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b094      	sub	sp, #80	; 0x50
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 0320 	add.w	r3, r7, #32
 8000f8e:	2230      	movs	r2, #48	; 0x30
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f00a f916 	bl	800b1c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	4b27      	ldr	r3, [pc, #156]	; (800104c <SystemClock_Config+0xc8>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	4a26      	ldr	r2, [pc, #152]	; (800104c <SystemClock_Config+0xc8>)
 8000fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb8:	4b24      	ldr	r3, [pc, #144]	; (800104c <SystemClock_Config+0xc8>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	4b21      	ldr	r3, [pc, #132]	; (8001050 <SystemClock_Config+0xcc>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a20      	ldr	r2, [pc, #128]	; (8001050 <SystemClock_Config+0xcc>)
 8000fce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <SystemClock_Config+0xcc>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fe4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fea:	2302      	movs	r3, #2
 8000fec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ff8:	2348      	movs	r3, #72	; 0x48
 8000ffa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001000:	2303      	movs	r3, #3
 8001002:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001004:	f107 0320 	add.w	r3, r7, #32
 8001008:	4618      	mov	r0, r3
 800100a:	f003 ffc5 	bl	8004f98 <HAL_RCC_OscConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001014:	f000 f81e 	bl	8001054 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001018:	230f      	movs	r3, #15
 800101a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800101c:	2302      	movs	r3, #2
 800101e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001028:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	2102      	movs	r1, #2
 8001034:	4618      	mov	r0, r3
 8001036:	f004 fad7 	bl	80055e8 <HAL_RCC_ClockConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001040:	f000 f808 	bl	8001054 <Error_Handler>
  }
}
 8001044:	bf00      	nop
 8001046:	3750      	adds	r7, #80	; 0x50
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40023800 	.word	0x40023800
 8001050:	40007000 	.word	0x40007000

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
}
 800105a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800105c:	e7fe      	b.n	800105c <Error_Handler+0x8>

0800105e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <MX_SPI1_Init+0x64>)
 800107a:	4a18      	ldr	r2, [pc, #96]	; (80010dc <MX_SPI1_Init+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_SPI1_Init+0x64>)
 8001080:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001084:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_SPI1_Init+0x64>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_SPI1_Init+0x64>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_SPI1_Init+0x64>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_SPI1_Init+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010c0:	220a      	movs	r2, #10
 80010c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010c6:	f004 fd1f 	bl	8005b08 <HAL_SPI_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010d0:	f7ff ffc0 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200007e8 	.word	0x200007e8
 80010dc:	40013000 	.word	0x40013000

080010e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a19      	ldr	r2, [pc, #100]	; (8001164 <HAL_SPI_MspInit+0x84>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d12b      	bne.n	800115a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <HAL_SPI_MspInit+0x88>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	4a17      	ldr	r2, [pc, #92]	; (8001168 <HAL_SPI_MspInit+0x88>)
 800110c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001110:	6453      	str	r3, [r2, #68]	; 0x44
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <HAL_SPI_MspInit+0x88>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_SPI_MspInit+0x88>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a10      	ldr	r2, [pc, #64]	; (8001168 <HAL_SPI_MspInit+0x88>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_SPI_MspInit+0x88>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800113a:	23e0      	movs	r3, #224	; 0xe0
 800113c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800114a:	2305      	movs	r3, #5
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	; (800116c <HAL_SPI_MspInit+0x8c>)
 8001156:	f001 fcf1 	bl	8002b3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800115a:	bf00      	nop
 800115c:	3728      	adds	r7, #40	; 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40013000 	.word	0x40013000
 8001168:	40023800 	.word	0x40023800
 800116c:	40020000 	.word	0x40020000

08001170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <HAL_MspInit+0x4c>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <HAL_MspInit+0x4c>)
 8001180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001184:	6453      	str	r3, [r2, #68]	; 0x44
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <HAL_MspInit+0x4c>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_MspInit+0x4c>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	4a08      	ldr	r2, [pc, #32]	; (80011bc <HAL_MspInit+0x4c>)
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_MspInit+0x4c>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011ae:	2007      	movs	r0, #7
 80011b0:	f000 ff46 	bl	8002040 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40023800 	.word	0x40023800

080011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <NMI_Handler+0x4>

080011c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <HardFault_Handler+0x4>

080011cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <MemManage_Handler+0x4>

080011d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <BusFault_Handler+0x4>

080011d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <UsageFault_Handler+0x4>

080011de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800120c:	f000 fa26 	bl	800165c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001218:	f44f 7080 	mov.w	r0, #256	; 0x100
 800121c:	f001 ff5c 	bl	80030d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001220:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001224:	f001 ff58 	bl	80030d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}

0800122c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001230:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001234:	f001 ff50 	bl	80030d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001240:	4802      	ldr	r0, [pc, #8]	; (800124c <DMA2_Stream0_IRQHandler+0x10>)
 8001242:	f001 fa11 	bl	8002668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000120 	.word	0x20000120

08001250 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <DMA2_Stream1_IRQHandler+0x10>)
 8001256:	f001 fa07 	bl	8002668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000840 	.word	0x20000840

08001264 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <OTG_FS_IRQHandler+0x10>)
 800126a:	f002 f9c3 	bl	80035f4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000cc4 	.word	0x20000cc4

08001278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001280:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <_sbrk+0x5c>)
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <_sbrk+0x60>)
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <_sbrk+0x64>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <_sbrk+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d207      	bcs.n	80012b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a8:	f009 ff52 	bl	800b150 <__errno>
 80012ac:	4603      	mov	r3, r0
 80012ae:	220c      	movs	r2, #12
 80012b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012b6:	e009      	b.n	80012cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <_sbrk+0x64>)
 80012c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20020000 	.word	0x20020000
 80012d8:	00000400 	.word	0x00000400
 80012dc:	200000c8 	.word	0x200000c8
 80012e0:	20000fd8 	.word	0x20000fd8

080012e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <SystemInit+0x20>)
 80012ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <SystemInit+0x20>)
 80012f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b096      	sub	sp, #88	; 0x58
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]
 8001336:	615a      	str	r2, [r3, #20]
 8001338:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	2220      	movs	r2, #32
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f009 ff3f 	bl	800b1c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001346:	4b3e      	ldr	r3, [pc, #248]	; (8001440 <MX_TIM1_Init+0x138>)
 8001348:	4a3e      	ldr	r2, [pc, #248]	; (8001444 <MX_TIM1_Init+0x13c>)
 800134a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800134c:	4b3c      	ldr	r3, [pc, #240]	; (8001440 <MX_TIM1_Init+0x138>)
 800134e:	2200      	movs	r2, #0
 8001350:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001352:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <MX_TIM1_Init+0x138>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8001358:	4b39      	ldr	r3, [pc, #228]	; (8001440 <MX_TIM1_Init+0x138>)
 800135a:	2259      	movs	r2, #89	; 0x59
 800135c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135e:	4b38      	ldr	r3, [pc, #224]	; (8001440 <MX_TIM1_Init+0x138>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001364:	4b36      	ldr	r3, [pc, #216]	; (8001440 <MX_TIM1_Init+0x138>)
 8001366:	2200      	movs	r2, #0
 8001368:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136a:	4b35      	ldr	r3, [pc, #212]	; (8001440 <MX_TIM1_Init+0x138>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001370:	4833      	ldr	r0, [pc, #204]	; (8001440 <MX_TIM1_Init+0x138>)
 8001372:	f004 fd65 	bl	8005e40 <HAL_TIM_Base_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800137c:	f7ff fe6a 	bl	8001054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001384:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001386:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800138a:	4619      	mov	r1, r3
 800138c:	482c      	ldr	r0, [pc, #176]	; (8001440 <MX_TIM1_Init+0x138>)
 800138e:	f005 fc15 	bl	8006bbc <HAL_TIM_ConfigClockSource>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001398:	f7ff fe5c 	bl	8001054 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800139c:	4828      	ldr	r0, [pc, #160]	; (8001440 <MX_TIM1_Init+0x138>)
 800139e:	f004 fe15 	bl	8005fcc <HAL_TIM_PWM_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80013a8:	f7ff fe54 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013b8:	4619      	mov	r1, r3
 80013ba:	4821      	ldr	r0, [pc, #132]	; (8001440 <MX_TIM1_Init+0x138>)
 80013bc:	f006 fb90 	bl	8007ae0 <HAL_TIMEx_MasterConfigSynchronization>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80013c6:	f7ff fe45 	bl	8001054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ca:	2360      	movs	r3, #96	; 0x60
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013d6:	2300      	movs	r3, #0
 80013d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ea:	2200      	movs	r2, #0
 80013ec:	4619      	mov	r1, r3
 80013ee:	4814      	ldr	r0, [pc, #80]	; (8001440 <MX_TIM1_Init+0x138>)
 80013f0:	f005 fa3e 	bl	8006870 <HAL_TIM_PWM_ConfigChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80013fa:	f7ff fe2b 	bl	8001054 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001412:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001416:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	4619      	mov	r1, r3
 8001420:	4807      	ldr	r0, [pc, #28]	; (8001440 <MX_TIM1_Init+0x138>)
 8001422:	f006 fc1b 	bl	8007c5c <HAL_TIMEx_ConfigBreakDeadTime>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800142c:	f7ff fe12 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001430:	4803      	ldr	r0, [pc, #12]	; (8001440 <MX_TIM1_Init+0x138>)
 8001432:	f000 f85d 	bl	80014f0 <HAL_TIM_MspPostInit>

}
 8001436:	bf00      	nop
 8001438:	3758      	adds	r7, #88	; 0x58
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200008a0 	.word	0x200008a0
 8001444:	40010000 	.word	0x40010000

08001448 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a22      	ldr	r2, [pc, #136]	; (80014e0 <HAL_TIM_Base_MspInit+0x98>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d13d      	bne.n	80014d6 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <HAL_TIM_Base_MspInit+0x9c>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a20      	ldr	r2, [pc, #128]	; (80014e4 <HAL_TIM_Base_MspInit+0x9c>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <HAL_TIM_Base_MspInit+0x9c>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <HAL_TIM_Base_MspInit+0xa0>)
 8001478:	4a1c      	ldr	r2, [pc, #112]	; (80014ec <HAL_TIM_Base_MspInit+0xa4>)
 800147a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800147c:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <HAL_TIM_Base_MspInit+0xa0>)
 800147e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001482:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <HAL_TIM_Base_MspInit+0xa0>)
 8001486:	2240      	movs	r2, #64	; 0x40
 8001488:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <HAL_TIM_Base_MspInit+0xa0>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_TIM_Base_MspInit+0xa0>)
 8001492:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001496:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <HAL_TIM_Base_MspInit+0xa0>)
 800149a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800149e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_TIM_Base_MspInit+0xa0>)
 80014a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014a6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <HAL_TIM_Base_MspInit+0xa0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <HAL_TIM_Base_MspInit+0xa0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <HAL_TIM_Base_MspInit+0xa0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80014ba:	480b      	ldr	r0, [pc, #44]	; (80014e8 <HAL_TIM_Base_MspInit+0xa0>)
 80014bc:	f000 fe30 	bl	8002120 <HAL_DMA_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80014c6:	f7ff fdc5 	bl	8001054 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <HAL_TIM_Base_MspInit+0xa0>)
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24
 80014d0:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <HAL_TIM_Base_MspInit+0xa0>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40010000 	.word	0x40010000
 80014e4:	40023800 	.word	0x40023800
 80014e8:	20000840 	.word	0x20000840
 80014ec:	40026428 	.word	0x40026428

080014f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a12      	ldr	r2, [pc, #72]	; (8001558 <HAL_TIM_MspPostInit+0x68>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d11e      	bne.n	8001550 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_TIM_MspPostInit+0x6c>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a10      	ldr	r2, [pc, #64]	; (800155c <HAL_TIM_MspPostInit+0x6c>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_TIM_MspPostInit+0x6c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800152e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001532:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001540:	2301      	movs	r3, #1
 8001542:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	4619      	mov	r1, r3
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <HAL_TIM_MspPostInit+0x70>)
 800154c:	f001 faf6 	bl	8002b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001550:	bf00      	nop
 8001552:	3720      	adds	r7, #32
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40010000 	.word	0x40010000
 800155c:	40023800 	.word	0x40023800
 8001560:	40020000 	.word	0x40020000

08001564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001564:	f8df d034 	ldr.w	sp, [pc, #52]	; 800159c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001568:	480d      	ldr	r0, [pc, #52]	; (80015a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800156a:	490e      	ldr	r1, [pc, #56]	; (80015a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800156c:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001580:	4c0b      	ldr	r4, [pc, #44]	; (80015b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800158e:	f7ff fea9 	bl	80012e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001592:	f009 fde3 	bl	800b15c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001596:	f7ff fbdd 	bl	8000d54 <main>
  bx  lr    
 800159a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800159c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80015a8:	0800b5ec 	.word	0x0800b5ec
  ldr r2, =_sbss
 80015ac:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80015b0:	20000fd8 	.word	0x20000fd8

080015b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC_IRQHandler>
	...

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_Init+0x40>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <HAL_Init+0x40>)
 80015c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_Init+0x40>)
 80015ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_Init+0x40>)
 80015da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e0:	2003      	movs	r0, #3
 80015e2:	f000 fd2d 	bl	8002040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f000 f808 	bl	80015fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ec:	f7ff fdc0 	bl	8001170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023c00 	.word	0x40023c00

080015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_InitTick+0x54>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_InitTick+0x58>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	fbb3 f3f1 	udiv	r3, r3, r1
 8001616:	fbb2 f3f3 	udiv	r3, r2, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fd74 	bl	8002108 <HAL_SYSTICK_Config>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e00e      	b.n	8001648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b0f      	cmp	r3, #15
 800162e:	d80a      	bhi.n	8001646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001630:	2200      	movs	r2, #0
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001638:	f000 fd22 	bl	8002080 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800163c:	4a06      	ldr	r2, [pc, #24]	; (8001658 <HAL_InitTick+0x5c>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	e000      	b.n	8001648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000000 	.word	0x20000000
 8001654:	20000008 	.word	0x20000008
 8001658:	20000004 	.word	0x20000004

0800165c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x20>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x24>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4413      	add	r3, r2
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_IncTick+0x24>)
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000008 	.word	0x20000008
 8001680:	200008e8 	.word	0x200008e8

08001684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <HAL_GetTick+0x14>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	200008e8 	.word	0x200008e8

0800169c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a4:	f7ff ffee 	bl	8001684 <HAL_GetTick>
 80016a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016b4:	d005      	beq.n	80016c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_Delay+0x44>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4413      	add	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016c2:	bf00      	nop
 80016c4:	f7ff ffde 	bl	8001684 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d8f7      	bhi.n	80016c4 <HAL_Delay+0x28>
  {
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000008 	.word	0x20000008

080016e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e147      	b.n	800198a <HAL_ADC_Init+0x2a6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4aa5      	ldr	r2, [pc, #660]	; (8001994 <HAL_ADC_Init+0x2b0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d004      	beq.n	800170e <HAL_ADC_Init+0x2a>
 8001704:	f240 1143 	movw	r1, #323	; 0x143
 8001708:	48a3      	ldr	r0, [pc, #652]	; (8001998 <HAL_ADC_Init+0x2b4>)
 800170a:	f7ff fca8 	bl	800105e <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d013      	beq.n	800173e <HAL_ADC_Init+0x5a>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171e:	d00e      	beq.n	800173e <HAL_ADC_Init+0x5a>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001728:	d009      	beq.n	800173e <HAL_ADC_Init+0x5a>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001732:	d004      	beq.n	800173e <HAL_ADC_Init+0x5a>
 8001734:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8001738:	4897      	ldr	r0, [pc, #604]	; (8001998 <HAL_ADC_Init+0x2b4>)
 800173a:	f7ff fc90 	bl	800105e <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d013      	beq.n	800176e <HAL_ADC_Init+0x8a>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800174e:	d00e      	beq.n	800176e <HAL_ADC_Init+0x8a>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001758:	d009      	beq.n	800176e <HAL_ADC_Init+0x8a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001762:	d004      	beq.n	800176e <HAL_ADC_Init+0x8a>
 8001764:	f240 1145 	movw	r1, #325	; 0x145
 8001768:	488b      	ldr	r0, [pc, #556]	; (8001998 <HAL_ADC_Init+0x2b4>)
 800176a:	f7ff fc78 	bl	800105e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d008      	beq.n	8001788 <HAL_ADC_Init+0xa4>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d004      	beq.n	8001788 <HAL_ADC_Init+0xa4>
 800177e:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8001782:	4885      	ldr	r0, [pc, #532]	; (8001998 <HAL_ADC_Init+0x2b4>)
 8001784:	f7ff fc6b 	bl	800105e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7e1b      	ldrb	r3, [r3, #24]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d008      	beq.n	80017a2 <HAL_ADC_Init+0xbe>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	7e1b      	ldrb	r3, [r3, #24]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d004      	beq.n	80017a2 <HAL_ADC_Init+0xbe>
 8001798:	f240 1147 	movw	r1, #327	; 0x147
 800179c:	487e      	ldr	r0, [pc, #504]	; (8001998 <HAL_ADC_Init+0x2b4>)
 800179e:	f7ff fc5e 	bl	800105e <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d054      	beq.n	8001854 <HAL_ADC_Init+0x170>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b2:	d04f      	beq.n	8001854 <HAL_ADC_Init+0x170>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017bc:	d04a      	beq.n	8001854 <HAL_ADC_Init+0x170>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80017c6:	d045      	beq.n	8001854 <HAL_ADC_Init+0x170>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80017d0:	d040      	beq.n	8001854 <HAL_ADC_Init+0x170>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80017da:	d03b      	beq.n	8001854 <HAL_ADC_Init+0x170>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80017e4:	d036      	beq.n	8001854 <HAL_ADC_Init+0x170>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80017ee:	d031      	beq.n	8001854 <HAL_ADC_Init+0x170>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017f8:	d02c      	beq.n	8001854 <HAL_ADC_Init+0x170>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8001802:	d027      	beq.n	8001854 <HAL_ADC_Init+0x170>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001808:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800180c:	d022      	beq.n	8001854 <HAL_ADC_Init+0x170>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001812:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8001816:	d01d      	beq.n	8001854 <HAL_ADC_Init+0x170>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001820:	d018      	beq.n	8001854 <HAL_ADC_Init+0x170>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001826:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 800182a:	d013      	beq.n	8001854 <HAL_ADC_Init+0x170>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8001834:	d00e      	beq.n	8001854 <HAL_ADC_Init+0x170>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800183e:	d009      	beq.n	8001854 <HAL_ADC_Init+0x170>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001844:	4a55      	ldr	r2, [pc, #340]	; (800199c <HAL_ADC_Init+0x2b8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d004      	beq.n	8001854 <HAL_ADC_Init+0x170>
 800184a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800184e:	4852      	ldr	r0, [pc, #328]	; (8001998 <HAL_ADC_Init+0x2b4>)
 8001850:	f7ff fc05 	bl	800105e <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d009      	beq.n	8001870 <HAL_ADC_Init+0x18c>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001864:	d004      	beq.n	8001870 <HAL_ADC_Init+0x18c>
 8001866:	f240 1149 	movw	r1, #329	; 0x149
 800186a:	484b      	ldr	r0, [pc, #300]	; (8001998 <HAL_ADC_Init+0x2b4>)
 800186c:	f7ff fbf7 	bl	800105e <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_ADC_Init+0x19c>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	2b10      	cmp	r3, #16
 800187e:	d904      	bls.n	800188a <HAL_ADC_Init+0x1a6>
 8001880:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8001884:	4844      	ldr	r0, [pc, #272]	; (8001998 <HAL_ADC_Init+0x2b4>)
 8001886:	f7ff fbea 	bl	800105e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001890:	2b00      	cmp	r3, #0
 8001892:	d009      	beq.n	80018a8 <HAL_ADC_Init+0x1c4>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800189a:	2b01      	cmp	r3, #1
 800189c:	d004      	beq.n	80018a8 <HAL_ADC_Init+0x1c4>
 800189e:	f240 114b 	movw	r1, #331	; 0x14b
 80018a2:	483d      	ldr	r0, [pc, #244]	; (8001998 <HAL_ADC_Init+0x2b4>)
 80018a4:	f7ff fbdb 	bl	800105e <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d00c      	beq.n	80018ca <HAL_ADC_Init+0x1e6>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d008      	beq.n	80018ca <HAL_ADC_Init+0x1e6>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d004      	beq.n	80018ca <HAL_ADC_Init+0x1e6>
 80018c0:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80018c4:	4834      	ldr	r0, [pc, #208]	; (8001998 <HAL_ADC_Init+0x2b4>)
 80018c6:	f7ff fbca 	bl	800105e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d009      	beq.n	80018e8 <HAL_ADC_Init+0x204>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d004      	beq.n	80018e8 <HAL_ADC_Init+0x204>
 80018de:	f240 114d 	movw	r1, #333	; 0x14d
 80018e2:	482d      	ldr	r0, [pc, #180]	; (8001998 <HAL_ADC_Init+0x2b4>)
 80018e4:	f7ff fbbb 	bl	800105e <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	4a2b      	ldr	r2, [pc, #172]	; (800199c <HAL_ADC_Init+0x2b8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d017      	beq.n	8001922 <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d013      	beq.n	8001922 <HAL_ADC_Init+0x23e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001902:	d00e      	beq.n	8001922 <HAL_ADC_Init+0x23e>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800190c:	d009      	beq.n	8001922 <HAL_ADC_Init+0x23e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001916:	d004      	beq.n	8001922 <HAL_ADC_Init+0x23e>
 8001918:	f240 1151 	movw	r1, #337	; 0x151
 800191c:	481e      	ldr	r0, [pc, #120]	; (8001998 <HAL_ADC_Init+0x2b4>)
 800191e:	f7ff fb9e 	bl	800105e <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	2b00      	cmp	r3, #0
 8001928:	d109      	bne.n	800193e <HAL_ADC_Init+0x25a>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7fe fe30 	bl	8000590 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f003 0310 	and.w	r3, r3, #16
 8001946:	2b00      	cmp	r3, #0
 8001948:	d118      	bne.n	800197c <HAL_ADC_Init+0x298>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001952:	f023 0302 	bic.w	r3, r3, #2
 8001956:	f043 0202 	orr.w	r2, r3, #2
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f994 	bl	8001c8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f023 0303 	bic.w	r3, r3, #3
 8001972:	f043 0201 	orr.w	r2, r3, #1
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	641a      	str	r2, [r3, #64]	; 0x40
 800197a:	e001      	b.n	8001980 <HAL_ADC_Init+0x29c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001988:	7bfb      	ldrb	r3, [r7, #15]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40012000 	.word	0x40012000
 8001998:	0800b37c 	.word	0x0800b37c
 800199c:	0f000001 	.word	0x0f000001

080019a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b12      	cmp	r3, #18
 80019b4:	d909      	bls.n	80019ca <HAL_ADC_ConfigChannel+0x2a>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a72      	ldr	r2, [pc, #456]	; (8001b84 <HAL_ADC_ConfigChannel+0x1e4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d004      	beq.n	80019ca <HAL_ADC_ConfigChannel+0x2a>
 80019c0:	f240 6189 	movw	r1, #1673	; 0x689
 80019c4:	4870      	ldr	r0, [pc, #448]	; (8001b88 <HAL_ADC_ConfigChannel+0x1e8>)
 80019c6:	f7ff fb4a 	bl	800105e <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_ADC_ConfigChannel+0x3a>
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b10      	cmp	r3, #16
 80019d8:	d904      	bls.n	80019e4 <HAL_ADC_ConfigChannel+0x44>
 80019da:	f240 618a 	movw	r1, #1674	; 0x68a
 80019de:	486a      	ldr	r0, [pc, #424]	; (8001b88 <HAL_ADC_ConfigChannel+0x1e8>)
 80019e0:	f7ff fb3d 	bl	800105e <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x8e>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d01c      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x8e>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d018      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x8e>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d014      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x8e>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d010      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x8e>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b05      	cmp	r3, #5
 8001a12:	d00c      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x8e>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b06      	cmp	r3, #6
 8001a1a:	d008      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x8e>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b07      	cmp	r3, #7
 8001a22:	d004      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x8e>
 8001a24:	f240 618b 	movw	r1, #1675	; 0x68b
 8001a28:	4857      	ldr	r0, [pc, #348]	; (8001b88 <HAL_ADC_ConfigChannel+0x1e8>)
 8001a2a:	f7ff fb18 	bl	800105e <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d101      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x9c>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e118      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x2ce>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b09      	cmp	r3, #9
 8001a4a:	d925      	bls.n	8001a98 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68d9      	ldr	r1, [r3, #12]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	3b1e      	subs	r3, #30
 8001a62:	2207      	movs	r2, #7
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43da      	mvns	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	400a      	ands	r2, r1
 8001a70:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68d9      	ldr	r1, [r3, #12]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	4603      	mov	r3, r0
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4403      	add	r3, r0
 8001a8a:	3b1e      	subs	r3, #30
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	e022      	b.n	8001ade <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6919      	ldr	r1, [r3, #16]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	2207      	movs	r2, #7
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	400a      	ands	r2, r1
 8001aba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6919      	ldr	r1, [r3, #16]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	4618      	mov	r0, r3
 8001ace:	4603      	mov	r3, r0
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4403      	add	r3, r0
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d824      	bhi.n	8001b30 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	3b05      	subs	r3, #5
 8001af8:	221f      	movs	r2, #31
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43da      	mvns	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	400a      	ands	r2, r1
 8001b06:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	4618      	mov	r0, r3
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	3b05      	subs	r3, #5
 8001b22:	fa00 f203 	lsl.w	r2, r0, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b2e:	e051      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b0c      	cmp	r3, #12
 8001b36:	d829      	bhi.n	8001b8c <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	3b23      	subs	r3, #35	; 0x23
 8001b4a:	221f      	movs	r2, #31
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43da      	mvns	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	400a      	ands	r2, r1
 8001b58:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	3b23      	subs	r3, #35	; 0x23
 8001b74:	fa00 f203 	lsl.w	r2, r0, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b80:	e028      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x234>
 8001b82:	bf00      	nop
 8001b84:	10000012 	.word	0x10000012
 8001b88:	0800b37c 	.word	0x0800b37c
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3b41      	subs	r3, #65	; 0x41
 8001b9e:	221f      	movs	r2, #31
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43da      	mvns	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	400a      	ands	r2, r1
 8001bac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3b41      	subs	r3, #65	; 0x41
 8001bc8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bd4:	4b28      	ldr	r3, [pc, #160]	; (8001c78 <HAL_ADC_ConfigChannel+0x2d8>)
 8001bd6:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a27      	ldr	r2, [pc, #156]	; (8001c7c <HAL_ADC_ConfigChannel+0x2dc>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d10f      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x262>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b12      	cmp	r3, #18
 8001be8:	d10b      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a1d      	ldr	r2, [pc, #116]	; (8001c7c <HAL_ADC_ConfigChannel+0x2dc>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d12b      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x2c4>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a1b      	ldr	r2, [pc, #108]	; (8001c80 <HAL_ADC_ConfigChannel+0x2e0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d003      	beq.n	8001c1e <HAL_ADC_ConfigChannel+0x27e>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b11      	cmp	r3, #17
 8001c1c:	d122      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a11      	ldr	r2, [pc, #68]	; (8001c80 <HAL_ADC_ConfigChannel+0x2e0>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d111      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c40:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_ADC_ConfigChannel+0x2e4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a10      	ldr	r2, [pc, #64]	; (8001c88 <HAL_ADC_ConfigChannel+0x2e8>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	0c9a      	lsrs	r2, r3, #18
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c56:	e002      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f9      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40012300 	.word	0x40012300
 8001c7c:	40012000 	.word	0x40012000
 8001c80:	10000012 	.word	0x10000012
 8001c84:	20000000 	.word	0x20000000
 8001c88:	431bde83 	.word	0x431bde83

08001c8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c94:	4b7f      	ldr	r3, [pc, #508]	; (8001e94 <ADC_Init+0x208>)
 8001c96:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	431a      	orrs	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6859      	ldr	r1, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	021a      	lsls	r2, r3, #8
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ce4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6859      	ldr	r1, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6899      	ldr	r1, [r3, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1e:	4a5e      	ldr	r2, [pc, #376]	; (8001e98 <ADC_Init+0x20c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d022      	beq.n	8001d6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6899      	ldr	r1, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6899      	ldr	r1, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	e00f      	b.n	8001d8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0202 	bic.w	r2, r2, #2
 8001d98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6899      	ldr	r1, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	7e1b      	ldrb	r3, [r3, #24]
 8001da4:	005a      	lsls	r2, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d028      	beq.n	8001e0a <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <ADC_Init+0x13c>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d904      	bls.n	8001dd2 <ADC_Init+0x146>
 8001dc8:	f240 71a6 	movw	r1, #1958	; 0x7a6
 8001dcc:	4833      	ldr	r0, [pc, #204]	; (8001e9c <ADC_Init+0x210>)
 8001dce:	f7ff f946 	bl	800105e <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001de0:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001df0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	035a      	lsls	r2, r3, #13
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	e007      	b.n	8001e1a <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e18:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e28:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	3b01      	subs	r3, #1
 8001e36:	051a      	lsls	r2, r3, #20
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6899      	ldr	r1, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e5c:	025a      	lsls	r2, r3, #9
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6899      	ldr	r1, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	029a      	lsls	r2, r3, #10
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	609a      	str	r2, [r3, #8]
}
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40012300 	.word	0x40012300
 8001e98:	0f000001 	.word	0x0f000001
 8001e9c:	0800b37c 	.word	0x0800b37c

08001ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ed2:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	60d3      	str	r3, [r2, #12]
}
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <__NVIC_GetPriorityGrouping+0x18>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	0a1b      	lsrs	r3, r3, #8
 8001ef2:	f003 0307 	and.w	r3, r3, #7
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	db0b      	blt.n	8001f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	f003 021f 	and.w	r2, r3, #31
 8001f1c:	4907      	ldr	r1, [pc, #28]	; (8001f3c <__NVIC_EnableIRQ+0x38>)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	095b      	lsrs	r3, r3, #5
 8001f24:	2001      	movs	r0, #1
 8001f26:	fa00 f202 	lsl.w	r2, r0, r2
 8001f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000e100 	.word	0xe000e100

08001f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db0a      	blt.n	8001f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	490c      	ldr	r1, [pc, #48]	; (8001f8c <__NVIC_SetPriority+0x4c>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	440b      	add	r3, r1
 8001f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f68:	e00a      	b.n	8001f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4908      	ldr	r1, [pc, #32]	; (8001f90 <__NVIC_SetPriority+0x50>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	3b04      	subs	r3, #4
 8001f78:	0112      	lsls	r2, r2, #4
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	761a      	strb	r2, [r3, #24]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000e100 	.word	0xe000e100
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	; 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f1c3 0307 	rsb	r3, r3, #7
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	bf28      	it	cs
 8001fb2:	2304      	movcs	r3, #4
 8001fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d902      	bls.n	8001fc4 <NVIC_EncodePriority+0x30>
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3b03      	subs	r3, #3
 8001fc2:	e000      	b.n	8001fc6 <NVIC_EncodePriority+0x32>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	43d9      	mvns	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	4313      	orrs	r3, r2
         );
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3724      	adds	r7, #36	; 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b01      	subs	r3, #1
 8002008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800200c:	d301      	bcc.n	8002012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200e:	2301      	movs	r3, #1
 8002010:	e00f      	b.n	8002032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002012:	4a0a      	ldr	r2, [pc, #40]	; (800203c <SysTick_Config+0x40>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201a:	210f      	movs	r1, #15
 800201c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002020:	f7ff ff8e 	bl	8001f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <SysTick_Config+0x40>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202a:	4b04      	ldr	r3, [pc, #16]	; (800203c <SysTick_Config+0x40>)
 800202c:	2207      	movs	r2, #7
 800202e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	e000e010 	.word	0xe000e010

08002040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b07      	cmp	r3, #7
 800204c:	d00f      	beq.n	800206e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b06      	cmp	r3, #6
 8002052:	d00c      	beq.n	800206e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b05      	cmp	r3, #5
 8002058:	d009      	beq.n	800206e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b04      	cmp	r3, #4
 800205e:	d006      	beq.n	800206e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d003      	beq.n	800206e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002066:	2192      	movs	r1, #146	; 0x92
 8002068:	4804      	ldr	r0, [pc, #16]	; (800207c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800206a:	f7fe fff8 	bl	800105e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff ff16 	bl	8001ea0 <__NVIC_SetPriorityGrouping>
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	0800b3b4 	.word	0x0800b3b4

08002080 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b0f      	cmp	r3, #15
 8002096:	d903      	bls.n	80020a0 <HAL_NVIC_SetPriority+0x20>
 8002098:	21aa      	movs	r1, #170	; 0xaa
 800209a:	480e      	ldr	r0, [pc, #56]	; (80020d4 <HAL_NVIC_SetPriority+0x54>)
 800209c:	f7fe ffdf 	bl	800105e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b0f      	cmp	r3, #15
 80020a4:	d903      	bls.n	80020ae <HAL_NVIC_SetPriority+0x2e>
 80020a6:	21ab      	movs	r1, #171	; 0xab
 80020a8:	480a      	ldr	r0, [pc, #40]	; (80020d4 <HAL_NVIC_SetPriority+0x54>)
 80020aa:	f7fe ffd8 	bl	800105e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ae:	f7ff ff1b 	bl	8001ee8 <__NVIC_GetPriorityGrouping>
 80020b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	68b9      	ldr	r1, [r7, #8]
 80020b8:	6978      	ldr	r0, [r7, #20]
 80020ba:	f7ff ff6b 	bl	8001f94 <NVIC_EncodePriority>
 80020be:	4602      	mov	r2, r0
 80020c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c4:	4611      	mov	r1, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff ff3a 	bl	8001f40 <__NVIC_SetPriority>
}
 80020cc:	bf00      	nop
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	0800b3b4 	.word	0x0800b3b4

080020d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	da03      	bge.n	80020f2 <HAL_NVIC_EnableIRQ+0x1a>
 80020ea:	21be      	movs	r1, #190	; 0xbe
 80020ec:	4805      	ldr	r0, [pc, #20]	; (8002104 <HAL_NVIC_EnableIRQ+0x2c>)
 80020ee:	f7fe ffb6 	bl	800105e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ff04 	bl	8001f04 <__NVIC_EnableIRQ>
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	0800b3b4 	.word	0x0800b3b4

08002108 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff ff73 	bl	8001ffc <SysTick_Config>
 8002116:	4603      	mov	r3, r0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800212c:	f7ff faaa 	bl	8001684 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e204      	b.n	8002546 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a97      	ldr	r2, [pc, #604]	; (80023a0 <HAL_DMA_Init+0x280>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d04e      	beq.n	80021e4 <HAL_DMA_Init+0xc4>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a96      	ldr	r2, [pc, #600]	; (80023a4 <HAL_DMA_Init+0x284>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d049      	beq.n	80021e4 <HAL_DMA_Init+0xc4>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a94      	ldr	r2, [pc, #592]	; (80023a8 <HAL_DMA_Init+0x288>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d044      	beq.n	80021e4 <HAL_DMA_Init+0xc4>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a93      	ldr	r2, [pc, #588]	; (80023ac <HAL_DMA_Init+0x28c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d03f      	beq.n	80021e4 <HAL_DMA_Init+0xc4>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a91      	ldr	r2, [pc, #580]	; (80023b0 <HAL_DMA_Init+0x290>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d03a      	beq.n	80021e4 <HAL_DMA_Init+0xc4>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a90      	ldr	r2, [pc, #576]	; (80023b4 <HAL_DMA_Init+0x294>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d035      	beq.n	80021e4 <HAL_DMA_Init+0xc4>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a8e      	ldr	r2, [pc, #568]	; (80023b8 <HAL_DMA_Init+0x298>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d030      	beq.n	80021e4 <HAL_DMA_Init+0xc4>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a8d      	ldr	r2, [pc, #564]	; (80023bc <HAL_DMA_Init+0x29c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d02b      	beq.n	80021e4 <HAL_DMA_Init+0xc4>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a8b      	ldr	r2, [pc, #556]	; (80023c0 <HAL_DMA_Init+0x2a0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d026      	beq.n	80021e4 <HAL_DMA_Init+0xc4>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a8a      	ldr	r2, [pc, #552]	; (80023c4 <HAL_DMA_Init+0x2a4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d021      	beq.n	80021e4 <HAL_DMA_Init+0xc4>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a88      	ldr	r2, [pc, #544]	; (80023c8 <HAL_DMA_Init+0x2a8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01c      	beq.n	80021e4 <HAL_DMA_Init+0xc4>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a87      	ldr	r2, [pc, #540]	; (80023cc <HAL_DMA_Init+0x2ac>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d017      	beq.n	80021e4 <HAL_DMA_Init+0xc4>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a85      	ldr	r2, [pc, #532]	; (80023d0 <HAL_DMA_Init+0x2b0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d012      	beq.n	80021e4 <HAL_DMA_Init+0xc4>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a84      	ldr	r2, [pc, #528]	; (80023d4 <HAL_DMA_Init+0x2b4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d00d      	beq.n	80021e4 <HAL_DMA_Init+0xc4>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a82      	ldr	r2, [pc, #520]	; (80023d8 <HAL_DMA_Init+0x2b8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d008      	beq.n	80021e4 <HAL_DMA_Init+0xc4>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a81      	ldr	r2, [pc, #516]	; (80023dc <HAL_DMA_Init+0x2bc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d003      	beq.n	80021e4 <HAL_DMA_Init+0xc4>
 80021dc:	21b8      	movs	r1, #184	; 0xb8
 80021de:	4880      	ldr	r0, [pc, #512]	; (80023e0 <HAL_DMA_Init+0x2c0>)
 80021e0:	f7fe ff3d 	bl	800105e <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d026      	beq.n	800223a <HAL_DMA_Init+0x11a>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021f4:	d021      	beq.n	800223a <HAL_DMA_Init+0x11a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021fe:	d01c      	beq.n	800223a <HAL_DMA_Init+0x11a>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002208:	d017      	beq.n	800223a <HAL_DMA_Init+0x11a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002212:	d012      	beq.n	800223a <HAL_DMA_Init+0x11a>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800221c:	d00d      	beq.n	800223a <HAL_DMA_Init+0x11a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002226:	d008      	beq.n	800223a <HAL_DMA_Init+0x11a>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8002230:	d003      	beq.n	800223a <HAL_DMA_Init+0x11a>
 8002232:	21b9      	movs	r1, #185	; 0xb9
 8002234:	486a      	ldr	r0, [pc, #424]	; (80023e0 <HAL_DMA_Init+0x2c0>)
 8002236:	f7fe ff12 	bl	800105e <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00b      	beq.n	800225a <HAL_DMA_Init+0x13a>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b40      	cmp	r3, #64	; 0x40
 8002248:	d007      	beq.n	800225a <HAL_DMA_Init+0x13a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b80      	cmp	r3, #128	; 0x80
 8002250:	d003      	beq.n	800225a <HAL_DMA_Init+0x13a>
 8002252:	21ba      	movs	r1, #186	; 0xba
 8002254:	4862      	ldr	r0, [pc, #392]	; (80023e0 <HAL_DMA_Init+0x2c0>)
 8002256:	f7fe ff02 	bl	800105e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002262:	d007      	beq.n	8002274 <HAL_DMA_Init+0x154>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_DMA_Init+0x154>
 800226c:	21bb      	movs	r1, #187	; 0xbb
 800226e:	485c      	ldr	r0, [pc, #368]	; (80023e0 <HAL_DMA_Init+0x2c0>)
 8002270:	f7fe fef5 	bl	800105e <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800227c:	d007      	beq.n	800228e <HAL_DMA_Init+0x16e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_DMA_Init+0x16e>
 8002286:	21bc      	movs	r1, #188	; 0xbc
 8002288:	4855      	ldr	r0, [pc, #340]	; (80023e0 <HAL_DMA_Init+0x2c0>)
 800228a:	f7fe fee8 	bl	800105e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00d      	beq.n	80022b2 <HAL_DMA_Init+0x192>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800229e:	d008      	beq.n	80022b2 <HAL_DMA_Init+0x192>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a8:	d003      	beq.n	80022b2 <HAL_DMA_Init+0x192>
 80022aa:	21bd      	movs	r1, #189	; 0xbd
 80022ac:	484c      	ldr	r0, [pc, #304]	; (80023e0 <HAL_DMA_Init+0x2c0>)
 80022ae:	f7fe fed6 	bl	800105e <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00d      	beq.n	80022d6 <HAL_DMA_Init+0x1b6>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022c2:	d008      	beq.n	80022d6 <HAL_DMA_Init+0x1b6>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022cc:	d003      	beq.n	80022d6 <HAL_DMA_Init+0x1b6>
 80022ce:	21be      	movs	r1, #190	; 0xbe
 80022d0:	4843      	ldr	r0, [pc, #268]	; (80023e0 <HAL_DMA_Init+0x2c0>)
 80022d2:	f7fe fec4 	bl	800105e <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00c      	beq.n	80022f8 <HAL_DMA_Init+0x1d8>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022e6:	d007      	beq.n	80022f8 <HAL_DMA_Init+0x1d8>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	d003      	beq.n	80022f8 <HAL_DMA_Init+0x1d8>
 80022f0:	21bf      	movs	r1, #191	; 0xbf
 80022f2:	483b      	ldr	r0, [pc, #236]	; (80023e0 <HAL_DMA_Init+0x2c0>)
 80022f4:	f7fe feb3 	bl	800105e <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d012      	beq.n	8002326 <HAL_DMA_Init+0x206>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002308:	d00d      	beq.n	8002326 <HAL_DMA_Init+0x206>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002312:	d008      	beq.n	8002326 <HAL_DMA_Init+0x206>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800231c:	d003      	beq.n	8002326 <HAL_DMA_Init+0x206>
 800231e:	21c0      	movs	r1, #192	; 0xc0
 8002320:	482f      	ldr	r0, [pc, #188]	; (80023e0 <HAL_DMA_Init+0x2c0>)
 8002322:	f7fe fe9c 	bl	800105e <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	2b00      	cmp	r3, #0
 800232c:	d007      	beq.n	800233e <HAL_DMA_Init+0x21e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	2b04      	cmp	r3, #4
 8002334:	d003      	beq.n	800233e <HAL_DMA_Init+0x21e>
 8002336:	21c1      	movs	r1, #193	; 0xc1
 8002338:	4829      	ldr	r0, [pc, #164]	; (80023e0 <HAL_DMA_Init+0x2c0>)
 800233a:	f7fe fe90 	bl	800105e <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	2b00      	cmp	r3, #0
 8002344:	d065      	beq.n	8002412 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00f      	beq.n	800236e <HAL_DMA_Init+0x24e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002352:	2b01      	cmp	r3, #1
 8002354:	d00b      	beq.n	800236e <HAL_DMA_Init+0x24e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	2b02      	cmp	r3, #2
 800235c:	d007      	beq.n	800236e <HAL_DMA_Init+0x24e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002362:	2b03      	cmp	r3, #3
 8002364:	d003      	beq.n	800236e <HAL_DMA_Init+0x24e>
 8002366:	21c6      	movs	r1, #198	; 0xc6
 8002368:	481d      	ldr	r0, [pc, #116]	; (80023e0 <HAL_DMA_Init+0x2c0>)
 800236a:	f7fe fe78 	bl	800105e <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	2b00      	cmp	r3, #0
 8002374:	d036      	beq.n	80023e4 <HAL_DMA_Init+0x2c4>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800237e:	d031      	beq.n	80023e4 <HAL_DMA_Init+0x2c4>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002388:	d02c      	beq.n	80023e4 <HAL_DMA_Init+0x2c4>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002392:	d027      	beq.n	80023e4 <HAL_DMA_Init+0x2c4>
 8002394:	21c7      	movs	r1, #199	; 0xc7
 8002396:	4812      	ldr	r0, [pc, #72]	; (80023e0 <HAL_DMA_Init+0x2c0>)
 8002398:	f7fe fe61 	bl	800105e <assert_failed>
 800239c:	e022      	b.n	80023e4 <HAL_DMA_Init+0x2c4>
 800239e:	bf00      	nop
 80023a0:	40026010 	.word	0x40026010
 80023a4:	40026028 	.word	0x40026028
 80023a8:	40026040 	.word	0x40026040
 80023ac:	40026058 	.word	0x40026058
 80023b0:	40026070 	.word	0x40026070
 80023b4:	40026088 	.word	0x40026088
 80023b8:	400260a0 	.word	0x400260a0
 80023bc:	400260b8 	.word	0x400260b8
 80023c0:	40026410 	.word	0x40026410
 80023c4:	40026428 	.word	0x40026428
 80023c8:	40026440 	.word	0x40026440
 80023cc:	40026458 	.word	0x40026458
 80023d0:	40026470 	.word	0x40026470
 80023d4:	40026488 	.word	0x40026488
 80023d8:	400264a0 	.word	0x400264a0
 80023dc:	400264b8 	.word	0x400264b8
 80023e0:	0800b3f0 	.word	0x0800b3f0
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d012      	beq.n	8002412 <HAL_DMA_Init+0x2f2>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023f4:	d00d      	beq.n	8002412 <HAL_DMA_Init+0x2f2>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023fe:	d008      	beq.n	8002412 <HAL_DMA_Init+0x2f2>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002408:	d003      	beq.n	8002412 <HAL_DMA_Init+0x2f2>
 800240a:	21c8      	movs	r1, #200	; 0xc8
 800240c:	4850      	ldr	r0, [pc, #320]	; (8002550 <HAL_DMA_Init+0x430>)
 800240e:	f7fe fe26 	bl	800105e <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2202      	movs	r2, #2
 8002416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0201 	bic.w	r2, r2, #1
 8002430:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002432:	e00f      	b.n	8002454 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002434:	f7ff f926 	bl	8001684 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b05      	cmp	r3, #5
 8002440:	d908      	bls.n	8002454 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2220      	movs	r2, #32
 8002446:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2203      	movs	r2, #3
 800244c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e078      	b.n	8002546 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1e8      	bne.n	8002434 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4b39      	ldr	r3, [pc, #228]	; (8002554 <HAL_DMA_Init+0x434>)
 800246e:	4013      	ands	r3, r2
 8002470:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002480:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800248c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002498:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d107      	bne.n	80024be <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4313      	orrs	r3, r2
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f023 0307 	bic.w	r3, r3, #7
 80024d4:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d117      	bne.n	8002518 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00e      	beq.n	8002518 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 faa2 	bl	8002a44 <DMA_CheckFifoParam>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2240      	movs	r2, #64	; 0x40
 800250a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002514:	2301      	movs	r3, #1
 8002516:	e016      	b.n	8002546 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 fa59 	bl	80029d8 <DMA_CalcBaseAndBitshift>
 8002526:	4603      	mov	r3, r0
 8002528:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252e:	223f      	movs	r2, #63	; 0x3f
 8002530:	409a      	lsls	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	0800b3f0 	.word	0x0800b3f0
 8002554:	f010803f 	.word	0xf010803f

08002558 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_DMA_Start_IT+0x26>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800257c:	d304      	bcc.n	8002588 <HAL_DMA_Start_IT+0x30>
 800257e:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8002582:	4827      	ldr	r0, [pc, #156]	; (8002620 <HAL_DMA_Start_IT+0xc8>)
 8002584:	f7fe fd6b 	bl	800105e <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_DMA_Start_IT+0x3e>
 8002592:	2302      	movs	r3, #2
 8002594:	e040      	b.n	8002618 <HAL_DMA_Start_IT+0xc0>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d12f      	bne.n	800260a <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2202      	movs	r2, #2
 80025ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f9dc 	bl	800297c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c8:	223f      	movs	r2, #63	; 0x3f
 80025ca:	409a      	lsls	r2, r3
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0216 	orr.w	r2, r2, #22
 80025de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d007      	beq.n	80025f8 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0208 	orr.w	r2, r2, #8
 80025f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	e005      	b.n	8002616 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002612:	2302      	movs	r3, #2
 8002614:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002616:	7dfb      	ldrb	r3, [r7, #23]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	0800b3f0 	.word	0x0800b3f0

08002624 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d004      	beq.n	8002642 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2280      	movs	r2, #128	; 0x80
 800263c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e00c      	b.n	800265c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2205      	movs	r2, #5
 8002646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0201 	bic.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002674:	4b92      	ldr	r3, [pc, #584]	; (80028c0 <HAL_DMA_IRQHandler+0x258>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a92      	ldr	r2, [pc, #584]	; (80028c4 <HAL_DMA_IRQHandler+0x25c>)
 800267a:	fba2 2303 	umull	r2, r3, r2, r3
 800267e:	0a9b      	lsrs	r3, r3, #10
 8002680:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002692:	2208      	movs	r2, #8
 8002694:	409a      	lsls	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4013      	ands	r3, r2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d01a      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d013      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0204 	bic.w	r2, r2, #4
 80026ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c0:	2208      	movs	r2, #8
 80026c2:	409a      	lsls	r2, r3
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026cc:	f043 0201 	orr.w	r2, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d8:	2201      	movs	r2, #1
 80026da:	409a      	lsls	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4013      	ands	r3, r2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d012      	beq.n	800270a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00b      	beq.n	800270a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f6:	2201      	movs	r2, #1
 80026f8:	409a      	lsls	r2, r3
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	f043 0202 	orr.w	r2, r3, #2
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270e:	2204      	movs	r2, #4
 8002710:	409a      	lsls	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4013      	ands	r3, r2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d012      	beq.n	8002740 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00b      	beq.n	8002740 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272c:	2204      	movs	r2, #4
 800272e:	409a      	lsls	r2, r3
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002738:	f043 0204 	orr.w	r2, r3, #4
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002744:	2210      	movs	r2, #16
 8002746:	409a      	lsls	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d043      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d03c      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002762:	2210      	movs	r2, #16
 8002764:	409a      	lsls	r2, r3
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d018      	beq.n	80027aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d108      	bne.n	8002798 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	2b00      	cmp	r3, #0
 800278c:	d024      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	4798      	blx	r3
 8002796:	e01f      	b.n	80027d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800279c:	2b00      	cmp	r3, #0
 800279e:	d01b      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	4798      	blx	r3
 80027a8:	e016      	b.n	80027d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d107      	bne.n	80027c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0208 	bic.w	r2, r2, #8
 80027c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027dc:	2220      	movs	r2, #32
 80027de:	409a      	lsls	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4013      	ands	r3, r2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 808e 	beq.w	8002906 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 8086 	beq.w	8002906 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fe:	2220      	movs	r2, #32
 8002800:	409a      	lsls	r2, r3
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b05      	cmp	r3, #5
 8002810:	d136      	bne.n	8002880 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0216 	bic.w	r2, r2, #22
 8002820:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002830:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d103      	bne.n	8002842 <HAL_DMA_IRQHandler+0x1da>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800283e:	2b00      	cmp	r3, #0
 8002840:	d007      	beq.n	8002852 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0208 	bic.w	r2, r2, #8
 8002850:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002856:	223f      	movs	r2, #63	; 0x3f
 8002858:	409a      	lsls	r2, r3
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002872:	2b00      	cmp	r3, #0
 8002874:	d07d      	beq.n	8002972 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	4798      	blx	r3
        }
        return;
 800287e:	e078      	b.n	8002972 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d01c      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d108      	bne.n	80028ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d030      	beq.n	8002906 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	4798      	blx	r3
 80028ac:	e02b      	b.n	8002906 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d027      	beq.n	8002906 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	4798      	blx	r3
 80028be:	e022      	b.n	8002906 <HAL_DMA_IRQHandler+0x29e>
 80028c0:	20000000 	.word	0x20000000
 80028c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10f      	bne.n	80028f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0210 	bic.w	r2, r2, #16
 80028e4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290a:	2b00      	cmp	r3, #0
 800290c:	d032      	beq.n	8002974 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d022      	beq.n	8002960 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2205      	movs	r2, #5
 800291e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0201 	bic.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	3301      	adds	r3, #1
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	429a      	cmp	r2, r3
 800293c:	d307      	bcc.n	800294e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1f2      	bne.n	8002932 <HAL_DMA_IRQHandler+0x2ca>
 800294c:	e000      	b.n	8002950 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800294e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	4798      	blx	r3
 8002970:	e000      	b.n	8002974 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002972:	bf00      	nop
    }
  }
}
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop

0800297c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002998:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b40      	cmp	r3, #64	; 0x40
 80029a8:	d108      	bne.n	80029bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029ba:	e007      	b.n	80029cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	60da      	str	r2, [r3, #12]
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	3b10      	subs	r3, #16
 80029e8:	4a14      	ldr	r2, [pc, #80]	; (8002a3c <DMA_CalcBaseAndBitshift+0x64>)
 80029ea:	fba2 2303 	umull	r2, r3, r2, r3
 80029ee:	091b      	lsrs	r3, r3, #4
 80029f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029f2:	4a13      	ldr	r2, [pc, #76]	; (8002a40 <DMA_CalcBaseAndBitshift+0x68>)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4413      	add	r3, r2
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d909      	bls.n	8002a1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a0e:	f023 0303 	bic.w	r3, r3, #3
 8002a12:	1d1a      	adds	r2, r3, #4
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	659a      	str	r2, [r3, #88]	; 0x58
 8002a18:	e007      	b.n	8002a2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a22:	f023 0303 	bic.w	r3, r3, #3
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	aaaaaaab 	.word	0xaaaaaaab
 8002a40:	0800b5d4 	.word	0x0800b5d4

08002a44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d11f      	bne.n	8002a9e <DMA_CheckFifoParam+0x5a>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d856      	bhi.n	8002b12 <DMA_CheckFifoParam+0xce>
 8002a64:	a201      	add	r2, pc, #4	; (adr r2, 8002a6c <DMA_CheckFifoParam+0x28>)
 8002a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6a:	bf00      	nop
 8002a6c:	08002a7d 	.word	0x08002a7d
 8002a70:	08002a8f 	.word	0x08002a8f
 8002a74:	08002a7d 	.word	0x08002a7d
 8002a78:	08002b13 	.word	0x08002b13
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d046      	beq.n	8002b16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a8c:	e043      	b.n	8002b16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a96:	d140      	bne.n	8002b1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a9c:	e03d      	b.n	8002b1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aa6:	d121      	bne.n	8002aec <DMA_CheckFifoParam+0xa8>
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d837      	bhi.n	8002b1e <DMA_CheckFifoParam+0xda>
 8002aae:	a201      	add	r2, pc, #4	; (adr r2, 8002ab4 <DMA_CheckFifoParam+0x70>)
 8002ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab4:	08002ac5 	.word	0x08002ac5
 8002ab8:	08002acb 	.word	0x08002acb
 8002abc:	08002ac5 	.word	0x08002ac5
 8002ac0:	08002add 	.word	0x08002add
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac8:	e030      	b.n	8002b2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d025      	beq.n	8002b22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ada:	e022      	b.n	8002b22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ae4:	d11f      	bne.n	8002b26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002aea:	e01c      	b.n	8002b26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d903      	bls.n	8002afa <DMA_CheckFifoParam+0xb6>
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d003      	beq.n	8002b00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002af8:	e018      	b.n	8002b2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	73fb      	strb	r3, [r7, #15]
      break;
 8002afe:	e015      	b.n	8002b2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00e      	beq.n	8002b2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b10:	e00b      	b.n	8002b2a <DMA_CheckFifoParam+0xe6>
      break;
 8002b12:	bf00      	nop
 8002b14:	e00a      	b.n	8002b2c <DMA_CheckFifoParam+0xe8>
      break;
 8002b16:	bf00      	nop
 8002b18:	e008      	b.n	8002b2c <DMA_CheckFifoParam+0xe8>
      break;
 8002b1a:	bf00      	nop
 8002b1c:	e006      	b.n	8002b2c <DMA_CheckFifoParam+0xe8>
      break;
 8002b1e:	bf00      	nop
 8002b20:	e004      	b.n	8002b2c <DMA_CheckFifoParam+0xe8>
      break;
 8002b22:	bf00      	nop
 8002b24:	e002      	b.n	8002b2c <DMA_CheckFifoParam+0xe8>
      break;   
 8002b26:	bf00      	nop
 8002b28:	e000      	b.n	8002b2c <DMA_CheckFifoParam+0xe8>
      break;
 8002b2a:	bf00      	nop
    }
  } 
  
  return status; 
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop

08002b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a33      	ldr	r2, [pc, #204]	; (8002c24 <HAL_GPIO_Init+0xe8>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d017      	beq.n	8002b8a <HAL_GPIO_Init+0x4e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a32      	ldr	r2, [pc, #200]	; (8002c28 <HAL_GPIO_Init+0xec>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d013      	beq.n	8002b8a <HAL_GPIO_Init+0x4e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a31      	ldr	r2, [pc, #196]	; (8002c2c <HAL_GPIO_Init+0xf0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00f      	beq.n	8002b8a <HAL_GPIO_Init+0x4e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a30      	ldr	r2, [pc, #192]	; (8002c30 <HAL_GPIO_Init+0xf4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d00b      	beq.n	8002b8a <HAL_GPIO_Init+0x4e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a2f      	ldr	r2, [pc, #188]	; (8002c34 <HAL_GPIO_Init+0xf8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d007      	beq.n	8002b8a <HAL_GPIO_Init+0x4e>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a2e      	ldr	r2, [pc, #184]	; (8002c38 <HAL_GPIO_Init+0xfc>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_Init+0x4e>
 8002b82:	21ac      	movs	r1, #172	; 0xac
 8002b84:	482d      	ldr	r0, [pc, #180]	; (8002c3c <HAL_GPIO_Init+0x100>)
 8002b86:	f7fe fa6a 	bl	800105e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_GPIO_Init+0x64>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	0c1b      	lsrs	r3, r3, #16
 8002b9a:	041b      	lsls	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_GPIO_Init+0x6c>
 8002ba0:	21ad      	movs	r1, #173	; 0xad
 8002ba2:	4826      	ldr	r0, [pc, #152]	; (8002c3c <HAL_GPIO_Init+0x100>)
 8002ba4:	f7fe fa5b 	bl	800105e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d035      	beq.n	8002c1c <HAL_GPIO_Init+0xe0>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d031      	beq.n	8002c1c <HAL_GPIO_Init+0xe0>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b11      	cmp	r3, #17
 8002bbe:	d02d      	beq.n	8002c1c <HAL_GPIO_Init+0xe0>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d029      	beq.n	8002c1c <HAL_GPIO_Init+0xe0>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b12      	cmp	r3, #18
 8002bce:	d025      	beq.n	8002c1c <HAL_GPIO_Init+0xe0>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002bd8:	d020      	beq.n	8002c1c <HAL_GPIO_Init+0xe0>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002be2:	d01b      	beq.n	8002c1c <HAL_GPIO_Init+0xe0>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002bec:	d016      	beq.n	8002c1c <HAL_GPIO_Init+0xe0>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8002bf6:	d011      	beq.n	8002c1c <HAL_GPIO_Init+0xe0>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002c00:	d00c      	beq.n	8002c1c <HAL_GPIO_Init+0xe0>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8002c0a:	d007      	beq.n	8002c1c <HAL_GPIO_Init+0xe0>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d003      	beq.n	8002c1c <HAL_GPIO_Init+0xe0>
 8002c14:	21ae      	movs	r1, #174	; 0xae
 8002c16:	4809      	ldr	r0, [pc, #36]	; (8002c3c <HAL_GPIO_Init+0x100>)
 8002c18:	f7fe fa21 	bl	800105e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	e211      	b.n	8003046 <HAL_GPIO_Init+0x50a>
 8002c22:	bf00      	nop
 8002c24:	40020000 	.word	0x40020000
 8002c28:	40020400 	.word	0x40020400
 8002c2c:	40020800 	.word	0x40020800
 8002c30:	40020c00 	.word	0x40020c00
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40021c00 	.word	0x40021c00
 8002c3c:	0800b428 	.word	0x0800b428
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c40:	2201      	movs	r2, #1
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4013      	ands	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	f040 81f1 	bne.w	8003040 <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d005      	beq.n	8002c76 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d144      	bne.n	8002d00 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00f      	beq.n	8002c9e <HAL_GPIO_Init+0x162>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d00b      	beq.n	8002c9e <HAL_GPIO_Init+0x162>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d007      	beq.n	8002c9e <HAL_GPIO_Init+0x162>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_Init+0x162>
 8002c96:	21c0      	movs	r1, #192	; 0xc0
 8002c98:	489f      	ldr	r0, [pc, #636]	; (8002f18 <HAL_GPIO_Init+0x3dc>)
 8002c9a:	f7fe f9e0 	bl	800105e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	2203      	movs	r2, #3
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 0201 	and.w	r2, r3, #1
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d027      	beq.n	8002d5c <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00b      	beq.n	8002d2c <HAL_GPIO_Init+0x1f0>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d007      	beq.n	8002d2c <HAL_GPIO_Init+0x1f0>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d003      	beq.n	8002d2c <HAL_GPIO_Init+0x1f0>
 8002d24:	21d1      	movs	r1, #209	; 0xd1
 8002d26:	487c      	ldr	r0, [pc, #496]	; (8002f18 <HAL_GPIO_Init+0x3dc>)
 8002d28:	f7fe f999 	bl	800105e <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	2203      	movs	r2, #3
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	f040 80a0 	bne.w	8002eaa <HAL_GPIO_Init+0x36e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d077      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	2b09      	cmp	r3, #9
 8002d78:	d073      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d06f      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d06b      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d067      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d063      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d05f      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d05b      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d057      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d053      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d04f      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d04b      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d047      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d043      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	2b05      	cmp	r3, #5
 8002de0:	d03f      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b05      	cmp	r3, #5
 8002de8:	d03b      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b05      	cmp	r3, #5
 8002df0:	d037      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b06      	cmp	r3, #6
 8002df8:	d033      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	2b06      	cmp	r3, #6
 8002e00:	d02f      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	2b05      	cmp	r3, #5
 8002e08:	d02b      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b06      	cmp	r3, #6
 8002e10:	d027      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2b07      	cmp	r3, #7
 8002e18:	d023      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	2b07      	cmp	r3, #7
 8002e20:	d01f      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	2b07      	cmp	r3, #7
 8002e28:	d01b      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d017      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	2b0a      	cmp	r3, #10
 8002e38:	d013      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	2b09      	cmp	r3, #9
 8002e40:	d00f      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	2b09      	cmp	r3, #9
 8002e48:	d00b      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	2b0c      	cmp	r3, #12
 8002e50:	d007      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	2b0f      	cmp	r3, #15
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_Init+0x326>
 8002e5a:	21de      	movs	r1, #222	; 0xde
 8002e5c:	482e      	ldr	r0, [pc, #184]	; (8002f18 <HAL_GPIO_Init+0x3dc>)
 8002e5e:	f7fe f8fe 	bl	800105e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	08da      	lsrs	r2, r3, #3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3208      	adds	r2, #8
 8002e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	220f      	movs	r2, #15
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	08da      	lsrs	r2, r3, #3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3208      	adds	r2, #8
 8002ea4:	69b9      	ldr	r1, [r7, #24]
 8002ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 0203 	and.w	r2, r3, #3
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80aa 	beq.w	8003040 <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eec:	2300      	movs	r3, #0
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	4b0a      	ldr	r3, [pc, #40]	; (8002f1c <HAL_GPIO_Init+0x3e0>)
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	4a09      	ldr	r2, [pc, #36]	; (8002f1c <HAL_GPIO_Init+0x3e0>)
 8002ef6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002efa:	6453      	str	r3, [r2, #68]	; 0x44
 8002efc:	4b07      	ldr	r3, [pc, #28]	; (8002f1c <HAL_GPIO_Init+0x3e0>)
 8002efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f08:	4a05      	ldr	r2, [pc, #20]	; (8002f20 <HAL_GPIO_Init+0x3e4>)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	089b      	lsrs	r3, r3, #2
 8002f0e:	3302      	adds	r3, #2
 8002f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f14:	e006      	b.n	8002f24 <HAL_GPIO_Init+0x3e8>
 8002f16:	bf00      	nop
 8002f18:	0800b428 	.word	0x0800b428
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40013800 	.word	0x40013800
 8002f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	220f      	movs	r2, #15
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a46      	ldr	r2, [pc, #280]	; (8003058 <HAL_GPIO_Init+0x51c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d019      	beq.n	8002f78 <HAL_GPIO_Init+0x43c>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a45      	ldr	r2, [pc, #276]	; (800305c <HAL_GPIO_Init+0x520>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d013      	beq.n	8002f74 <HAL_GPIO_Init+0x438>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a44      	ldr	r2, [pc, #272]	; (8003060 <HAL_GPIO_Init+0x524>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00d      	beq.n	8002f70 <HAL_GPIO_Init+0x434>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a43      	ldr	r2, [pc, #268]	; (8003064 <HAL_GPIO_Init+0x528>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d007      	beq.n	8002f6c <HAL_GPIO_Init+0x430>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a42      	ldr	r2, [pc, #264]	; (8003068 <HAL_GPIO_Init+0x52c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d101      	bne.n	8002f68 <HAL_GPIO_Init+0x42c>
 8002f64:	2304      	movs	r3, #4
 8002f66:	e008      	b.n	8002f7a <HAL_GPIO_Init+0x43e>
 8002f68:	2307      	movs	r3, #7
 8002f6a:	e006      	b.n	8002f7a <HAL_GPIO_Init+0x43e>
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e004      	b.n	8002f7a <HAL_GPIO_Init+0x43e>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e002      	b.n	8002f7a <HAL_GPIO_Init+0x43e>
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <HAL_GPIO_Init+0x43e>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	69fa      	ldr	r2, [r7, #28]
 8002f7c:	f002 0203 	and.w	r2, r2, #3
 8002f80:	0092      	lsls	r2, r2, #2
 8002f82:	4093      	lsls	r3, r2
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f8a:	4938      	ldr	r1, [pc, #224]	; (800306c <HAL_GPIO_Init+0x530>)
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	089b      	lsrs	r3, r3, #2
 8002f90:	3302      	adds	r3, #2
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f98:	4b35      	ldr	r3, [pc, #212]	; (8003070 <HAL_GPIO_Init+0x534>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fbc:	4a2c      	ldr	r2, [pc, #176]	; (8003070 <HAL_GPIO_Init+0x534>)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fc2:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <HAL_GPIO_Init+0x534>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fe6:	4a22      	ldr	r2, [pc, #136]	; (8003070 <HAL_GPIO_Init+0x534>)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fec:	4b20      	ldr	r3, [pc, #128]	; (8003070 <HAL_GPIO_Init+0x534>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003010:	4a17      	ldr	r2, [pc, #92]	; (8003070 <HAL_GPIO_Init+0x534>)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003016:	4b16      	ldr	r3, [pc, #88]	; (8003070 <HAL_GPIO_Init+0x534>)
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800303a:	4a0d      	ldr	r2, [pc, #52]	; (8003070 <HAL_GPIO_Init+0x534>)
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	3301      	adds	r3, #1
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	2b0f      	cmp	r3, #15
 800304a:	f67f adf9 	bls.w	8002c40 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 800304e:	bf00      	nop
 8003050:	bf00      	nop
 8003052:	3720      	adds	r7, #32
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40020000 	.word	0x40020000
 800305c:	40020400 	.word	0x40020400
 8003060:	40020800 	.word	0x40020800
 8003064:	40020c00 	.word	0x40020c00
 8003068:	40021000 	.word	0x40021000
 800306c:	40013800 	.word	0x40013800
 8003070:	40013c00 	.word	0x40013c00

08003074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	807b      	strh	r3, [r7, #2]
 8003080:	4613      	mov	r3, r2
 8003082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003084:	887b      	ldrh	r3, [r7, #2]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d004      	beq.n	8003094 <HAL_GPIO_WritePin+0x20>
 800308a:	887b      	ldrh	r3, [r7, #2]
 800308c:	0c1b      	lsrs	r3, r3, #16
 800308e:	041b      	lsls	r3, r3, #16
 8003090:	2b00      	cmp	r3, #0
 8003092:	d004      	beq.n	800309e <HAL_GPIO_WritePin+0x2a>
 8003094:	f240 119d 	movw	r1, #413	; 0x19d
 8003098:	480e      	ldr	r0, [pc, #56]	; (80030d4 <HAL_GPIO_WritePin+0x60>)
 800309a:	f7fd ffe0 	bl	800105e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800309e:	787b      	ldrb	r3, [r7, #1]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d007      	beq.n	80030b4 <HAL_GPIO_WritePin+0x40>
 80030a4:	787b      	ldrb	r3, [r7, #1]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d004      	beq.n	80030b4 <HAL_GPIO_WritePin+0x40>
 80030aa:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80030ae:	4809      	ldr	r0, [pc, #36]	; (80030d4 <HAL_GPIO_WritePin+0x60>)
 80030b0:	f7fd ffd5 	bl	800105e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80030b4:	787b      	ldrb	r3, [r7, #1]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ba:	887a      	ldrh	r2, [r7, #2]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030c0:	e003      	b.n	80030ca <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030c2:	887b      	ldrh	r3, [r7, #2]
 80030c4:	041a      	lsls	r2, r3, #16
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	619a      	str	r2, [r3, #24]
}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	0800b428 	.word	0x0800b428

080030d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030e2:	4b08      	ldr	r3, [pc, #32]	; (8003104 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030e4:	695a      	ldr	r2, [r3, #20]
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d006      	beq.n	80030fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030ee:	4a05      	ldr	r2, [pc, #20]	; (8003104 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030f0:	88fb      	ldrh	r3, [r7, #6]
 80030f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030f4:	88fb      	ldrh	r3, [r7, #6]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fd fc9c 	bl	8000a34 <HAL_GPIO_EXTI_Callback>
  }
}
 80030fc:	bf00      	nop
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40013c00 	.word	0x40013c00

08003108 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310a:	b08f      	sub	sp, #60	; 0x3c
 800310c:	af0a      	add	r7, sp, #40	; 0x28
 800310e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e05d      	b.n	80031d6 <HAL_HCD_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003122:	d003      	beq.n	800312c <HAL_HCD_Init+0x24>
 8003124:	2179      	movs	r1, #121	; 0x79
 8003126:	482e      	ldr	r0, [pc, #184]	; (80031e0 <HAL_HCD_Init+0xd8>)
 8003128:	f7fd ff99 	bl	800105e <assert_failed>

  USBx = hhcd->Instance;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f007 fd58 	bl	800abfc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2203      	movs	r2, #3
 8003150:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d102      	bne.n	8003166 <HAL_HCD_Init+0x5e>
  {
    hhcd->Init.dma_enable = 0U;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f004 feae 	bl	8007ecc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	603b      	str	r3, [r7, #0]
 8003176:	687e      	ldr	r6, [r7, #4]
 8003178:	466d      	mov	r5, sp
 800317a:	f106 0410 	add.w	r4, r6, #16
 800317e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003184:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003186:	e894 0003 	ldmia.w	r4, {r0, r1}
 800318a:	e885 0003 	stmia.w	r5, {r0, r1}
 800318e:	1d33      	adds	r3, r6, #4
 8003190:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003192:	6838      	ldr	r0, [r7, #0]
 8003194:	f004 fe28 	bl	8007de8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2101      	movs	r1, #1
 800319e:	4618      	mov	r0, r3
 80031a0:	f004 fea5 	bl	8007eee <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	603b      	str	r3, [r7, #0]
 80031aa:	687e      	ldr	r6, [r7, #4]
 80031ac:	466d      	mov	r5, sp
 80031ae:	f106 0410 	add.w	r4, r6, #16
 80031b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031be:	e885 0003 	stmia.w	r5, {r0, r1}
 80031c2:	1d33      	adds	r3, r6, #4
 80031c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031c6:	6838      	ldr	r0, [r7, #0]
 80031c8:	f005 f80c 	bl	80081e4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031de:	bf00      	nop
 80031e0:	0800b464 	.word	0x0800b464

080031e4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b089      	sub	sp, #36	; 0x24
 80031e8:	af04      	add	r7, sp, #16
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	4608      	mov	r0, r1
 80031ee:	4611      	mov	r1, r2
 80031f0:	461a      	mov	r2, r3
 80031f2:	4603      	mov	r3, r0
 80031f4:	70fb      	strb	r3, [r7, #3]
 80031f6:	460b      	mov	r3, r1
 80031f8:	70bb      	strb	r3, [r7, #2]
 80031fa:	4613      	mov	r3, r2
 80031fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_HCD_HC_Init+0x28>
 8003208:	2302      	movs	r3, #2
 800320a:	e076      	b.n	80032fa <HAL_HCD_HC_Init+0x116>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	212c      	movs	r1, #44	; 0x2c
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	4413      	add	r3, r2
 8003220:	333d      	adds	r3, #61	; 0x3d
 8003222:	2200      	movs	r2, #0
 8003224:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	212c      	movs	r1, #44	; 0x2c
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	3338      	adds	r3, #56	; 0x38
 8003234:	787a      	ldrb	r2, [r7, #1]
 8003236:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	212c      	movs	r1, #44	; 0x2c
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	3340      	adds	r3, #64	; 0x40
 8003246:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003248:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	212c      	movs	r1, #44	; 0x2c
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	4413      	add	r3, r2
 8003256:	3339      	adds	r3, #57	; 0x39
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	212c      	movs	r1, #44	; 0x2c
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	4413      	add	r3, r2
 8003268:	333f      	adds	r3, #63	; 0x3f
 800326a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800326e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	78ba      	ldrb	r2, [r7, #2]
 8003274:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003278:	b2d0      	uxtb	r0, r2
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	212c      	movs	r1, #44	; 0x2c
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	4413      	add	r3, r2
 8003284:	333a      	adds	r3, #58	; 0x3a
 8003286:	4602      	mov	r2, r0
 8003288:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800328a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800328e:	2b00      	cmp	r3, #0
 8003290:	da09      	bge.n	80032a6 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	212c      	movs	r1, #44	; 0x2c
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	4413      	add	r3, r2
 800329e:	333b      	adds	r3, #59	; 0x3b
 80032a0:	2201      	movs	r2, #1
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	e008      	b.n	80032b8 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80032a6:	78fb      	ldrb	r3, [r7, #3]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	212c      	movs	r1, #44	; 0x2c
 80032ac:	fb01 f303 	mul.w	r3, r1, r3
 80032b0:	4413      	add	r3, r2
 80032b2:	333b      	adds	r3, #59	; 0x3b
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	212c      	movs	r1, #44	; 0x2c
 80032be:	fb01 f303 	mul.w	r3, r1, r3
 80032c2:	4413      	add	r3, r2
 80032c4:	333c      	adds	r3, #60	; 0x3c
 80032c6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80032ca:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	787c      	ldrb	r4, [r7, #1]
 80032d2:	78ba      	ldrb	r2, [r7, #2]
 80032d4:	78f9      	ldrb	r1, [r7, #3]
 80032d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032d8:	9302      	str	r3, [sp, #8]
 80032da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	4623      	mov	r3, r4
 80032e8:	f005 f8f6 	bl	80084d8 <USB_HC_Init>
 80032ec:	4603      	mov	r3, r0
 80032ee:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd90      	pop	{r4, r7, pc}

08003302 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b084      	sub	sp, #16
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	460b      	mov	r3, r1
 800330c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_HCD_HC_Halt+0x1e>
 800331c:	2302      	movs	r3, #2
 800331e:	e00f      	b.n	8003340 <HAL_HCD_HC_Halt+0x3e>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	4611      	mov	r1, r2
 8003330:	4618      	mov	r0, r3
 8003332:	f005 fb32 	bl	800899a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800333e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	4608      	mov	r0, r1
 8003352:	4611      	mov	r1, r2
 8003354:	461a      	mov	r2, r3
 8003356:	4603      	mov	r3, r0
 8003358:	70fb      	strb	r3, [r7, #3]
 800335a:	460b      	mov	r3, r1
 800335c:	70bb      	strb	r3, [r7, #2]
 800335e:	4613      	mov	r3, r2
 8003360:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003362:	78fb      	ldrb	r3, [r7, #3]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	212c      	movs	r1, #44	; 0x2c
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	4413      	add	r3, r2
 800336e:	333b      	adds	r3, #59	; 0x3b
 8003370:	78ba      	ldrb	r2, [r7, #2]
 8003372:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003374:	78fb      	ldrb	r3, [r7, #3]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	212c      	movs	r1, #44	; 0x2c
 800337a:	fb01 f303 	mul.w	r3, r1, r3
 800337e:	4413      	add	r3, r2
 8003380:	333f      	adds	r3, #63	; 0x3f
 8003382:	787a      	ldrb	r2, [r7, #1]
 8003384:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003386:	7c3b      	ldrb	r3, [r7, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d112      	bne.n	80033b2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	212c      	movs	r1, #44	; 0x2c
 8003392:	fb01 f303 	mul.w	r3, r1, r3
 8003396:	4413      	add	r3, r2
 8003398:	3342      	adds	r3, #66	; 0x42
 800339a:	2203      	movs	r2, #3
 800339c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800339e:	78fb      	ldrb	r3, [r7, #3]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	212c      	movs	r1, #44	; 0x2c
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	4413      	add	r3, r2
 80033aa:	333d      	adds	r3, #61	; 0x3d
 80033ac:	7f3a      	ldrb	r2, [r7, #28]
 80033ae:	701a      	strb	r2, [r3, #0]
 80033b0:	e008      	b.n	80033c4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033b2:	78fb      	ldrb	r3, [r7, #3]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	212c      	movs	r1, #44	; 0x2c
 80033b8:	fb01 f303 	mul.w	r3, r1, r3
 80033bc:	4413      	add	r3, r2
 80033be:	3342      	adds	r3, #66	; 0x42
 80033c0:	2202      	movs	r2, #2
 80033c2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80033c4:	787b      	ldrb	r3, [r7, #1]
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	f200 80c6 	bhi.w	8003558 <HAL_HCD_HC_SubmitRequest+0x210>
 80033cc:	a201      	add	r2, pc, #4	; (adr r2, 80033d4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80033ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d2:	bf00      	nop
 80033d4:	080033e5 	.word	0x080033e5
 80033d8:	08003545 	.word	0x08003545
 80033dc:	08003449 	.word	0x08003449
 80033e0:	080034c7 	.word	0x080034c7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80033e4:	7c3b      	ldrb	r3, [r7, #16]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	f040 80b8 	bne.w	800355c <HAL_HCD_HC_SubmitRequest+0x214>
 80033ec:	78bb      	ldrb	r3, [r7, #2]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f040 80b4 	bne.w	800355c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80033f4:	8b3b      	ldrh	r3, [r7, #24]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d108      	bne.n	800340c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80033fa:	78fb      	ldrb	r3, [r7, #3]
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	212c      	movs	r1, #44	; 0x2c
 8003400:	fb01 f303 	mul.w	r3, r1, r3
 8003404:	4413      	add	r3, r2
 8003406:	3355      	adds	r3, #85	; 0x55
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	212c      	movs	r1, #44	; 0x2c
 8003412:	fb01 f303 	mul.w	r3, r1, r3
 8003416:	4413      	add	r3, r2
 8003418:	3355      	adds	r3, #85	; 0x55
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d109      	bne.n	8003434 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	212c      	movs	r1, #44	; 0x2c
 8003426:	fb01 f303 	mul.w	r3, r1, r3
 800342a:	4413      	add	r3, r2
 800342c:	3342      	adds	r3, #66	; 0x42
 800342e:	2200      	movs	r2, #0
 8003430:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003432:	e093      	b.n	800355c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	212c      	movs	r1, #44	; 0x2c
 800343a:	fb01 f303 	mul.w	r3, r1, r3
 800343e:	4413      	add	r3, r2
 8003440:	3342      	adds	r3, #66	; 0x42
 8003442:	2202      	movs	r2, #2
 8003444:	701a      	strb	r2, [r3, #0]
      break;
 8003446:	e089      	b.n	800355c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003448:	78bb      	ldrb	r3, [r7, #2]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d11d      	bne.n	800348a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800344e:	78fb      	ldrb	r3, [r7, #3]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	212c      	movs	r1, #44	; 0x2c
 8003454:	fb01 f303 	mul.w	r3, r1, r3
 8003458:	4413      	add	r3, r2
 800345a:	3355      	adds	r3, #85	; 0x55
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003462:	78fb      	ldrb	r3, [r7, #3]
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	212c      	movs	r1, #44	; 0x2c
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	4413      	add	r3, r2
 800346e:	3342      	adds	r3, #66	; 0x42
 8003470:	2200      	movs	r2, #0
 8003472:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003474:	e073      	b.n	800355e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	212c      	movs	r1, #44	; 0x2c
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	4413      	add	r3, r2
 8003482:	3342      	adds	r3, #66	; 0x42
 8003484:	2202      	movs	r2, #2
 8003486:	701a      	strb	r2, [r3, #0]
      break;
 8003488:	e069      	b.n	800355e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800348a:	78fb      	ldrb	r3, [r7, #3]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	212c      	movs	r1, #44	; 0x2c
 8003490:	fb01 f303 	mul.w	r3, r1, r3
 8003494:	4413      	add	r3, r2
 8003496:	3354      	adds	r3, #84	; 0x54
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	212c      	movs	r1, #44	; 0x2c
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	4413      	add	r3, r2
 80034aa:	3342      	adds	r3, #66	; 0x42
 80034ac:	2200      	movs	r2, #0
 80034ae:	701a      	strb	r2, [r3, #0]
      break;
 80034b0:	e055      	b.n	800355e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	212c      	movs	r1, #44	; 0x2c
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	4413      	add	r3, r2
 80034be:	3342      	adds	r3, #66	; 0x42
 80034c0:	2202      	movs	r2, #2
 80034c2:	701a      	strb	r2, [r3, #0]
      break;
 80034c4:	e04b      	b.n	800355e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80034c6:	78bb      	ldrb	r3, [r7, #2]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d11d      	bne.n	8003508 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	212c      	movs	r1, #44	; 0x2c
 80034d2:	fb01 f303 	mul.w	r3, r1, r3
 80034d6:	4413      	add	r3, r2
 80034d8:	3355      	adds	r3, #85	; 0x55
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d109      	bne.n	80034f4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	212c      	movs	r1, #44	; 0x2c
 80034e6:	fb01 f303 	mul.w	r3, r1, r3
 80034ea:	4413      	add	r3, r2
 80034ec:	3342      	adds	r3, #66	; 0x42
 80034ee:	2200      	movs	r2, #0
 80034f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80034f2:	e034      	b.n	800355e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	212c      	movs	r1, #44	; 0x2c
 80034fa:	fb01 f303 	mul.w	r3, r1, r3
 80034fe:	4413      	add	r3, r2
 8003500:	3342      	adds	r3, #66	; 0x42
 8003502:	2202      	movs	r2, #2
 8003504:	701a      	strb	r2, [r3, #0]
      break;
 8003506:	e02a      	b.n	800355e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	212c      	movs	r1, #44	; 0x2c
 800350e:	fb01 f303 	mul.w	r3, r1, r3
 8003512:	4413      	add	r3, r2
 8003514:	3354      	adds	r3, #84	; 0x54
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d109      	bne.n	8003530 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	212c      	movs	r1, #44	; 0x2c
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	4413      	add	r3, r2
 8003528:	3342      	adds	r3, #66	; 0x42
 800352a:	2200      	movs	r2, #0
 800352c:	701a      	strb	r2, [r3, #0]
      break;
 800352e:	e016      	b.n	800355e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	212c      	movs	r1, #44	; 0x2c
 8003536:	fb01 f303 	mul.w	r3, r1, r3
 800353a:	4413      	add	r3, r2
 800353c:	3342      	adds	r3, #66	; 0x42
 800353e:	2202      	movs	r2, #2
 8003540:	701a      	strb	r2, [r3, #0]
      break;
 8003542:	e00c      	b.n	800355e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003544:	78fb      	ldrb	r3, [r7, #3]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	212c      	movs	r1, #44	; 0x2c
 800354a:	fb01 f303 	mul.w	r3, r1, r3
 800354e:	4413      	add	r3, r2
 8003550:	3342      	adds	r3, #66	; 0x42
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
      break;
 8003556:	e002      	b.n	800355e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003558:	bf00      	nop
 800355a:	e000      	b.n	800355e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800355c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800355e:	78fb      	ldrb	r3, [r7, #3]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	212c      	movs	r1, #44	; 0x2c
 8003564:	fb01 f303 	mul.w	r3, r1, r3
 8003568:	4413      	add	r3, r2
 800356a:	3344      	adds	r3, #68	; 0x44
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	8b3a      	ldrh	r2, [r7, #24]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	202c      	movs	r0, #44	; 0x2c
 8003578:	fb00 f303 	mul.w	r3, r0, r3
 800357c:	440b      	add	r3, r1
 800357e:	334c      	adds	r3, #76	; 0x4c
 8003580:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	212c      	movs	r1, #44	; 0x2c
 8003588:	fb01 f303 	mul.w	r3, r1, r3
 800358c:	4413      	add	r3, r2
 800358e:	3360      	adds	r3, #96	; 0x60
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	212c      	movs	r1, #44	; 0x2c
 800359a:	fb01 f303 	mul.w	r3, r1, r3
 800359e:	4413      	add	r3, r2
 80035a0:	3350      	adds	r3, #80	; 0x50
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	212c      	movs	r1, #44	; 0x2c
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	4413      	add	r3, r2
 80035b2:	3339      	adds	r3, #57	; 0x39
 80035b4:	78fa      	ldrb	r2, [r7, #3]
 80035b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	212c      	movs	r1, #44	; 0x2c
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	4413      	add	r3, r2
 80035c4:	3361      	adds	r3, #97	; 0x61
 80035c6:	2200      	movs	r2, #0
 80035c8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6818      	ldr	r0, [r3, #0]
 80035ce:	78fb      	ldrb	r3, [r7, #3]
 80035d0:	222c      	movs	r2, #44	; 0x2c
 80035d2:	fb02 f303 	mul.w	r3, r2, r3
 80035d6:	3338      	adds	r3, #56	; 0x38
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	18d1      	adds	r1, r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	461a      	mov	r2, r3
 80035e4:	f005 f886 	bl	80086f4 <USB_HC_StartXfer>
 80035e8:	4603      	mov	r3, r0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop

080035f4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f004 fda9 	bl	8008162 <USB_GetMode>
 8003610:	4603      	mov	r3, r0
 8003612:	2b01      	cmp	r3, #1
 8003614:	f040 80f6 	bne.w	8003804 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f004 fd8d 	bl	800813c <USB_ReadInterrupts>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80ec 	beq.w	8003802 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f004 fd84 	bl	800813c <USB_ReadInterrupts>
 8003634:	4603      	mov	r3, r0
 8003636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800363a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800363e:	d104      	bne.n	800364a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003648:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f004 fd74 	bl	800813c <USB_ReadInterrupts>
 8003654:	4603      	mov	r3, r0
 8003656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800365a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800365e:	d104      	bne.n	800366a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003668:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f004 fd64 	bl	800813c <USB_ReadInterrupts>
 8003674:	4603      	mov	r3, r0
 8003676:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800367a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800367e:	d104      	bne.n	800368a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003688:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f004 fd54 	bl	800813c <USB_ReadInterrupts>
 8003694:	4603      	mov	r3, r0
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b02      	cmp	r3, #2
 800369c:	d103      	bne.n	80036a6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2202      	movs	r2, #2
 80036a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f004 fd46 	bl	800813c <USB_ReadInterrupts>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ba:	d11c      	bne.n	80036f6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80036c4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10f      	bne.n	80036f6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80036d6:	2110      	movs	r1, #16
 80036d8:	6938      	ldr	r0, [r7, #16]
 80036da:	f004 fc55 	bl	8007f88 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80036de:	6938      	ldr	r0, [r7, #16]
 80036e0:	f004 fc76 	bl	8007fd0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2101      	movs	r1, #1
 80036ea:	4618      	mov	r0, r3
 80036ec:	f004 fe2e 	bl	800834c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f007 fb01 	bl	800acf8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f004 fd1e 	bl	800813c <USB_ReadInterrupts>
 8003700:	4603      	mov	r3, r0
 8003702:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003706:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800370a:	d102      	bne.n	8003712 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f001 fa03 	bl	8004b18 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f004 fd10 	bl	800813c <USB_ReadInterrupts>
 800371c:	4603      	mov	r3, r0
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b08      	cmp	r3, #8
 8003724:	d106      	bne.n	8003734 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f007 faca 	bl	800acc0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2208      	movs	r2, #8
 8003732:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f004 fcff 	bl	800813c <USB_ReadInterrupts>
 800373e:	4603      	mov	r3, r0
 8003740:	f003 0310 	and.w	r3, r3, #16
 8003744:	2b10      	cmp	r3, #16
 8003746:	d101      	bne.n	800374c <HAL_HCD_IRQHandler+0x158>
 8003748:	2301      	movs	r3, #1
 800374a:	e000      	b.n	800374e <HAL_HCD_IRQHandler+0x15a>
 800374c:	2300      	movs	r3, #0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d012      	beq.n	8003778 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699a      	ldr	r2, [r3, #24]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0210 	bic.w	r2, r2, #16
 8003760:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f001 f906 	bl	8004974 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0210 	orr.w	r2, r2, #16
 8003776:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f004 fcdd 	bl	800813c <USB_ReadInterrupts>
 8003782:	4603      	mov	r3, r0
 8003784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003788:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800378c:	d13a      	bne.n	8003804 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f005 f8f0 	bl	8008978 <USB_HC_ReadInterrupt>
 8003798:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	e025      	b.n	80037ec <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	fa22 f303 	lsr.w	r3, r2, r3
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d018      	beq.n	80037e6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ca:	d106      	bne.n	80037da <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	4619      	mov	r1, r3
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f8ab 	bl	800392e <HCD_HC_IN_IRQHandler>
 80037d8:	e005      	b.n	80037e6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	4619      	mov	r1, r3
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fcc6 	bl	8004172 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	3301      	adds	r3, #1
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d3d4      	bcc.n	80037a0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037fe:	615a      	str	r2, [r3, #20]
 8003800:	e000      	b.n	8003804 <HAL_HCD_IRQHandler+0x210>
      return;
 8003802:	bf00      	nop
    }
  }
}
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b082      	sub	sp, #8
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_HCD_Start+0x16>
 800381c:	2302      	movs	r3, #2
 800381e:	e013      	b.n	8003848 <HAL_HCD_Start+0x3e>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2101      	movs	r1, #1
 800382e:	4618      	mov	r0, r3
 8003830:	f004 fdf0 	bl	8008414 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f004 fb36 	bl	8007eaa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_HCD_Stop+0x16>
 8003862:	2302      	movs	r3, #2
 8003864:	e00d      	b.n	8003882 <HAL_HCD_Stop+0x32>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f005 f9ea 	bl	8008c4c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b082      	sub	sp, #8
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f004 fd92 	bl	80083c0 <USB_ResetPort>
 800389c:	4603      	mov	r3, r0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	460b      	mov	r3, r1
 80038b0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	212c      	movs	r1, #44	; 0x2c
 80038b8:	fb01 f303 	mul.w	r3, r1, r3
 80038bc:	4413      	add	r3, r2
 80038be:	3360      	adds	r3, #96	; 0x60
 80038c0:	781b      	ldrb	r3, [r3, #0]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	460b      	mov	r3, r1
 80038d8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80038da:	78fb      	ldrb	r3, [r7, #3]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	212c      	movs	r1, #44	; 0x2c
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	4413      	add	r3, r2
 80038e6:	3350      	adds	r3, #80	; 0x50
 80038e8:	681b      	ldr	r3, [r3, #0]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f004 fdd6 	bl	80084b4 <USB_GetCurrentFrame>
 8003908:	4603      	mov	r3, r0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f004 fdb1 	bl	8008486 <USB_GetHostSpeed>
 8003924:	4603      	mov	r3, r0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b086      	sub	sp, #24
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	460b      	mov	r3, r1
 8003938:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003944:	78fb      	ldrb	r3, [r7, #3]
 8003946:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4413      	add	r3, r2
 8003950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b04      	cmp	r3, #4
 800395c:	d119      	bne.n	8003992 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4413      	add	r3, r2
 8003966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396a:	461a      	mov	r2, r3
 800396c:	2304      	movs	r3, #4
 800396e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4413      	add	r3, r2
 8003978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	0151      	lsls	r1, r2, #5
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	440a      	add	r2, r1
 8003986:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800398a:	f043 0302 	orr.w	r3, r3, #2
 800398e:	60d3      	str	r3, [r2, #12]
 8003990:	e101      	b.n	8003b96 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4413      	add	r3, r2
 800399a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a8:	d12b      	bne.n	8003a02 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b6:	461a      	mov	r2, r3
 80039b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	212c      	movs	r1, #44	; 0x2c
 80039c4:	fb01 f303 	mul.w	r3, r1, r3
 80039c8:	4413      	add	r3, r2
 80039ca:	3361      	adds	r3, #97	; 0x61
 80039cc:	2207      	movs	r2, #7
 80039ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	0151      	lsls	r1, r2, #5
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	440a      	add	r2, r1
 80039e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039ea:	f043 0302 	orr.w	r3, r3, #2
 80039ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	4611      	mov	r1, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f004 ffcd 	bl	800899a <USB_HC_Halt>
 8003a00:	e0c9      	b.n	8003b96 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b20      	cmp	r3, #32
 8003a16:	d109      	bne.n	8003a2c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a24:	461a      	mov	r2, r3
 8003a26:	2320      	movs	r3, #32
 8003a28:	6093      	str	r3, [r2, #8]
 8003a2a:	e0b4      	b.n	8003b96 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d133      	bne.n	8003aaa <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	0151      	lsls	r1, r2, #5
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	440a      	add	r2, r1
 8003a58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a5c:	f043 0302 	orr.w	r3, r3, #2
 8003a60:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	212c      	movs	r1, #44	; 0x2c
 8003a68:	fb01 f303 	mul.w	r3, r1, r3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3361      	adds	r3, #97	; 0x61
 8003a70:	2205      	movs	r2, #5
 8003a72:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a80:	461a      	mov	r2, r3
 8003a82:	2310      	movs	r3, #16
 8003a84:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a92:	461a      	mov	r2, r3
 8003a94:	2308      	movs	r3, #8
 8003a96:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f004 ff79 	bl	800899a <USB_HC_Halt>
 8003aa8:	e075      	b.n	8003b96 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac0:	d134      	bne.n	8003b2c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	0151      	lsls	r1, r2, #5
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	440a      	add	r2, r1
 8003ad8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003adc:	f043 0302 	orr.w	r3, r3, #2
 8003ae0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	212c      	movs	r1, #44	; 0x2c
 8003ae8:	fb01 f303 	mul.w	r3, r1, r3
 8003aec:	4413      	add	r3, r2
 8003aee:	3361      	adds	r3, #97	; 0x61
 8003af0:	2208      	movs	r2, #8
 8003af2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b00:	461a      	mov	r2, r3
 8003b02:	2310      	movs	r3, #16
 8003b04:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b12:	461a      	mov	r2, r3
 8003b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b18:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	4611      	mov	r1, r2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f004 ff38 	bl	800899a <USB_HC_Halt>
 8003b2a:	e034      	b.n	8003b96 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3e:	2b80      	cmp	r3, #128	; 0x80
 8003b40:	d129      	bne.n	8003b96 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	0151      	lsls	r1, r2, #5
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	440a      	add	r2, r1
 8003b58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b5c:	f043 0302 	orr.w	r3, r3, #2
 8003b60:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	212c      	movs	r1, #44	; 0x2c
 8003b68:	fb01 f303 	mul.w	r3, r1, r3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3361      	adds	r3, #97	; 0x61
 8003b70:	2206      	movs	r2, #6
 8003b72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	4611      	mov	r1, r2
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f004 ff0b 	bl	800899a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b90:	461a      	mov	r2, r3
 8003b92:	2380      	movs	r3, #128	; 0x80
 8003b94:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bac:	d122      	bne.n	8003bf4 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	0151      	lsls	r1, r2, #5
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	440a      	add	r2, r1
 8003bc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bc8:	f043 0302 	orr.w	r3, r3, #2
 8003bcc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	b2d2      	uxtb	r2, r2
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f004 fede 	bl	800899a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bea:	461a      	mov	r2, r3
 8003bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bf0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003bf2:	e2ba      	b.n	800416a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	f040 811b 	bne.w	8003e42 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d019      	beq.n	8003c48 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	212c      	movs	r1, #44	; 0x2c
 8003c1a:	fb01 f303 	mul.w	r3, r1, r3
 8003c1e:	4413      	add	r3, r2
 8003c20:	3348      	adds	r3, #72	; 0x48
 8003c22:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	0159      	lsls	r1, r3, #5
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	440b      	add	r3, r1
 8003c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003c36:	1ad2      	subs	r2, r2, r3
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	202c      	movs	r0, #44	; 0x2c
 8003c3e:	fb00 f303 	mul.w	r3, r0, r3
 8003c42:	440b      	add	r3, r1
 8003c44:	3350      	adds	r3, #80	; 0x50
 8003c46:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	212c      	movs	r1, #44	; 0x2c
 8003c4e:	fb01 f303 	mul.w	r3, r1, r3
 8003c52:	4413      	add	r3, r2
 8003c54:	3361      	adds	r3, #97	; 0x61
 8003c56:	2201      	movs	r2, #1
 8003c58:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	212c      	movs	r1, #44	; 0x2c
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	4413      	add	r3, r2
 8003c66:	335c      	adds	r3, #92	; 0x5c
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c78:	461a      	mov	r2, r3
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	212c      	movs	r1, #44	; 0x2c
 8003c84:	fb01 f303 	mul.w	r3, r1, r3
 8003c88:	4413      	add	r3, r2
 8003c8a:	333f      	adds	r3, #63	; 0x3f
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	212c      	movs	r1, #44	; 0x2c
 8003c98:	fb01 f303 	mul.w	r3, r1, r3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	333f      	adds	r3, #63	; 0x3f
 8003ca0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d121      	bne.n	8003cea <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	0151      	lsls	r1, r2, #5
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	440a      	add	r2, r1
 8003cbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cc0:	f043 0302 	orr.w	r3, r3, #2
 8003cc4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	4611      	mov	r1, r2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f004 fe62 	bl	800899a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	2310      	movs	r3, #16
 8003ce6:	6093      	str	r3, [r2, #8]
 8003ce8:	e066      	b.n	8003db8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	212c      	movs	r1, #44	; 0x2c
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	333f      	adds	r3, #63	; 0x3f
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d127      	bne.n	8003d4e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	0151      	lsls	r1, r2, #5
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	440a      	add	r2, r1
 8003d14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d1c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	212c      	movs	r1, #44	; 0x2c
 8003d24:	fb01 f303 	mul.w	r3, r1, r3
 8003d28:	4413      	add	r3, r2
 8003d2a:	3360      	adds	r3, #96	; 0x60
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	b2d9      	uxtb	r1, r3
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	202c      	movs	r0, #44	; 0x2c
 8003d3a:	fb00 f303 	mul.w	r3, r0, r3
 8003d3e:	4413      	add	r3, r2
 8003d40:	3360      	adds	r3, #96	; 0x60
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f006 ffe4 	bl	800ad14 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d4c:	e034      	b.n	8003db8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	212c      	movs	r1, #44	; 0x2c
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	333f      	adds	r3, #63	; 0x3f
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d12a      	bne.n	8003db8 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	212c      	movs	r1, #44	; 0x2c
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3360      	adds	r3, #96	; 0x60
 8003d70:	2201      	movs	r2, #1
 8003d72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	212c      	movs	r1, #44	; 0x2c
 8003d7a:	fb01 f303 	mul.w	r3, r1, r3
 8003d7e:	4413      	add	r3, r2
 8003d80:	3354      	adds	r3, #84	; 0x54
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	f083 0301 	eor.w	r3, r3, #1
 8003d88:	b2d8      	uxtb	r0, r3
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	212c      	movs	r1, #44	; 0x2c
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	4413      	add	r3, r2
 8003d96:	3354      	adds	r3, #84	; 0x54
 8003d98:	4602      	mov	r2, r0
 8003d9a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	b2d9      	uxtb	r1, r3
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	202c      	movs	r0, #44	; 0x2c
 8003da6:	fb00 f303 	mul.w	r3, r0, r3
 8003daa:	4413      	add	r3, r2
 8003dac:	3360      	adds	r3, #96	; 0x60
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	461a      	mov	r2, r3
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f006 ffae 	bl	800ad14 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d12b      	bne.n	8003e18 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	212c      	movs	r1, #44	; 0x2c
 8003dc6:	fb01 f303 	mul.w	r3, r1, r3
 8003dca:	4413      	add	r3, r2
 8003dcc:	3348      	adds	r3, #72	; 0x48
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	202c      	movs	r0, #44	; 0x2c
 8003dd6:	fb00 f202 	mul.w	r2, r0, r2
 8003dda:	440a      	add	r2, r1
 8003ddc:	3240      	adds	r2, #64	; 0x40
 8003dde:	8812      	ldrh	r2, [r2, #0]
 8003de0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 81be 	beq.w	800416a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	212c      	movs	r1, #44	; 0x2c
 8003df4:	fb01 f303 	mul.w	r3, r1, r3
 8003df8:	4413      	add	r3, r2
 8003dfa:	3354      	adds	r3, #84	; 0x54
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	f083 0301 	eor.w	r3, r3, #1
 8003e02:	b2d8      	uxtb	r0, r3
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	212c      	movs	r1, #44	; 0x2c
 8003e0a:	fb01 f303 	mul.w	r3, r1, r3
 8003e0e:	4413      	add	r3, r2
 8003e10:	3354      	adds	r3, #84	; 0x54
 8003e12:	4602      	mov	r2, r0
 8003e14:	701a      	strb	r2, [r3, #0]
}
 8003e16:	e1a8      	b.n	800416a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	212c      	movs	r1, #44	; 0x2c
 8003e1e:	fb01 f303 	mul.w	r3, r1, r3
 8003e22:	4413      	add	r3, r2
 8003e24:	3354      	adds	r3, #84	; 0x54
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	f083 0301 	eor.w	r3, r3, #1
 8003e2c:	b2d8      	uxtb	r0, r3
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	212c      	movs	r1, #44	; 0x2c
 8003e34:	fb01 f303 	mul.w	r3, r1, r3
 8003e38:	4413      	add	r3, r2
 8003e3a:	3354      	adds	r3, #84	; 0x54
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	701a      	strb	r2, [r3, #0]
}
 8003e40:	e193      	b.n	800416a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	f040 8106 	bne.w	8004066 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	015a      	lsls	r2, r3, #5
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	4413      	add	r3, r2
 8003e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	0151      	lsls	r1, r2, #5
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	440a      	add	r2, r1
 8003e70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e74:	f023 0302 	bic.w	r3, r3, #2
 8003e78:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	212c      	movs	r1, #44	; 0x2c
 8003e80:	fb01 f303 	mul.w	r3, r1, r3
 8003e84:	4413      	add	r3, r2
 8003e86:	3361      	adds	r3, #97	; 0x61
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d109      	bne.n	8003ea2 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	212c      	movs	r1, #44	; 0x2c
 8003e94:	fb01 f303 	mul.w	r3, r1, r3
 8003e98:	4413      	add	r3, r2
 8003e9a:	3360      	adds	r3, #96	; 0x60
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	701a      	strb	r2, [r3, #0]
 8003ea0:	e0c9      	b.n	8004036 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	212c      	movs	r1, #44	; 0x2c
 8003ea8:	fb01 f303 	mul.w	r3, r1, r3
 8003eac:	4413      	add	r3, r2
 8003eae:	3361      	adds	r3, #97	; 0x61
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b05      	cmp	r3, #5
 8003eb4:	d109      	bne.n	8003eca <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	212c      	movs	r1, #44	; 0x2c
 8003ebc:	fb01 f303 	mul.w	r3, r1, r3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3360      	adds	r3, #96	; 0x60
 8003ec4:	2205      	movs	r2, #5
 8003ec6:	701a      	strb	r2, [r3, #0]
 8003ec8:	e0b5      	b.n	8004036 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	212c      	movs	r1, #44	; 0x2c
 8003ed0:	fb01 f303 	mul.w	r3, r1, r3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	3361      	adds	r3, #97	; 0x61
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	2b06      	cmp	r3, #6
 8003edc:	d009      	beq.n	8003ef2 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	212c      	movs	r1, #44	; 0x2c
 8003ee4:	fb01 f303 	mul.w	r3, r1, r3
 8003ee8:	4413      	add	r3, r2
 8003eea:	3361      	adds	r3, #97	; 0x61
 8003eec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d150      	bne.n	8003f94 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	212c      	movs	r1, #44	; 0x2c
 8003ef8:	fb01 f303 	mul.w	r3, r1, r3
 8003efc:	4413      	add	r3, r2
 8003efe:	335c      	adds	r3, #92	; 0x5c
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	202c      	movs	r0, #44	; 0x2c
 8003f0a:	fb00 f303 	mul.w	r3, r0, r3
 8003f0e:	440b      	add	r3, r1
 8003f10:	335c      	adds	r3, #92	; 0x5c
 8003f12:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	212c      	movs	r1, #44	; 0x2c
 8003f1a:	fb01 f303 	mul.w	r3, r1, r3
 8003f1e:	4413      	add	r3, r2
 8003f20:	335c      	adds	r3, #92	; 0x5c
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d912      	bls.n	8003f4e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	212c      	movs	r1, #44	; 0x2c
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	4413      	add	r3, r2
 8003f34:	335c      	adds	r3, #92	; 0x5c
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	212c      	movs	r1, #44	; 0x2c
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	4413      	add	r3, r2
 8003f46:	3360      	adds	r3, #96	; 0x60
 8003f48:	2204      	movs	r2, #4
 8003f4a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f4c:	e073      	b.n	8004036 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	212c      	movs	r1, #44	; 0x2c
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	4413      	add	r3, r2
 8003f5a:	3360      	adds	r3, #96	; 0x60
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f76:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f7e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f92:	e050      	b.n	8004036 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	212c      	movs	r1, #44	; 0x2c
 8003f9a:	fb01 f303 	mul.w	r3, r1, r3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	3361      	adds	r3, #97	; 0x61
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b03      	cmp	r3, #3
 8003fa6:	d122      	bne.n	8003fee <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	212c      	movs	r1, #44	; 0x2c
 8003fae:	fb01 f303 	mul.w	r3, r1, r3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3360      	adds	r3, #96	; 0x60
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fd0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fd8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	e023      	b.n	8004036 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	212c      	movs	r1, #44	; 0x2c
 8003ff4:	fb01 f303 	mul.w	r3, r1, r3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	3361      	adds	r3, #97	; 0x61
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b07      	cmp	r3, #7
 8004000:	d119      	bne.n	8004036 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	212c      	movs	r1, #44	; 0x2c
 8004008:	fb01 f303 	mul.w	r3, r1, r3
 800400c:	4413      	add	r3, r2
 800400e:	335c      	adds	r3, #92	; 0x5c
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	1c5a      	adds	r2, r3, #1
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	202c      	movs	r0, #44	; 0x2c
 800401a:	fb00 f303 	mul.w	r3, r0, r3
 800401e:	440b      	add	r3, r1
 8004020:	335c      	adds	r3, #92	; 0x5c
 8004022:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	212c      	movs	r1, #44	; 0x2c
 800402a:	fb01 f303 	mul.w	r3, r1, r3
 800402e:	4413      	add	r3, r2
 8004030:	3360      	adds	r3, #96	; 0x60
 8004032:	2204      	movs	r2, #4
 8004034:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	4413      	add	r3, r2
 800403e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004042:	461a      	mov	r2, r3
 8004044:	2302      	movs	r3, #2
 8004046:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	b2d9      	uxtb	r1, r3
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	202c      	movs	r0, #44	; 0x2c
 8004052:	fb00 f303 	mul.w	r3, r0, r3
 8004056:	4413      	add	r3, r2
 8004058:	3360      	adds	r3, #96	; 0x60
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	461a      	mov	r2, r3
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f006 fe58 	bl	800ad14 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004064:	e081      	b.n	800416a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4413      	add	r3, r2
 800406e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b10      	cmp	r3, #16
 800407a:	d176      	bne.n	800416a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	212c      	movs	r1, #44	; 0x2c
 8004082:	fb01 f303 	mul.w	r3, r1, r3
 8004086:	4413      	add	r3, r2
 8004088:	333f      	adds	r3, #63	; 0x3f
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b03      	cmp	r3, #3
 800408e:	d121      	bne.n	80040d4 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	212c      	movs	r1, #44	; 0x2c
 8004096:	fb01 f303 	mul.w	r3, r1, r3
 800409a:	4413      	add	r3, r2
 800409c:	335c      	adds	r3, #92	; 0x5c
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	0151      	lsls	r1, r2, #5
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	440a      	add	r2, r1
 80040b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040bc:	f043 0302 	orr.w	r3, r3, #2
 80040c0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	4611      	mov	r1, r2
 80040cc:	4618      	mov	r0, r3
 80040ce:	f004 fc64 	bl	800899a <USB_HC_Halt>
 80040d2:	e041      	b.n	8004158 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	212c      	movs	r1, #44	; 0x2c
 80040da:	fb01 f303 	mul.w	r3, r1, r3
 80040de:	4413      	add	r3, r2
 80040e0:	333f      	adds	r3, #63	; 0x3f
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d009      	beq.n	80040fc <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	212c      	movs	r1, #44	; 0x2c
 80040ee:	fb01 f303 	mul.w	r3, r1, r3
 80040f2:	4413      	add	r3, r2
 80040f4:	333f      	adds	r3, #63	; 0x3f
 80040f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d12d      	bne.n	8004158 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	212c      	movs	r1, #44	; 0x2c
 8004102:	fb01 f303 	mul.w	r3, r1, r3
 8004106:	4413      	add	r3, r2
 8004108:	335c      	adds	r3, #92	; 0x5c
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d120      	bne.n	8004158 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	212c      	movs	r1, #44	; 0x2c
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	4413      	add	r3, r2
 8004122:	3361      	adds	r3, #97	; 0x61
 8004124:	2203      	movs	r2, #3
 8004126:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	4413      	add	r3, r2
 8004130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	0151      	lsls	r1, r2, #5
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	440a      	add	r2, r1
 800413e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004142:	f043 0302 	orr.w	r3, r3, #2
 8004146:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	4611      	mov	r1, r2
 8004152:	4618      	mov	r0, r3
 8004154:	f004 fc21 	bl	800899a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	4413      	add	r3, r2
 8004160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004164:	461a      	mov	r2, r3
 8004166:	2310      	movs	r3, #16
 8004168:	6093      	str	r3, [r2, #8]
}
 800416a:	bf00      	nop
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b088      	sub	sp, #32
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	460b      	mov	r3, r1
 800417c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004188:	78fb      	ldrb	r3, [r7, #3]
 800418a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	4413      	add	r3, r2
 8004194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d119      	bne.n	80041d6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ae:	461a      	mov	r2, r3
 80041b0:	2304      	movs	r3, #4
 80041b2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	0151      	lsls	r1, r2, #5
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	440a      	add	r2, r1
 80041ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041ce:	f043 0302 	orr.w	r3, r3, #2
 80041d2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80041d4:	e3ca      	b.n	800496c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 0320 	and.w	r3, r3, #32
 80041e8:	2b20      	cmp	r3, #32
 80041ea:	d13e      	bne.n	800426a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f8:	461a      	mov	r2, r3
 80041fa:	2320      	movs	r3, #32
 80041fc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	212c      	movs	r1, #44	; 0x2c
 8004204:	fb01 f303 	mul.w	r3, r1, r3
 8004208:	4413      	add	r3, r2
 800420a:	333d      	adds	r3, #61	; 0x3d
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b01      	cmp	r3, #1
 8004210:	f040 83ac 	bne.w	800496c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	212c      	movs	r1, #44	; 0x2c
 800421a:	fb01 f303 	mul.w	r3, r1, r3
 800421e:	4413      	add	r3, r2
 8004220:	333d      	adds	r3, #61	; 0x3d
 8004222:	2200      	movs	r2, #0
 8004224:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	212c      	movs	r1, #44	; 0x2c
 800422c:	fb01 f303 	mul.w	r3, r1, r3
 8004230:	4413      	add	r3, r2
 8004232:	3360      	adds	r3, #96	; 0x60
 8004234:	2202      	movs	r2, #2
 8004236:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	4413      	add	r3, r2
 8004240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	0151      	lsls	r1, r2, #5
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	440a      	add	r2, r1
 800424e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004252:	f043 0302 	orr.w	r3, r3, #2
 8004256:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	4611      	mov	r1, r2
 8004262:	4618      	mov	r0, r3
 8004264:	f004 fb99 	bl	800899a <USB_HC_Halt>
}
 8004268:	e380      	b.n	800496c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	4413      	add	r3, r2
 8004272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800427c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004280:	d122      	bne.n	80042c8 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	4413      	add	r3, r2
 800428a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	0151      	lsls	r1, r2, #5
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	440a      	add	r2, r1
 8004298:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800429c:	f043 0302 	orr.w	r3, r3, #2
 80042a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	4611      	mov	r1, r2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f004 fb74 	bl	800899a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042be:	461a      	mov	r2, r3
 80042c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042c4:	6093      	str	r3, [r2, #8]
}
 80042c6:	e351      	b.n	800496c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d150      	bne.n	8004380 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	212c      	movs	r1, #44	; 0x2c
 80042e4:	fb01 f303 	mul.w	r3, r1, r3
 80042e8:	4413      	add	r3, r2
 80042ea:	335c      	adds	r3, #92	; 0x5c
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004302:	2b40      	cmp	r3, #64	; 0x40
 8004304:	d111      	bne.n	800432a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	212c      	movs	r1, #44	; 0x2c
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	4413      	add	r3, r2
 8004312:	333d      	adds	r3, #61	; 0x3d
 8004314:	2201      	movs	r2, #1
 8004316:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	4413      	add	r3, r2
 8004320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004324:	461a      	mov	r2, r3
 8004326:	2340      	movs	r3, #64	; 0x40
 8004328:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	4413      	add	r3, r2
 8004332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	0151      	lsls	r1, r2, #5
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	440a      	add	r2, r1
 8004340:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004344:	f043 0302 	orr.w	r3, r3, #2
 8004348:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	4611      	mov	r1, r2
 8004354:	4618      	mov	r0, r3
 8004356:	f004 fb20 	bl	800899a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	4413      	add	r3, r2
 8004362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004366:	461a      	mov	r2, r3
 8004368:	2301      	movs	r3, #1
 800436a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	212c      	movs	r1, #44	; 0x2c
 8004372:	fb01 f303 	mul.w	r3, r1, r3
 8004376:	4413      	add	r3, r2
 8004378:	3361      	adds	r3, #97	; 0x61
 800437a:	2201      	movs	r2, #1
 800437c:	701a      	strb	r2, [r3, #0]
}
 800437e:	e2f5      	b.n	800496c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	4413      	add	r3, r2
 8004388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004392:	2b40      	cmp	r3, #64	; 0x40
 8004394:	d13c      	bne.n	8004410 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	212c      	movs	r1, #44	; 0x2c
 800439c:	fb01 f303 	mul.w	r3, r1, r3
 80043a0:	4413      	add	r3, r2
 80043a2:	3361      	adds	r3, #97	; 0x61
 80043a4:	2204      	movs	r2, #4
 80043a6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	212c      	movs	r1, #44	; 0x2c
 80043ae:	fb01 f303 	mul.w	r3, r1, r3
 80043b2:	4413      	add	r3, r2
 80043b4:	333d      	adds	r3, #61	; 0x3d
 80043b6:	2201      	movs	r2, #1
 80043b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	212c      	movs	r1, #44	; 0x2c
 80043c0:	fb01 f303 	mul.w	r3, r1, r3
 80043c4:	4413      	add	r3, r2
 80043c6:	335c      	adds	r3, #92	; 0x5c
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	0151      	lsls	r1, r2, #5
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	440a      	add	r2, r1
 80043e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043e6:	f043 0302 	orr.w	r3, r3, #2
 80043ea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	4611      	mov	r1, r2
 80043f6:	4618      	mov	r0, r3
 80043f8:	f004 facf 	bl	800899a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	4413      	add	r3, r2
 8004404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004408:	461a      	mov	r2, r3
 800440a:	2340      	movs	r3, #64	; 0x40
 800440c:	6093      	str	r3, [r2, #8]
}
 800440e:	e2ad      	b.n	800496c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	4413      	add	r3, r2
 8004418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b08      	cmp	r3, #8
 8004424:	d12a      	bne.n	800447c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	4413      	add	r3, r2
 800442e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004432:	461a      	mov	r2, r3
 8004434:	2308      	movs	r3, #8
 8004436:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	4413      	add	r3, r2
 8004440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	0151      	lsls	r1, r2, #5
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	440a      	add	r2, r1
 800444e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004452:	f043 0302 	orr.w	r3, r3, #2
 8004456:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	b2d2      	uxtb	r2, r2
 8004460:	4611      	mov	r1, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f004 fa99 	bl	800899a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	212c      	movs	r1, #44	; 0x2c
 800446e:	fb01 f303 	mul.w	r3, r1, r3
 8004472:	4413      	add	r3, r2
 8004474:	3361      	adds	r3, #97	; 0x61
 8004476:	2205      	movs	r2, #5
 8004478:	701a      	strb	r2, [r3, #0]
}
 800447a:	e277      	b.n	800496c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	4413      	add	r3, r2
 8004484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 0310 	and.w	r3, r3, #16
 800448e:	2b10      	cmp	r3, #16
 8004490:	d150      	bne.n	8004534 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	212c      	movs	r1, #44	; 0x2c
 8004498:	fb01 f303 	mul.w	r3, r1, r3
 800449c:	4413      	add	r3, r2
 800449e:	335c      	adds	r3, #92	; 0x5c
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	212c      	movs	r1, #44	; 0x2c
 80044aa:	fb01 f303 	mul.w	r3, r1, r3
 80044ae:	4413      	add	r3, r2
 80044b0:	3361      	adds	r3, #97	; 0x61
 80044b2:	2203      	movs	r2, #3
 80044b4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	212c      	movs	r1, #44	; 0x2c
 80044bc:	fb01 f303 	mul.w	r3, r1, r3
 80044c0:	4413      	add	r3, r2
 80044c2:	333d      	adds	r3, #61	; 0x3d
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d112      	bne.n	80044f0 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	212c      	movs	r1, #44	; 0x2c
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	4413      	add	r3, r2
 80044d6:	333c      	adds	r3, #60	; 0x3c
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d108      	bne.n	80044f0 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	212c      	movs	r1, #44	; 0x2c
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	4413      	add	r3, r2
 80044ea:	333d      	adds	r3, #61	; 0x3d
 80044ec:	2201      	movs	r2, #1
 80044ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	0151      	lsls	r1, r2, #5
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	440a      	add	r2, r1
 8004506:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800450a:	f043 0302 	orr.w	r3, r3, #2
 800450e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	4611      	mov	r1, r2
 800451a:	4618      	mov	r0, r3
 800451c:	f004 fa3d 	bl	800899a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	4413      	add	r3, r2
 8004528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452c:	461a      	mov	r2, r3
 800452e:	2310      	movs	r3, #16
 8004530:	6093      	str	r3, [r2, #8]
}
 8004532:	e21b      	b.n	800496c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	4413      	add	r3, r2
 800453c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004546:	2b80      	cmp	r3, #128	; 0x80
 8004548:	d174      	bne.n	8004634 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d121      	bne.n	8004596 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	212c      	movs	r1, #44	; 0x2c
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	4413      	add	r3, r2
 800455e:	3361      	adds	r3, #97	; 0x61
 8004560:	2206      	movs	r2, #6
 8004562:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	4413      	add	r3, r2
 800456c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	0151      	lsls	r1, r2, #5
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	440a      	add	r2, r1
 800457a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800457e:	f043 0302 	orr.w	r3, r3, #2
 8004582:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	4611      	mov	r1, r2
 800458e:	4618      	mov	r0, r3
 8004590:	f004 fa03 	bl	800899a <USB_HC_Halt>
 8004594:	e044      	b.n	8004620 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	212c      	movs	r1, #44	; 0x2c
 800459c:	fb01 f303 	mul.w	r3, r1, r3
 80045a0:	4413      	add	r3, r2
 80045a2:	335c      	adds	r3, #92	; 0x5c
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	202c      	movs	r0, #44	; 0x2c
 80045ae:	fb00 f303 	mul.w	r3, r0, r3
 80045b2:	440b      	add	r3, r1
 80045b4:	335c      	adds	r3, #92	; 0x5c
 80045b6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	212c      	movs	r1, #44	; 0x2c
 80045be:	fb01 f303 	mul.w	r3, r1, r3
 80045c2:	4413      	add	r3, r2
 80045c4:	335c      	adds	r3, #92	; 0x5c
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d920      	bls.n	800460e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	212c      	movs	r1, #44	; 0x2c
 80045d2:	fb01 f303 	mul.w	r3, r1, r3
 80045d6:	4413      	add	r3, r2
 80045d8:	335c      	adds	r3, #92	; 0x5c
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	212c      	movs	r1, #44	; 0x2c
 80045e4:	fb01 f303 	mul.w	r3, r1, r3
 80045e8:	4413      	add	r3, r2
 80045ea:	3360      	adds	r3, #96	; 0x60
 80045ec:	2204      	movs	r2, #4
 80045ee:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	b2d9      	uxtb	r1, r3
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	202c      	movs	r0, #44	; 0x2c
 80045fa:	fb00 f303 	mul.w	r3, r0, r3
 80045fe:	4413      	add	r3, r2
 8004600:	3360      	adds	r3, #96	; 0x60
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	461a      	mov	r2, r3
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f006 fb84 	bl	800ad14 <HAL_HCD_HC_NotifyURBChange_Callback>
 800460c:	e008      	b.n	8004620 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	212c      	movs	r1, #44	; 0x2c
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	4413      	add	r3, r2
 800461a:	3360      	adds	r3, #96	; 0x60
 800461c:	2202      	movs	r2, #2
 800461e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	4413      	add	r3, r2
 8004628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800462c:	461a      	mov	r2, r3
 800462e:	2380      	movs	r3, #128	; 0x80
 8004630:	6093      	str	r3, [r2, #8]
}
 8004632:	e19b      	b.n	800496c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	4413      	add	r3, r2
 800463c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464a:	d134      	bne.n	80046b6 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	4413      	add	r3, r2
 8004654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	0151      	lsls	r1, r2, #5
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	440a      	add	r2, r1
 8004662:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004666:	f043 0302 	orr.w	r3, r3, #2
 800466a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	4611      	mov	r1, r2
 8004676:	4618      	mov	r0, r3
 8004678:	f004 f98f 	bl	800899a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	4413      	add	r3, r2
 8004684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004688:	461a      	mov	r2, r3
 800468a:	2310      	movs	r3, #16
 800468c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	4413      	add	r3, r2
 8004696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800469a:	461a      	mov	r2, r3
 800469c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	212c      	movs	r1, #44	; 0x2c
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	4413      	add	r3, r2
 80046ae:	3361      	adds	r3, #97	; 0x61
 80046b0:	2208      	movs	r2, #8
 80046b2:	701a      	strb	r2, [r3, #0]
}
 80046b4:	e15a      	b.n	800496c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	f040 814f 	bne.w	800496c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	0151      	lsls	r1, r2, #5
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	440a      	add	r2, r1
 80046e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046e8:	f023 0302 	bic.w	r3, r3, #2
 80046ec:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	212c      	movs	r1, #44	; 0x2c
 80046f4:	fb01 f303 	mul.w	r3, r1, r3
 80046f8:	4413      	add	r3, r2
 80046fa:	3361      	adds	r3, #97	; 0x61
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d17d      	bne.n	80047fe <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	212c      	movs	r1, #44	; 0x2c
 8004708:	fb01 f303 	mul.w	r3, r1, r3
 800470c:	4413      	add	r3, r2
 800470e:	3360      	adds	r3, #96	; 0x60
 8004710:	2201      	movs	r2, #1
 8004712:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	212c      	movs	r1, #44	; 0x2c
 800471a:	fb01 f303 	mul.w	r3, r1, r3
 800471e:	4413      	add	r3, r2
 8004720:	333f      	adds	r3, #63	; 0x3f
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2b02      	cmp	r3, #2
 8004726:	d00a      	beq.n	800473e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	212c      	movs	r1, #44	; 0x2c
 800472e:	fb01 f303 	mul.w	r3, r1, r3
 8004732:	4413      	add	r3, r2
 8004734:	333f      	adds	r3, #63	; 0x3f
 8004736:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004738:	2b03      	cmp	r3, #3
 800473a:	f040 8100 	bne.w	800493e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d113      	bne.n	800476e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	212c      	movs	r1, #44	; 0x2c
 800474c:	fb01 f303 	mul.w	r3, r1, r3
 8004750:	4413      	add	r3, r2
 8004752:	3355      	adds	r3, #85	; 0x55
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	f083 0301 	eor.w	r3, r3, #1
 800475a:	b2d8      	uxtb	r0, r3
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	212c      	movs	r1, #44	; 0x2c
 8004762:	fb01 f303 	mul.w	r3, r1, r3
 8004766:	4413      	add	r3, r2
 8004768:	3355      	adds	r3, #85	; 0x55
 800476a:	4602      	mov	r2, r0
 800476c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	2b01      	cmp	r3, #1
 8004774:	f040 80e3 	bne.w	800493e <HCD_HC_OUT_IRQHandler+0x7cc>
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	212c      	movs	r1, #44	; 0x2c
 800477e:	fb01 f303 	mul.w	r3, r1, r3
 8004782:	4413      	add	r3, r2
 8004784:	334c      	adds	r3, #76	; 0x4c
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 80d8 	beq.w	800493e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	212c      	movs	r1, #44	; 0x2c
 8004794:	fb01 f303 	mul.w	r3, r1, r3
 8004798:	4413      	add	r3, r2
 800479a:	334c      	adds	r3, #76	; 0x4c
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6879      	ldr	r1, [r7, #4]
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	202c      	movs	r0, #44	; 0x2c
 80047a4:	fb00 f202 	mul.w	r2, r0, r2
 80047a8:	440a      	add	r2, r1
 80047aa:	3240      	adds	r2, #64	; 0x40
 80047ac:	8812      	ldrh	r2, [r2, #0]
 80047ae:	4413      	add	r3, r2
 80047b0:	3b01      	subs	r3, #1
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	202c      	movs	r0, #44	; 0x2c
 80047b8:	fb00 f202 	mul.w	r2, r0, r2
 80047bc:	440a      	add	r2, r1
 80047be:	3240      	adds	r2, #64	; 0x40
 80047c0:	8812      	ldrh	r2, [r2, #0]
 80047c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 80b5 	beq.w	800493e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	212c      	movs	r1, #44	; 0x2c
 80047da:	fb01 f303 	mul.w	r3, r1, r3
 80047de:	4413      	add	r3, r2
 80047e0:	3355      	adds	r3, #85	; 0x55
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	f083 0301 	eor.w	r3, r3, #1
 80047e8:	b2d8      	uxtb	r0, r3
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	212c      	movs	r1, #44	; 0x2c
 80047f0:	fb01 f303 	mul.w	r3, r1, r3
 80047f4:	4413      	add	r3, r2
 80047f6:	3355      	adds	r3, #85	; 0x55
 80047f8:	4602      	mov	r2, r0
 80047fa:	701a      	strb	r2, [r3, #0]
 80047fc:	e09f      	b.n	800493e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	212c      	movs	r1, #44	; 0x2c
 8004804:	fb01 f303 	mul.w	r3, r1, r3
 8004808:	4413      	add	r3, r2
 800480a:	3361      	adds	r3, #97	; 0x61
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	2b03      	cmp	r3, #3
 8004810:	d109      	bne.n	8004826 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	212c      	movs	r1, #44	; 0x2c
 8004818:	fb01 f303 	mul.w	r3, r1, r3
 800481c:	4413      	add	r3, r2
 800481e:	3360      	adds	r3, #96	; 0x60
 8004820:	2202      	movs	r2, #2
 8004822:	701a      	strb	r2, [r3, #0]
 8004824:	e08b      	b.n	800493e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	212c      	movs	r1, #44	; 0x2c
 800482c:	fb01 f303 	mul.w	r3, r1, r3
 8004830:	4413      	add	r3, r2
 8004832:	3361      	adds	r3, #97	; 0x61
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b04      	cmp	r3, #4
 8004838:	d109      	bne.n	800484e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	212c      	movs	r1, #44	; 0x2c
 8004840:	fb01 f303 	mul.w	r3, r1, r3
 8004844:	4413      	add	r3, r2
 8004846:	3360      	adds	r3, #96	; 0x60
 8004848:	2202      	movs	r2, #2
 800484a:	701a      	strb	r2, [r3, #0]
 800484c:	e077      	b.n	800493e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	212c      	movs	r1, #44	; 0x2c
 8004854:	fb01 f303 	mul.w	r3, r1, r3
 8004858:	4413      	add	r3, r2
 800485a:	3361      	adds	r3, #97	; 0x61
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b05      	cmp	r3, #5
 8004860:	d109      	bne.n	8004876 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	212c      	movs	r1, #44	; 0x2c
 8004868:	fb01 f303 	mul.w	r3, r1, r3
 800486c:	4413      	add	r3, r2
 800486e:	3360      	adds	r3, #96	; 0x60
 8004870:	2205      	movs	r2, #5
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e063      	b.n	800493e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	212c      	movs	r1, #44	; 0x2c
 800487c:	fb01 f303 	mul.w	r3, r1, r3
 8004880:	4413      	add	r3, r2
 8004882:	3361      	adds	r3, #97	; 0x61
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b06      	cmp	r3, #6
 8004888:	d009      	beq.n	800489e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	212c      	movs	r1, #44	; 0x2c
 8004890:	fb01 f303 	mul.w	r3, r1, r3
 8004894:	4413      	add	r3, r2
 8004896:	3361      	adds	r3, #97	; 0x61
 8004898:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800489a:	2b08      	cmp	r3, #8
 800489c:	d14f      	bne.n	800493e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	212c      	movs	r1, #44	; 0x2c
 80048a4:	fb01 f303 	mul.w	r3, r1, r3
 80048a8:	4413      	add	r3, r2
 80048aa:	335c      	adds	r3, #92	; 0x5c
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	6879      	ldr	r1, [r7, #4]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	202c      	movs	r0, #44	; 0x2c
 80048b6:	fb00 f303 	mul.w	r3, r0, r3
 80048ba:	440b      	add	r3, r1
 80048bc:	335c      	adds	r3, #92	; 0x5c
 80048be:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	212c      	movs	r1, #44	; 0x2c
 80048c6:	fb01 f303 	mul.w	r3, r1, r3
 80048ca:	4413      	add	r3, r2
 80048cc:	335c      	adds	r3, #92	; 0x5c
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d912      	bls.n	80048fa <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	212c      	movs	r1, #44	; 0x2c
 80048da:	fb01 f303 	mul.w	r3, r1, r3
 80048de:	4413      	add	r3, r2
 80048e0:	335c      	adds	r3, #92	; 0x5c
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	212c      	movs	r1, #44	; 0x2c
 80048ec:	fb01 f303 	mul.w	r3, r1, r3
 80048f0:	4413      	add	r3, r2
 80048f2:	3360      	adds	r3, #96	; 0x60
 80048f4:	2204      	movs	r2, #4
 80048f6:	701a      	strb	r2, [r3, #0]
 80048f8:	e021      	b.n	800493e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	212c      	movs	r1, #44	; 0x2c
 8004900:	fb01 f303 	mul.w	r3, r1, r3
 8004904:	4413      	add	r3, r2
 8004906:	3360      	adds	r3, #96	; 0x60
 8004908:	2202      	movs	r2, #2
 800490a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	4413      	add	r3, r2
 8004914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004922:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800492a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	4413      	add	r3, r2
 8004934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004938:	461a      	mov	r2, r3
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	4413      	add	r3, r2
 8004946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800494a:	461a      	mov	r2, r3
 800494c:	2302      	movs	r3, #2
 800494e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	b2d9      	uxtb	r1, r3
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	202c      	movs	r0, #44	; 0x2c
 800495a:	fb00 f303 	mul.w	r3, r0, r3
 800495e:	4413      	add	r3, r2
 8004960:	3360      	adds	r3, #96	; 0x60
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	461a      	mov	r2, r3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f006 f9d4 	bl	800ad14 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800496c:	bf00      	nop
 800496e:	3720      	adds	r7, #32
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08a      	sub	sp, #40	; 0x28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	f003 030f 	and.w	r3, r3, #15
 8004994:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	0c5b      	lsrs	r3, r3, #17
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	091b      	lsrs	r3, r3, #4
 80049a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049a8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d004      	beq.n	80049ba <HCD_RXQLVL_IRQHandler+0x46>
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2b05      	cmp	r3, #5
 80049b4:	f000 80a9 	beq.w	8004b0a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80049b8:	e0aa      	b.n	8004b10 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80a6 	beq.w	8004b0e <HCD_RXQLVL_IRQHandler+0x19a>
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	212c      	movs	r1, #44	; 0x2c
 80049c8:	fb01 f303 	mul.w	r3, r1, r3
 80049cc:	4413      	add	r3, r2
 80049ce:	3344      	adds	r3, #68	; 0x44
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 809b 	beq.w	8004b0e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	212c      	movs	r1, #44	; 0x2c
 80049de:	fb01 f303 	mul.w	r3, r1, r3
 80049e2:	4413      	add	r3, r2
 80049e4:	3350      	adds	r3, #80	; 0x50
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	441a      	add	r2, r3
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	202c      	movs	r0, #44	; 0x2c
 80049f2:	fb00 f303 	mul.w	r3, r0, r3
 80049f6:	440b      	add	r3, r1
 80049f8:	334c      	adds	r3, #76	; 0x4c
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d87a      	bhi.n	8004af6 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6818      	ldr	r0, [r3, #0]
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	212c      	movs	r1, #44	; 0x2c
 8004a0a:	fb01 f303 	mul.w	r3, r1, r3
 8004a0e:	4413      	add	r3, r2
 8004a10:	3344      	adds	r3, #68	; 0x44
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	b292      	uxth	r2, r2
 8004a18:	4619      	mov	r1, r3
 8004a1a:	f003 fb37 	bl	800808c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	212c      	movs	r1, #44	; 0x2c
 8004a24:	fb01 f303 	mul.w	r3, r1, r3
 8004a28:	4413      	add	r3, r2
 8004a2a:	3344      	adds	r3, #68	; 0x44
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	441a      	add	r2, r3
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	202c      	movs	r0, #44	; 0x2c
 8004a38:	fb00 f303 	mul.w	r3, r0, r3
 8004a3c:	440b      	add	r3, r1
 8004a3e:	3344      	adds	r3, #68	; 0x44
 8004a40:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	212c      	movs	r1, #44	; 0x2c
 8004a48:	fb01 f303 	mul.w	r3, r1, r3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3350      	adds	r3, #80	; 0x50
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	441a      	add	r2, r3
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	202c      	movs	r0, #44	; 0x2c
 8004a5c:	fb00 f303 	mul.w	r3, r0, r3
 8004a60:	440b      	add	r3, r1
 8004a62:	3350      	adds	r3, #80	; 0x50
 8004a64:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	0cdb      	lsrs	r3, r3, #19
 8004a76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a7a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	212c      	movs	r1, #44	; 0x2c
 8004a82:	fb01 f303 	mul.w	r3, r1, r3
 8004a86:	4413      	add	r3, r2
 8004a88:	3340      	adds	r3, #64	; 0x40
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d13c      	bne.n	8004b0e <HCD_RXQLVL_IRQHandler+0x19a>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d039      	beq.n	8004b0e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ab0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ab8:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	212c      	movs	r1, #44	; 0x2c
 8004ad2:	fb01 f303 	mul.w	r3, r1, r3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	3354      	adds	r3, #84	; 0x54
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	f083 0301 	eor.w	r3, r3, #1
 8004ae0:	b2d8      	uxtb	r0, r3
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	212c      	movs	r1, #44	; 0x2c
 8004ae8:	fb01 f303 	mul.w	r3, r1, r3
 8004aec:	4413      	add	r3, r2
 8004aee:	3354      	adds	r3, #84	; 0x54
 8004af0:	4602      	mov	r2, r0
 8004af2:	701a      	strb	r2, [r3, #0]
      break;
 8004af4:	e00b      	b.n	8004b0e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	212c      	movs	r1, #44	; 0x2c
 8004afc:	fb01 f303 	mul.w	r3, r1, r3
 8004b00:	4413      	add	r3, r2
 8004b02:	3360      	adds	r3, #96	; 0x60
 8004b04:	2204      	movs	r2, #4
 8004b06:	701a      	strb	r2, [r3, #0]
      break;
 8004b08:	e001      	b.n	8004b0e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004b0a:	bf00      	nop
 8004b0c:	e000      	b.n	8004b10 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004b0e:	bf00      	nop
  }
}
 8004b10:	bf00      	nop
 8004b12:	3728      	adds	r7, #40	; 0x28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b44:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d10b      	bne.n	8004b68 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d102      	bne.n	8004b60 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f006 f8be 	bl	800acdc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f043 0302 	orr.w	r3, r3, #2
 8004b66:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d132      	bne.n	8004bd8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	f043 0308 	orr.w	r3, r3, #8
 8004b78:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b04      	cmp	r3, #4
 8004b82:	d126      	bne.n	8004bd2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d113      	bne.n	8004bb4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004b92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b96:	d106      	bne.n	8004ba6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2102      	movs	r1, #2
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f003 fbd4 	bl	800834c <USB_InitFSLSPClkSel>
 8004ba4:	e011      	b.n	8004bca <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2101      	movs	r1, #1
 8004bac:	4618      	mov	r0, r3
 8004bae:	f003 fbcd 	bl	800834c <USB_InitFSLSPClkSel>
 8004bb2:	e00a      	b.n	8004bca <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d106      	bne.n	8004bca <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004bc8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f006 f8b0 	bl	800ad30 <HAL_HCD_PortEnabled_Callback>
 8004bd0:	e002      	b.n	8004bd8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f006 f8ba 	bl	800ad4c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b20      	cmp	r3, #32
 8004be0:	d103      	bne.n	8004bea <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	f043 0320 	orr.w	r3, r3, #32
 8004be8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	6013      	str	r3, [r2, #0]
}
 8004bf6:	bf00      	nop
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
	...

08004c00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e1be      	b.n	8004f90 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a9f      	ldr	r2, [pc, #636]	; (8004e94 <HAL_I2C_Init+0x294>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d00e      	beq.n	8004c3a <HAL_I2C_Init+0x3a>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a9d      	ldr	r2, [pc, #628]	; (8004e98 <HAL_I2C_Init+0x298>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d009      	beq.n	8004c3a <HAL_I2C_Init+0x3a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a9c      	ldr	r2, [pc, #624]	; (8004e9c <HAL_I2C_Init+0x29c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d004      	beq.n	8004c3a <HAL_I2C_Init+0x3a>
 8004c30:	f240 11bf 	movw	r1, #447	; 0x1bf
 8004c34:	489a      	ldr	r0, [pc, #616]	; (8004ea0 <HAL_I2C_Init+0x2a0>)
 8004c36:	f7fc fa12 	bl	800105e <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d004      	beq.n	8004c4c <HAL_I2C_Init+0x4c>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	4a97      	ldr	r2, [pc, #604]	; (8004ea4 <HAL_I2C_Init+0x2a4>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d904      	bls.n	8004c56 <HAL_I2C_Init+0x56>
 8004c4c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004c50:	4893      	ldr	r0, [pc, #588]	; (8004ea0 <HAL_I2C_Init+0x2a0>)
 8004c52:	f7fc fa04 	bl	800105e <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d009      	beq.n	8004c72 <HAL_I2C_Init+0x72>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c66:	d004      	beq.n	8004c72 <HAL_I2C_Init+0x72>
 8004c68:	f240 11c1 	movw	r1, #449	; 0x1c1
 8004c6c:	488c      	ldr	r0, [pc, #560]	; (8004ea0 <HAL_I2C_Init+0x2a0>)
 8004c6e:	f7fc f9f6 	bl	800105e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c7a:	f023 0303 	bic.w	r3, r3, #3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d004      	beq.n	8004c8c <HAL_I2C_Init+0x8c>
 8004c82:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8004c86:	4886      	ldr	r0, [pc, #536]	; (8004ea0 <HAL_I2C_Init+0x2a0>)
 8004c88:	f7fc f9e9 	bl	800105e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c94:	d009      	beq.n	8004caa <HAL_I2C_Init+0xaa>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c9e:	d004      	beq.n	8004caa <HAL_I2C_Init+0xaa>
 8004ca0:	f240 11c3 	movw	r1, #451	; 0x1c3
 8004ca4:	487e      	ldr	r0, [pc, #504]	; (8004ea0 <HAL_I2C_Init+0x2a0>)
 8004ca6:	f7fc f9da 	bl	800105e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d008      	beq.n	8004cc4 <HAL_I2C_Init+0xc4>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d004      	beq.n	8004cc4 <HAL_I2C_Init+0xc4>
 8004cba:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8004cbe:	4878      	ldr	r0, [pc, #480]	; (8004ea0 <HAL_I2C_Init+0x2a0>)
 8004cc0:	f7fc f9cd 	bl	800105e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d004      	beq.n	8004cda <HAL_I2C_Init+0xda>
 8004cd0:	f240 11c5 	movw	r1, #453	; 0x1c5
 8004cd4:	4872      	ldr	r0, [pc, #456]	; (8004ea0 <HAL_I2C_Init+0x2a0>)
 8004cd6:	f7fc f9c2 	bl	800105e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d008      	beq.n	8004cf4 <HAL_I2C_Init+0xf4>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	2b40      	cmp	r3, #64	; 0x40
 8004ce8:	d004      	beq.n	8004cf4 <HAL_I2C_Init+0xf4>
 8004cea:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8004cee:	486c      	ldr	r0, [pc, #432]	; (8004ea0 <HAL_I2C_Init+0x2a0>)
 8004cf0:	f7fc f9b5 	bl	800105e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d008      	beq.n	8004d0e <HAL_I2C_Init+0x10e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	2b80      	cmp	r3, #128	; 0x80
 8004d02:	d004      	beq.n	8004d0e <HAL_I2C_Init+0x10e>
 8004d04:	f240 11c7 	movw	r1, #455	; 0x1c7
 8004d08:	4865      	ldr	r0, [pc, #404]	; (8004ea0 <HAL_I2C_Init+0x2a0>)
 8004d0a:	f7fc f9a8 	bl	800105e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7fb fe3e 	bl	80009a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2224      	movs	r2, #36	; 0x24
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0201 	bic.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d60:	f000 febe 	bl	8005ae0 <HAL_RCC_GetPCLK1Freq>
 8004d64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	4a4f      	ldr	r2, [pc, #316]	; (8004ea8 <HAL_I2C_Init+0x2a8>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d807      	bhi.n	8004d80 <HAL_I2C_Init+0x180>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4a4e      	ldr	r2, [pc, #312]	; (8004eac <HAL_I2C_Init+0x2ac>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	bf94      	ite	ls
 8004d78:	2301      	movls	r3, #1
 8004d7a:	2300      	movhi	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	e006      	b.n	8004d8e <HAL_I2C_Init+0x18e>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4a4b      	ldr	r2, [pc, #300]	; (8004eb0 <HAL_I2C_Init+0x2b0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	bf94      	ite	ls
 8004d88:	2301      	movls	r3, #1
 8004d8a:	2300      	movhi	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e0fc      	b.n	8004f90 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4a46      	ldr	r2, [pc, #280]	; (8004eb4 <HAL_I2C_Init+0x2b4>)
 8004d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9e:	0c9b      	lsrs	r3, r3, #18
 8004da0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	4a38      	ldr	r2, [pc, #224]	; (8004ea8 <HAL_I2C_Init+0x2a8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d802      	bhi.n	8004dd0 <HAL_I2C_Init+0x1d0>
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	e009      	b.n	8004de4 <HAL_I2C_Init+0x1e4>
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004dd6:	fb02 f303 	mul.w	r3, r2, r3
 8004dda:	4a37      	ldr	r2, [pc, #220]	; (8004eb8 <HAL_I2C_Init+0x2b8>)
 8004ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8004de0:	099b      	lsrs	r3, r3, #6
 8004de2:	3301      	adds	r3, #1
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6812      	ldr	r2, [r2, #0]
 8004de8:	430b      	orrs	r3, r1
 8004dea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004df6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	492a      	ldr	r1, [pc, #168]	; (8004ea8 <HAL_I2C_Init+0x2a8>)
 8004e00:	428b      	cmp	r3, r1
 8004e02:	d819      	bhi.n	8004e38 <HAL_I2C_Init+0x238>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	1e59      	subs	r1, r3, #1
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e12:	1c59      	adds	r1, r3, #1
 8004e14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e18:	400b      	ands	r3, r1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <HAL_I2C_Init+0x234>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	1e59      	subs	r1, r3, #1
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e32:	e066      	b.n	8004f02 <HAL_I2C_Init+0x302>
 8004e34:	2304      	movs	r3, #4
 8004e36:	e064      	b.n	8004f02 <HAL_I2C_Init+0x302>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d111      	bne.n	8004e64 <HAL_I2C_Init+0x264>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	1e58      	subs	r0, r3, #1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6859      	ldr	r1, [r3, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	440b      	add	r3, r1
 8004e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e52:	3301      	adds	r3, #1
 8004e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bf0c      	ite	eq
 8004e5c:	2301      	moveq	r3, #1
 8004e5e:	2300      	movne	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	e012      	b.n	8004e8a <HAL_I2C_Init+0x28a>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	1e58      	subs	r0, r3, #1
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6859      	ldr	r1, [r3, #4]
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	0099      	lsls	r1, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	bf0c      	ite	eq
 8004e84:	2301      	moveq	r3, #1
 8004e86:	2300      	movne	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d016      	beq.n	8004ebc <HAL_I2C_Init+0x2bc>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e037      	b.n	8004f02 <HAL_I2C_Init+0x302>
 8004e92:	bf00      	nop
 8004e94:	40005400 	.word	0x40005400
 8004e98:	40005800 	.word	0x40005800
 8004e9c:	40005c00 	.word	0x40005c00
 8004ea0:	0800b49c 	.word	0x0800b49c
 8004ea4:	00061a80 	.word	0x00061a80
 8004ea8:	000186a0 	.word	0x000186a0
 8004eac:	001e847f 	.word	0x001e847f
 8004eb0:	003d08ff 	.word	0x003d08ff
 8004eb4:	431bde83 	.word	0x431bde83
 8004eb8:	10624dd3 	.word	0x10624dd3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10e      	bne.n	8004ee2 <HAL_I2C_Init+0x2e2>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	1e58      	subs	r0, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6859      	ldr	r1, [r3, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	440b      	add	r3, r1
 8004ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ee0:	e00f      	b.n	8004f02 <HAL_I2C_Init+0x302>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	1e58      	subs	r0, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6859      	ldr	r1, [r3, #4]
 8004eea:	460b      	mov	r3, r1
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	440b      	add	r3, r1
 8004ef0:	0099      	lsls	r1, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ef8:	3301      	adds	r3, #1
 8004efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004efe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	6809      	ldr	r1, [r1, #0]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f30:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6911      	ldr	r1, [r2, #16]
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	68d2      	ldr	r2, [r2, #12]
 8004f3c:	4311      	orrs	r1, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	430b      	orrs	r3, r1
 8004f44:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	695a      	ldr	r2, [r3, #20]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 0201 	orr.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e316      	b.n	80055d8 <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b0f      	cmp	r3, #15
 8004fb0:	d903      	bls.n	8004fba <HAL_RCC_OscConfig+0x22>
 8004fb2:	21e8      	movs	r1, #232	; 0xe8
 8004fb4:	48a3      	ldr	r0, [pc, #652]	; (8005244 <HAL_RCC_OscConfig+0x2ac>)
 8004fb6:	f7fc f852 	bl	800105e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 8088 	beq.w	80050d8 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00d      	beq.n	8004fec <HAL_RCC_OscConfig+0x54>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd8:	d008      	beq.n	8004fec <HAL_RCC_OscConfig+0x54>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fe2:	d003      	beq.n	8004fec <HAL_RCC_OscConfig+0x54>
 8004fe4:	21ed      	movs	r1, #237	; 0xed
 8004fe6:	4897      	ldr	r0, [pc, #604]	; (8005244 <HAL_RCC_OscConfig+0x2ac>)
 8004fe8:	f7fc f839 	bl	800105e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fec:	4b96      	ldr	r3, [pc, #600]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f003 030c 	and.w	r3, r3, #12
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d00c      	beq.n	8005012 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ff8:	4b93      	ldr	r3, [pc, #588]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005000:	2b08      	cmp	r3, #8
 8005002:	d112      	bne.n	800502a <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005004:	4b90      	ldr	r3, [pc, #576]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800500c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005010:	d10b      	bne.n	800502a <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005012:	4b8d      	ldr	r3, [pc, #564]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d05b      	beq.n	80050d6 <HAL_RCC_OscConfig+0x13e>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d157      	bne.n	80050d6 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e2d6      	b.n	80055d8 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005032:	d106      	bne.n	8005042 <HAL_RCC_OscConfig+0xaa>
 8005034:	4b84      	ldr	r3, [pc, #528]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a83      	ldr	r2, [pc, #524]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 800503a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	e01d      	b.n	800507e <HAL_RCC_OscConfig+0xe6>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800504a:	d10c      	bne.n	8005066 <HAL_RCC_OscConfig+0xce>
 800504c:	4b7e      	ldr	r3, [pc, #504]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a7d      	ldr	r2, [pc, #500]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 8005052:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	4b7b      	ldr	r3, [pc, #492]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a7a      	ldr	r2, [pc, #488]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 800505e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	e00b      	b.n	800507e <HAL_RCC_OscConfig+0xe6>
 8005066:	4b78      	ldr	r3, [pc, #480]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a77      	ldr	r2, [pc, #476]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 800506c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	4b75      	ldr	r3, [pc, #468]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a74      	ldr	r2, [pc, #464]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 8005078:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800507c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d013      	beq.n	80050ae <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005086:	f7fc fafd 	bl	8001684 <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800508e:	f7fc faf9 	bl	8001684 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b64      	cmp	r3, #100	; 0x64
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e29b      	b.n	80055d8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a0:	4b69      	ldr	r3, [pc, #420]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0f0      	beq.n	800508e <HAL_RCC_OscConfig+0xf6>
 80050ac:	e014      	b.n	80050d8 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ae:	f7fc fae9 	bl	8001684 <HAL_GetTick>
 80050b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050b4:	e008      	b.n	80050c8 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050b6:	f7fc fae5 	bl	8001684 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b64      	cmp	r3, #100	; 0x64
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e287      	b.n	80055d8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050c8:	4b5f      	ldr	r3, [pc, #380]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1f0      	bne.n	80050b6 <HAL_RCC_OscConfig+0x11e>
 80050d4:	e000      	b.n	80050d8 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d079      	beq.n	80051d8 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d008      	beq.n	80050fe <HAL_RCC_OscConfig+0x166>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d004      	beq.n	80050fe <HAL_RCC_OscConfig+0x166>
 80050f4:	f240 111f 	movw	r1, #287	; 0x11f
 80050f8:	4852      	ldr	r0, [pc, #328]	; (8005244 <HAL_RCC_OscConfig+0x2ac>)
 80050fa:	f7fb ffb0 	bl	800105e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	2b1f      	cmp	r3, #31
 8005104:	d904      	bls.n	8005110 <HAL_RCC_OscConfig+0x178>
 8005106:	f44f 7190 	mov.w	r1, #288	; 0x120
 800510a:	484e      	ldr	r0, [pc, #312]	; (8005244 <HAL_RCC_OscConfig+0x2ac>)
 800510c:	f7fb ffa7 	bl	800105e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005110:	4b4d      	ldr	r3, [pc, #308]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f003 030c 	and.w	r3, r3, #12
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00b      	beq.n	8005134 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800511c:	4b4a      	ldr	r3, [pc, #296]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005124:	2b08      	cmp	r3, #8
 8005126:	d11c      	bne.n	8005162 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005128:	4b47      	ldr	r3, [pc, #284]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d116      	bne.n	8005162 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005134:	4b44      	ldr	r3, [pc, #272]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d005      	beq.n	800514c <HAL_RCC_OscConfig+0x1b4>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d001      	beq.n	800514c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e245      	b.n	80055d8 <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800514c:	4b3e      	ldr	r3, [pc, #248]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	493b      	ldr	r1, [pc, #236]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 800515c:	4313      	orrs	r3, r2
 800515e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005160:	e03a      	b.n	80051d8 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d020      	beq.n	80051ac <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800516a:	4b38      	ldr	r3, [pc, #224]	; (800524c <HAL_RCC_OscConfig+0x2b4>)
 800516c:	2201      	movs	r2, #1
 800516e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005170:	f7fc fa88 	bl	8001684 <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005178:	f7fc fa84 	bl	8001684 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e226      	b.n	80055d8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800518a:	4b2f      	ldr	r3, [pc, #188]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0f0      	beq.n	8005178 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005196:	4b2c      	ldr	r3, [pc, #176]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	4928      	ldr	r1, [pc, #160]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	600b      	str	r3, [r1, #0]
 80051aa:	e015      	b.n	80051d8 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ac:	4b27      	ldr	r3, [pc, #156]	; (800524c <HAL_RCC_OscConfig+0x2b4>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b2:	f7fc fa67 	bl	8001684 <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051b8:	e008      	b.n	80051cc <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051ba:	f7fc fa63 	bl	8001684 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e205      	b.n	80055d8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051cc:	4b1e      	ldr	r3, [pc, #120]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1f0      	bne.n	80051ba <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0308 	and.w	r3, r3, #8
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d046      	beq.n	8005272 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d008      	beq.n	80051fe <HAL_RCC_OscConfig+0x266>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d004      	beq.n	80051fe <HAL_RCC_OscConfig+0x266>
 80051f4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80051f8:	4812      	ldr	r0, [pc, #72]	; (8005244 <HAL_RCC_OscConfig+0x2ac>)
 80051fa:	f7fb ff30 	bl	800105e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d016      	beq.n	8005234 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005206:	4b12      	ldr	r3, [pc, #72]	; (8005250 <HAL_RCC_OscConfig+0x2b8>)
 8005208:	2201      	movs	r2, #1
 800520a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800520c:	f7fc fa3a 	bl	8001684 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005214:	f7fc fa36 	bl	8001684 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e1d8      	b.n	80055d8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005226:	4b08      	ldr	r3, [pc, #32]	; (8005248 <HAL_RCC_OscConfig+0x2b0>)
 8005228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0f0      	beq.n	8005214 <HAL_RCC_OscConfig+0x27c>
 8005232:	e01e      	b.n	8005272 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005234:	4b06      	ldr	r3, [pc, #24]	; (8005250 <HAL_RCC_OscConfig+0x2b8>)
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800523a:	f7fc fa23 	bl	8001684 <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005240:	e011      	b.n	8005266 <HAL_RCC_OscConfig+0x2ce>
 8005242:	bf00      	nop
 8005244:	0800b4d4 	.word	0x0800b4d4
 8005248:	40023800 	.word	0x40023800
 800524c:	42470000 	.word	0x42470000
 8005250:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005254:	f7fc fa16 	bl	8001684 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e1b8      	b.n	80055d8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005266:	4b97      	ldr	r3, [pc, #604]	; (80054c4 <HAL_RCC_OscConfig+0x52c>)
 8005268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1f0      	bne.n	8005254 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0304 	and.w	r3, r3, #4
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 80a8 	beq.w	80053d0 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005280:	2300      	movs	r3, #0
 8005282:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00c      	beq.n	80052a6 <HAL_RCC_OscConfig+0x30e>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d008      	beq.n	80052a6 <HAL_RCC_OscConfig+0x30e>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	2b05      	cmp	r3, #5
 800529a:	d004      	beq.n	80052a6 <HAL_RCC_OscConfig+0x30e>
 800529c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80052a0:	4889      	ldr	r0, [pc, #548]	; (80054c8 <HAL_RCC_OscConfig+0x530>)
 80052a2:	f7fb fedc 	bl	800105e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052a6:	4b87      	ldr	r3, [pc, #540]	; (80054c4 <HAL_RCC_OscConfig+0x52c>)
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10f      	bne.n	80052d2 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052b2:	2300      	movs	r3, #0
 80052b4:	60bb      	str	r3, [r7, #8]
 80052b6:	4b83      	ldr	r3, [pc, #524]	; (80054c4 <HAL_RCC_OscConfig+0x52c>)
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	4a82      	ldr	r2, [pc, #520]	; (80054c4 <HAL_RCC_OscConfig+0x52c>)
 80052bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c0:	6413      	str	r3, [r2, #64]	; 0x40
 80052c2:	4b80      	ldr	r3, [pc, #512]	; (80054c4 <HAL_RCC_OscConfig+0x52c>)
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ca:	60bb      	str	r3, [r7, #8]
 80052cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ce:	2301      	movs	r3, #1
 80052d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d2:	4b7e      	ldr	r3, [pc, #504]	; (80054cc <HAL_RCC_OscConfig+0x534>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d118      	bne.n	8005310 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052de:	4b7b      	ldr	r3, [pc, #492]	; (80054cc <HAL_RCC_OscConfig+0x534>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a7a      	ldr	r2, [pc, #488]	; (80054cc <HAL_RCC_OscConfig+0x534>)
 80052e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ea:	f7fc f9cb 	bl	8001684 <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052f2:	f7fc f9c7 	bl	8001684 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e169      	b.n	80055d8 <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005304:	4b71      	ldr	r3, [pc, #452]	; (80054cc <HAL_RCC_OscConfig+0x534>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0f0      	beq.n	80052f2 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d106      	bne.n	8005326 <HAL_RCC_OscConfig+0x38e>
 8005318:	4b6a      	ldr	r3, [pc, #424]	; (80054c4 <HAL_RCC_OscConfig+0x52c>)
 800531a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531c:	4a69      	ldr	r2, [pc, #420]	; (80054c4 <HAL_RCC_OscConfig+0x52c>)
 800531e:	f043 0301 	orr.w	r3, r3, #1
 8005322:	6713      	str	r3, [r2, #112]	; 0x70
 8005324:	e01c      	b.n	8005360 <HAL_RCC_OscConfig+0x3c8>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	2b05      	cmp	r3, #5
 800532c:	d10c      	bne.n	8005348 <HAL_RCC_OscConfig+0x3b0>
 800532e:	4b65      	ldr	r3, [pc, #404]	; (80054c4 <HAL_RCC_OscConfig+0x52c>)
 8005330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005332:	4a64      	ldr	r2, [pc, #400]	; (80054c4 <HAL_RCC_OscConfig+0x52c>)
 8005334:	f043 0304 	orr.w	r3, r3, #4
 8005338:	6713      	str	r3, [r2, #112]	; 0x70
 800533a:	4b62      	ldr	r3, [pc, #392]	; (80054c4 <HAL_RCC_OscConfig+0x52c>)
 800533c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533e:	4a61      	ldr	r2, [pc, #388]	; (80054c4 <HAL_RCC_OscConfig+0x52c>)
 8005340:	f043 0301 	orr.w	r3, r3, #1
 8005344:	6713      	str	r3, [r2, #112]	; 0x70
 8005346:	e00b      	b.n	8005360 <HAL_RCC_OscConfig+0x3c8>
 8005348:	4b5e      	ldr	r3, [pc, #376]	; (80054c4 <HAL_RCC_OscConfig+0x52c>)
 800534a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534c:	4a5d      	ldr	r2, [pc, #372]	; (80054c4 <HAL_RCC_OscConfig+0x52c>)
 800534e:	f023 0301 	bic.w	r3, r3, #1
 8005352:	6713      	str	r3, [r2, #112]	; 0x70
 8005354:	4b5b      	ldr	r3, [pc, #364]	; (80054c4 <HAL_RCC_OscConfig+0x52c>)
 8005356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005358:	4a5a      	ldr	r2, [pc, #360]	; (80054c4 <HAL_RCC_OscConfig+0x52c>)
 800535a:	f023 0304 	bic.w	r3, r3, #4
 800535e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d015      	beq.n	8005394 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005368:	f7fc f98c 	bl	8001684 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800536e:	e00a      	b.n	8005386 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005370:	f7fc f988 	bl	8001684 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	f241 3288 	movw	r2, #5000	; 0x1388
 800537e:	4293      	cmp	r3, r2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e128      	b.n	80055d8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005386:	4b4f      	ldr	r3, [pc, #316]	; (80054c4 <HAL_RCC_OscConfig+0x52c>)
 8005388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0ee      	beq.n	8005370 <HAL_RCC_OscConfig+0x3d8>
 8005392:	e014      	b.n	80053be <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005394:	f7fc f976 	bl	8001684 <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800539a:	e00a      	b.n	80053b2 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800539c:	f7fc f972 	bl	8001684 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e112      	b.n	80055d8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053b2:	4b44      	ldr	r3, [pc, #272]	; (80054c4 <HAL_RCC_OscConfig+0x52c>)
 80053b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1ee      	bne.n	800539c <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053be:	7dfb      	ldrb	r3, [r7, #23]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d105      	bne.n	80053d0 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053c4:	4b3f      	ldr	r3, [pc, #252]	; (80054c4 <HAL_RCC_OscConfig+0x52c>)
 80053c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c8:	4a3e      	ldr	r2, [pc, #248]	; (80054c4 <HAL_RCC_OscConfig+0x52c>)
 80053ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00c      	beq.n	80053f2 <HAL_RCC_OscConfig+0x45a>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d008      	beq.n	80053f2 <HAL_RCC_OscConfig+0x45a>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d004      	beq.n	80053f2 <HAL_RCC_OscConfig+0x45a>
 80053e8:	f240 11cf 	movw	r1, #463	; 0x1cf
 80053ec:	4836      	ldr	r0, [pc, #216]	; (80054c8 <HAL_RCC_OscConfig+0x530>)
 80053ee:	f7fb fe36 	bl	800105e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 80ed 	beq.w	80055d6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053fc:	4b31      	ldr	r3, [pc, #196]	; (80054c4 <HAL_RCC_OscConfig+0x52c>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f003 030c 	and.w	r3, r3, #12
 8005404:	2b08      	cmp	r3, #8
 8005406:	f000 80ae 	beq.w	8005566 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	2b02      	cmp	r3, #2
 8005410:	f040 8092 	bne.w	8005538 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d009      	beq.n	8005430 <HAL_RCC_OscConfig+0x498>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005424:	d004      	beq.n	8005430 <HAL_RCC_OscConfig+0x498>
 8005426:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800542a:	4827      	ldr	r0, [pc, #156]	; (80054c8 <HAL_RCC_OscConfig+0x530>)
 800542c:	f7fb fe17 	bl	800105e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	2b3f      	cmp	r3, #63	; 0x3f
 8005436:	d904      	bls.n	8005442 <HAL_RCC_OscConfig+0x4aa>
 8005438:	f240 11d9 	movw	r1, #473	; 0x1d9
 800543c:	4822      	ldr	r0, [pc, #136]	; (80054c8 <HAL_RCC_OscConfig+0x530>)
 800543e:	f7fb fe0e 	bl	800105e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2b31      	cmp	r3, #49	; 0x31
 8005448:	d904      	bls.n	8005454 <HAL_RCC_OscConfig+0x4bc>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005452:	d904      	bls.n	800545e <HAL_RCC_OscConfig+0x4c6>
 8005454:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8005458:	481b      	ldr	r0, [pc, #108]	; (80054c8 <HAL_RCC_OscConfig+0x530>)
 800545a:	f7fb fe00 	bl	800105e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005462:	2b02      	cmp	r3, #2
 8005464:	d010      	beq.n	8005488 <HAL_RCC_OscConfig+0x4f0>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546a:	2b04      	cmp	r3, #4
 800546c:	d00c      	beq.n	8005488 <HAL_RCC_OscConfig+0x4f0>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005472:	2b06      	cmp	r3, #6
 8005474:	d008      	beq.n	8005488 <HAL_RCC_OscConfig+0x4f0>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547a:	2b08      	cmp	r3, #8
 800547c:	d004      	beq.n	8005488 <HAL_RCC_OscConfig+0x4f0>
 800547e:	f240 11db 	movw	r1, #475	; 0x1db
 8005482:	4811      	ldr	r0, [pc, #68]	; (80054c8 <HAL_RCC_OscConfig+0x530>)
 8005484:	f7fb fdeb 	bl	800105e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548c:	2b01      	cmp	r3, #1
 800548e:	d903      	bls.n	8005498 <HAL_RCC_OscConfig+0x500>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005494:	2b0f      	cmp	r3, #15
 8005496:	d904      	bls.n	80054a2 <HAL_RCC_OscConfig+0x50a>
 8005498:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800549c:	480a      	ldr	r0, [pc, #40]	; (80054c8 <HAL_RCC_OscConfig+0x530>)
 800549e:	f7fb fdde 	bl	800105e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054a2:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <HAL_RCC_OscConfig+0x538>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a8:	f7fc f8ec 	bl	8001684 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ae:	e011      	b.n	80054d4 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054b0:	f7fc f8e8 	bl	8001684 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d90a      	bls.n	80054d4 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e08a      	b.n	80055d8 <HAL_RCC_OscConfig+0x640>
 80054c2:	bf00      	nop
 80054c4:	40023800 	.word	0x40023800
 80054c8:	0800b4d4 	.word	0x0800b4d4
 80054cc:	40007000 	.word	0x40007000
 80054d0:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054d4:	4b42      	ldr	r3, [pc, #264]	; (80055e0 <HAL_RCC_OscConfig+0x648>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1e7      	bne.n	80054b0 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	69da      	ldr	r2, [r3, #28]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	019b      	lsls	r3, r3, #6
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f6:	085b      	lsrs	r3, r3, #1
 80054f8:	3b01      	subs	r3, #1
 80054fa:	041b      	lsls	r3, r3, #16
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005502:	061b      	lsls	r3, r3, #24
 8005504:	4936      	ldr	r1, [pc, #216]	; (80055e0 <HAL_RCC_OscConfig+0x648>)
 8005506:	4313      	orrs	r3, r2
 8005508:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800550a:	4b36      	ldr	r3, [pc, #216]	; (80055e4 <HAL_RCC_OscConfig+0x64c>)
 800550c:	2201      	movs	r2, #1
 800550e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005510:	f7fc f8b8 	bl	8001684 <HAL_GetTick>
 8005514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005518:	f7fc f8b4 	bl	8001684 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e056      	b.n	80055d8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800552a:	4b2d      	ldr	r3, [pc, #180]	; (80055e0 <HAL_RCC_OscConfig+0x648>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d0f0      	beq.n	8005518 <HAL_RCC_OscConfig+0x580>
 8005536:	e04e      	b.n	80055d6 <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005538:	4b2a      	ldr	r3, [pc, #168]	; (80055e4 <HAL_RCC_OscConfig+0x64c>)
 800553a:	2200      	movs	r2, #0
 800553c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553e:	f7fc f8a1 	bl	8001684 <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005546:	f7fc f89d 	bl	8001684 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e03f      	b.n	80055d8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005558:	4b21      	ldr	r3, [pc, #132]	; (80055e0 <HAL_RCC_OscConfig+0x648>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1f0      	bne.n	8005546 <HAL_RCC_OscConfig+0x5ae>
 8005564:	e037      	b.n	80055d6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d101      	bne.n	8005572 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e032      	b.n	80055d8 <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005572:	4b1b      	ldr	r3, [pc, #108]	; (80055e0 <HAL_RCC_OscConfig+0x648>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d028      	beq.n	80055d2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800558a:	429a      	cmp	r2, r3
 800558c:	d121      	bne.n	80055d2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005598:	429a      	cmp	r2, r3
 800559a:	d11a      	bne.n	80055d2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055a2:	4013      	ands	r3, r2
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055a8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d111      	bne.n	80055d2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b8:	085b      	lsrs	r3, r3, #1
 80055ba:	3b01      	subs	r3, #1
 80055bc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055be:	429a      	cmp	r2, r3
 80055c0:	d107      	bne.n	80055d2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d001      	beq.n	80055d6 <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e000      	b.n	80055d8 <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3718      	adds	r7, #24
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	40023800 	.word	0x40023800
 80055e4:	42470060 	.word	0x42470060

080055e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e174      	b.n	80058e6 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <HAL_RCC_ClockConfig+0x24>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b0f      	cmp	r3, #15
 800560a:	d904      	bls.n	8005616 <HAL_RCC_ClockConfig+0x2e>
 800560c:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8005610:	487b      	ldr	r0, [pc, #492]	; (8005800 <HAL_RCC_ClockConfig+0x218>)
 8005612:	f7fb fd24 	bl	800105e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d019      	beq.n	8005650 <HAL_RCC_ClockConfig+0x68>
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d016      	beq.n	8005650 <HAL_RCC_ClockConfig+0x68>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d013      	beq.n	8005650 <HAL_RCC_ClockConfig+0x68>
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b03      	cmp	r3, #3
 800562c:	d010      	beq.n	8005650 <HAL_RCC_ClockConfig+0x68>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b04      	cmp	r3, #4
 8005632:	d00d      	beq.n	8005650 <HAL_RCC_ClockConfig+0x68>
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	2b05      	cmp	r3, #5
 8005638:	d00a      	beq.n	8005650 <HAL_RCC_ClockConfig+0x68>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b06      	cmp	r3, #6
 800563e:	d007      	beq.n	8005650 <HAL_RCC_ClockConfig+0x68>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2b07      	cmp	r3, #7
 8005644:	d004      	beq.n	8005650 <HAL_RCC_ClockConfig+0x68>
 8005646:	f240 215d 	movw	r1, #605	; 0x25d
 800564a:	486d      	ldr	r0, [pc, #436]	; (8005800 <HAL_RCC_ClockConfig+0x218>)
 800564c:	f7fb fd07 	bl	800105e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005650:	4b6c      	ldr	r3, [pc, #432]	; (8005804 <HAL_RCC_ClockConfig+0x21c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d90c      	bls.n	8005678 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800565e:	4b69      	ldr	r3, [pc, #420]	; (8005804 <HAL_RCC_ClockConfig+0x21c>)
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005666:	4b67      	ldr	r3, [pc, #412]	; (8005804 <HAL_RCC_ClockConfig+0x21c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	429a      	cmp	r2, r3
 8005672:	d001      	beq.n	8005678 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e136      	b.n	80058e6 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d049      	beq.n	8005718 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b00      	cmp	r3, #0
 800568e:	d005      	beq.n	800569c <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005690:	4b5d      	ldr	r3, [pc, #372]	; (8005808 <HAL_RCC_ClockConfig+0x220>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	4a5c      	ldr	r2, [pc, #368]	; (8005808 <HAL_RCC_ClockConfig+0x220>)
 8005696:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800569a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0308 	and.w	r3, r3, #8
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056a8:	4b57      	ldr	r3, [pc, #348]	; (8005808 <HAL_RCC_ClockConfig+0x220>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	4a56      	ldr	r2, [pc, #344]	; (8005808 <HAL_RCC_ClockConfig+0x220>)
 80056ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d024      	beq.n	8005706 <HAL_RCC_ClockConfig+0x11e>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	2b80      	cmp	r3, #128	; 0x80
 80056c2:	d020      	beq.n	8005706 <HAL_RCC_ClockConfig+0x11e>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	2b90      	cmp	r3, #144	; 0x90
 80056ca:	d01c      	beq.n	8005706 <HAL_RCC_ClockConfig+0x11e>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	2ba0      	cmp	r3, #160	; 0xa0
 80056d2:	d018      	beq.n	8005706 <HAL_RCC_ClockConfig+0x11e>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	2bb0      	cmp	r3, #176	; 0xb0
 80056da:	d014      	beq.n	8005706 <HAL_RCC_ClockConfig+0x11e>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	2bc0      	cmp	r3, #192	; 0xc0
 80056e2:	d010      	beq.n	8005706 <HAL_RCC_ClockConfig+0x11e>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	2bd0      	cmp	r3, #208	; 0xd0
 80056ea:	d00c      	beq.n	8005706 <HAL_RCC_ClockConfig+0x11e>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	2be0      	cmp	r3, #224	; 0xe0
 80056f2:	d008      	beq.n	8005706 <HAL_RCC_ClockConfig+0x11e>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	2bf0      	cmp	r3, #240	; 0xf0
 80056fa:	d004      	beq.n	8005706 <HAL_RCC_ClockConfig+0x11e>
 80056fc:	f44f 7120 	mov.w	r1, #640	; 0x280
 8005700:	483f      	ldr	r0, [pc, #252]	; (8005800 <HAL_RCC_ClockConfig+0x218>)
 8005702:	f7fb fcac 	bl	800105e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005706:	4b40      	ldr	r3, [pc, #256]	; (8005808 <HAL_RCC_ClockConfig+0x220>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	493d      	ldr	r1, [pc, #244]	; (8005808 <HAL_RCC_ClockConfig+0x220>)
 8005714:	4313      	orrs	r3, r2
 8005716:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b00      	cmp	r3, #0
 8005722:	d059      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d010      	beq.n	800574e <HAL_RCC_ClockConfig+0x166>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d00c      	beq.n	800574e <HAL_RCC_ClockConfig+0x166>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2b02      	cmp	r3, #2
 800573a:	d008      	beq.n	800574e <HAL_RCC_ClockConfig+0x166>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2b03      	cmp	r3, #3
 8005742:	d004      	beq.n	800574e <HAL_RCC_ClockConfig+0x166>
 8005744:	f240 2187 	movw	r1, #647	; 0x287
 8005748:	482d      	ldr	r0, [pc, #180]	; (8005800 <HAL_RCC_ClockConfig+0x218>)
 800574a:	f7fb fc88 	bl	800105e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d107      	bne.n	8005766 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005756:	4b2c      	ldr	r3, [pc, #176]	; (8005808 <HAL_RCC_ClockConfig+0x220>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d119      	bne.n	8005796 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e0bf      	b.n	80058e6 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	2b02      	cmp	r3, #2
 800576c:	d003      	beq.n	8005776 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005772:	2b03      	cmp	r3, #3
 8005774:	d107      	bne.n	8005786 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005776:	4b24      	ldr	r3, [pc, #144]	; (8005808 <HAL_RCC_ClockConfig+0x220>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d109      	bne.n	8005796 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e0af      	b.n	80058e6 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005786:	4b20      	ldr	r3, [pc, #128]	; (8005808 <HAL_RCC_ClockConfig+0x220>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e0a7      	b.n	80058e6 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005796:	4b1c      	ldr	r3, [pc, #112]	; (8005808 <HAL_RCC_ClockConfig+0x220>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f023 0203 	bic.w	r2, r3, #3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	4919      	ldr	r1, [pc, #100]	; (8005808 <HAL_RCC_ClockConfig+0x220>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057a8:	f7fb ff6c 	bl	8001684 <HAL_GetTick>
 80057ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ae:	e00a      	b.n	80057c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057b0:	f7fb ff68 	bl	8001684 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80057be:	4293      	cmp	r3, r2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e08f      	b.n	80058e6 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057c6:	4b10      	ldr	r3, [pc, #64]	; (8005808 <HAL_RCC_ClockConfig+0x220>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 020c 	and.w	r2, r3, #12
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d1eb      	bne.n	80057b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057d8:	4b0a      	ldr	r3, [pc, #40]	; (8005804 <HAL_RCC_ClockConfig+0x21c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d212      	bcs.n	800580c <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057e6:	4b07      	ldr	r3, [pc, #28]	; (8005804 <HAL_RCC_ClockConfig+0x21c>)
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ee:	4b05      	ldr	r3, [pc, #20]	; (8005804 <HAL_RCC_ClockConfig+0x21c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d007      	beq.n	800580c <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e072      	b.n	80058e6 <HAL_RCC_ClockConfig+0x2fe>
 8005800:	0800b4d4 	.word	0x0800b4d4
 8005804:	40023c00 	.word	0x40023c00
 8005808:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	d025      	beq.n	8005864 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d018      	beq.n	8005852 <HAL_RCC_ClockConfig+0x26a>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005828:	d013      	beq.n	8005852 <HAL_RCC_ClockConfig+0x26a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005832:	d00e      	beq.n	8005852 <HAL_RCC_ClockConfig+0x26a>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800583c:	d009      	beq.n	8005852 <HAL_RCC_ClockConfig+0x26a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005846:	d004      	beq.n	8005852 <HAL_RCC_ClockConfig+0x26a>
 8005848:	f240 21c5 	movw	r1, #709	; 0x2c5
 800584c:	4828      	ldr	r0, [pc, #160]	; (80058f0 <HAL_RCC_ClockConfig+0x308>)
 800584e:	f7fb fc06 	bl	800105e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005852:	4b28      	ldr	r3, [pc, #160]	; (80058f4 <HAL_RCC_ClockConfig+0x30c>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	4925      	ldr	r1, [pc, #148]	; (80058f4 <HAL_RCC_ClockConfig+0x30c>)
 8005860:	4313      	orrs	r3, r2
 8005862:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0308 	and.w	r3, r3, #8
 800586c:	2b00      	cmp	r3, #0
 800586e:	d026      	beq.n	80058be <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d018      	beq.n	80058aa <HAL_RCC_ClockConfig+0x2c2>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005880:	d013      	beq.n	80058aa <HAL_RCC_ClockConfig+0x2c2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800588a:	d00e      	beq.n	80058aa <HAL_RCC_ClockConfig+0x2c2>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005894:	d009      	beq.n	80058aa <HAL_RCC_ClockConfig+0x2c2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800589e:	d004      	beq.n	80058aa <HAL_RCC_ClockConfig+0x2c2>
 80058a0:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80058a4:	4812      	ldr	r0, [pc, #72]	; (80058f0 <HAL_RCC_ClockConfig+0x308>)
 80058a6:	f7fb fbda 	bl	800105e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058aa:	4b12      	ldr	r3, [pc, #72]	; (80058f4 <HAL_RCC_ClockConfig+0x30c>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	490e      	ldr	r1, [pc, #56]	; (80058f4 <HAL_RCC_ClockConfig+0x30c>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058be:	f000 f821 	bl	8005904 <HAL_RCC_GetSysClockFreq>
 80058c2:	4602      	mov	r2, r0
 80058c4:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <HAL_RCC_ClockConfig+0x30c>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	091b      	lsrs	r3, r3, #4
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	490a      	ldr	r1, [pc, #40]	; (80058f8 <HAL_RCC_ClockConfig+0x310>)
 80058d0:	5ccb      	ldrb	r3, [r1, r3]
 80058d2:	fa22 f303 	lsr.w	r3, r2, r3
 80058d6:	4a09      	ldr	r2, [pc, #36]	; (80058fc <HAL_RCC_ClockConfig+0x314>)
 80058d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058da:	4b09      	ldr	r3, [pc, #36]	; (8005900 <HAL_RCC_ClockConfig+0x318>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fb fe8c 	bl	80015fc <HAL_InitTick>

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	0800b4d4 	.word	0x0800b4d4
 80058f4:	40023800 	.word	0x40023800
 80058f8:	0800b5bc 	.word	0x0800b5bc
 80058fc:	20000000 	.word	0x20000000
 8005900:	20000004 	.word	0x20000004

08005904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005904:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800590c:	2300      	movs	r3, #0
 800590e:	607b      	str	r3, [r7, #4]
 8005910:	2300      	movs	r3, #0
 8005912:	60fb      	str	r3, [r7, #12]
 8005914:	2300      	movs	r3, #0
 8005916:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800591c:	4b67      	ldr	r3, [pc, #412]	; (8005abc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f003 030c 	and.w	r3, r3, #12
 8005924:	2b08      	cmp	r3, #8
 8005926:	d00d      	beq.n	8005944 <HAL_RCC_GetSysClockFreq+0x40>
 8005928:	2b08      	cmp	r3, #8
 800592a:	f200 80bd 	bhi.w	8005aa8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <HAL_RCC_GetSysClockFreq+0x34>
 8005932:	2b04      	cmp	r3, #4
 8005934:	d003      	beq.n	800593e <HAL_RCC_GetSysClockFreq+0x3a>
 8005936:	e0b7      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005938:	4b61      	ldr	r3, [pc, #388]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800593a:	60bb      	str	r3, [r7, #8]
       break;
 800593c:	e0b7      	b.n	8005aae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800593e:	4b61      	ldr	r3, [pc, #388]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005940:	60bb      	str	r3, [r7, #8]
      break;
 8005942:	e0b4      	b.n	8005aae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005944:	4b5d      	ldr	r3, [pc, #372]	; (8005abc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800594c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800594e:	4b5b      	ldr	r3, [pc, #364]	; (8005abc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d04d      	beq.n	80059f6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800595a:	4b58      	ldr	r3, [pc, #352]	; (8005abc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	099b      	lsrs	r3, r3, #6
 8005960:	461a      	mov	r2, r3
 8005962:	f04f 0300 	mov.w	r3, #0
 8005966:	f240 10ff 	movw	r0, #511	; 0x1ff
 800596a:	f04f 0100 	mov.w	r1, #0
 800596e:	ea02 0800 	and.w	r8, r2, r0
 8005972:	ea03 0901 	and.w	r9, r3, r1
 8005976:	4640      	mov	r0, r8
 8005978:	4649      	mov	r1, r9
 800597a:	f04f 0200 	mov.w	r2, #0
 800597e:	f04f 0300 	mov.w	r3, #0
 8005982:	014b      	lsls	r3, r1, #5
 8005984:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005988:	0142      	lsls	r2, r0, #5
 800598a:	4610      	mov	r0, r2
 800598c:	4619      	mov	r1, r3
 800598e:	ebb0 0008 	subs.w	r0, r0, r8
 8005992:	eb61 0109 	sbc.w	r1, r1, r9
 8005996:	f04f 0200 	mov.w	r2, #0
 800599a:	f04f 0300 	mov.w	r3, #0
 800599e:	018b      	lsls	r3, r1, #6
 80059a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80059a4:	0182      	lsls	r2, r0, #6
 80059a6:	1a12      	subs	r2, r2, r0
 80059a8:	eb63 0301 	sbc.w	r3, r3, r1
 80059ac:	f04f 0000 	mov.w	r0, #0
 80059b0:	f04f 0100 	mov.w	r1, #0
 80059b4:	00d9      	lsls	r1, r3, #3
 80059b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059ba:	00d0      	lsls	r0, r2, #3
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	eb12 0208 	adds.w	r2, r2, r8
 80059c4:	eb43 0309 	adc.w	r3, r3, r9
 80059c8:	f04f 0000 	mov.w	r0, #0
 80059cc:	f04f 0100 	mov.w	r1, #0
 80059d0:	0259      	lsls	r1, r3, #9
 80059d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80059d6:	0250      	lsls	r0, r2, #9
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	4610      	mov	r0, r2
 80059de:	4619      	mov	r1, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	461a      	mov	r2, r3
 80059e4:	f04f 0300 	mov.w	r3, #0
 80059e8:	f7fa fbf6 	bl	80001d8 <__aeabi_uldivmod>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4613      	mov	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	e04a      	b.n	8005a8c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059f6:	4b31      	ldr	r3, [pc, #196]	; (8005abc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	099b      	lsrs	r3, r3, #6
 80059fc:	461a      	mov	r2, r3
 80059fe:	f04f 0300 	mov.w	r3, #0
 8005a02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a06:	f04f 0100 	mov.w	r1, #0
 8005a0a:	ea02 0400 	and.w	r4, r2, r0
 8005a0e:	ea03 0501 	and.w	r5, r3, r1
 8005a12:	4620      	mov	r0, r4
 8005a14:	4629      	mov	r1, r5
 8005a16:	f04f 0200 	mov.w	r2, #0
 8005a1a:	f04f 0300 	mov.w	r3, #0
 8005a1e:	014b      	lsls	r3, r1, #5
 8005a20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005a24:	0142      	lsls	r2, r0, #5
 8005a26:	4610      	mov	r0, r2
 8005a28:	4619      	mov	r1, r3
 8005a2a:	1b00      	subs	r0, r0, r4
 8005a2c:	eb61 0105 	sbc.w	r1, r1, r5
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	f04f 0300 	mov.w	r3, #0
 8005a38:	018b      	lsls	r3, r1, #6
 8005a3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a3e:	0182      	lsls	r2, r0, #6
 8005a40:	1a12      	subs	r2, r2, r0
 8005a42:	eb63 0301 	sbc.w	r3, r3, r1
 8005a46:	f04f 0000 	mov.w	r0, #0
 8005a4a:	f04f 0100 	mov.w	r1, #0
 8005a4e:	00d9      	lsls	r1, r3, #3
 8005a50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a54:	00d0      	lsls	r0, r2, #3
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	1912      	adds	r2, r2, r4
 8005a5c:	eb45 0303 	adc.w	r3, r5, r3
 8005a60:	f04f 0000 	mov.w	r0, #0
 8005a64:	f04f 0100 	mov.w	r1, #0
 8005a68:	0299      	lsls	r1, r3, #10
 8005a6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005a6e:	0290      	lsls	r0, r2, #10
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4610      	mov	r0, r2
 8005a76:	4619      	mov	r1, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f04f 0300 	mov.w	r3, #0
 8005a80:	f7fa fbaa 	bl	80001d8 <__aeabi_uldivmod>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	4613      	mov	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a8c:	4b0b      	ldr	r3, [pc, #44]	; (8005abc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	0c1b      	lsrs	r3, r3, #16
 8005a92:	f003 0303 	and.w	r3, r3, #3
 8005a96:	3301      	adds	r3, #1
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa4:	60bb      	str	r3, [r7, #8]
      break;
 8005aa6:	e002      	b.n	8005aae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005aaa:	60bb      	str	r3, [r7, #8]
      break;
 8005aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005aae:	68bb      	ldr	r3, [r7, #8]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005aba:	bf00      	nop
 8005abc:	40023800 	.word	0x40023800
 8005ac0:	00f42400 	.word	0x00f42400
 8005ac4:	007a1200 	.word	0x007a1200

08005ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005acc:	4b03      	ldr	r3, [pc, #12]	; (8005adc <HAL_RCC_GetHCLKFreq+0x14>)
 8005ace:	681b      	ldr	r3, [r3, #0]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	20000000 	.word	0x20000000

08005ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ae4:	f7ff fff0 	bl	8005ac8 <HAL_RCC_GetHCLKFreq>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	0a9b      	lsrs	r3, r3, #10
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	4903      	ldr	r1, [pc, #12]	; (8005b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005af6:	5ccb      	ldrb	r3, [r1, r3]
 8005af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	40023800 	.word	0x40023800
 8005b04:	0800b5cc 	.word	0x0800b5cc

08005b08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e18c      	b.n	8005e34 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a75      	ldr	r2, [pc, #468]	; (8005cf4 <HAL_SPI_Init+0x1ec>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d018      	beq.n	8005b56 <HAL_SPI_Init+0x4e>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a73      	ldr	r2, [pc, #460]	; (8005cf8 <HAL_SPI_Init+0x1f0>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d013      	beq.n	8005b56 <HAL_SPI_Init+0x4e>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a72      	ldr	r2, [pc, #456]	; (8005cfc <HAL_SPI_Init+0x1f4>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d00e      	beq.n	8005b56 <HAL_SPI_Init+0x4e>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a70      	ldr	r2, [pc, #448]	; (8005d00 <HAL_SPI_Init+0x1f8>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d009      	beq.n	8005b56 <HAL_SPI_Init+0x4e>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a6f      	ldr	r2, [pc, #444]	; (8005d04 <HAL_SPI_Init+0x1fc>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d004      	beq.n	8005b56 <HAL_SPI_Init+0x4e>
 8005b4c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8005b50:	486d      	ldr	r0, [pc, #436]	; (8005d08 <HAL_SPI_Init+0x200>)
 8005b52:	f7fb fa84 	bl	800105e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d009      	beq.n	8005b72 <HAL_SPI_Init+0x6a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b66:	d004      	beq.n	8005b72 <HAL_SPI_Init+0x6a>
 8005b68:	f240 1143 	movw	r1, #323	; 0x143
 8005b6c:	4866      	ldr	r0, [pc, #408]	; (8005d08 <HAL_SPI_Init+0x200>)
 8005b6e:	f7fb fa76 	bl	800105e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00e      	beq.n	8005b98 <HAL_SPI_Init+0x90>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b82:	d009      	beq.n	8005b98 <HAL_SPI_Init+0x90>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b8c:	d004      	beq.n	8005b98 <HAL_SPI_Init+0x90>
 8005b8e:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8005b92:	485d      	ldr	r0, [pc, #372]	; (8005d08 <HAL_SPI_Init+0x200>)
 8005b94:	f7fb fa63 	bl	800105e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ba0:	d008      	beq.n	8005bb4 <HAL_SPI_Init+0xac>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d004      	beq.n	8005bb4 <HAL_SPI_Init+0xac>
 8005baa:	f240 1145 	movw	r1, #325	; 0x145
 8005bae:	4856      	ldr	r0, [pc, #344]	; (8005d08 <HAL_SPI_Init+0x200>)
 8005bb0:	f7fb fa55 	bl	800105e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bbc:	d00d      	beq.n	8005bda <HAL_SPI_Init+0xd2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d009      	beq.n	8005bda <HAL_SPI_Init+0xd2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bce:	d004      	beq.n	8005bda <HAL_SPI_Init+0xd2>
 8005bd0:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005bd4:	484c      	ldr	r0, [pc, #304]	; (8005d08 <HAL_SPI_Init+0x200>)
 8005bd6:	f7fb fa42 	bl	800105e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d020      	beq.n	8005c24 <HAL_SPI_Init+0x11c>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	2b08      	cmp	r3, #8
 8005be8:	d01c      	beq.n	8005c24 <HAL_SPI_Init+0x11c>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	2b10      	cmp	r3, #16
 8005bf0:	d018      	beq.n	8005c24 <HAL_SPI_Init+0x11c>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	2b18      	cmp	r3, #24
 8005bf8:	d014      	beq.n	8005c24 <HAL_SPI_Init+0x11c>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	2b20      	cmp	r3, #32
 8005c00:	d010      	beq.n	8005c24 <HAL_SPI_Init+0x11c>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	2b28      	cmp	r3, #40	; 0x28
 8005c08:	d00c      	beq.n	8005c24 <HAL_SPI_Init+0x11c>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	2b30      	cmp	r3, #48	; 0x30
 8005c10:	d008      	beq.n	8005c24 <HAL_SPI_Init+0x11c>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	2b38      	cmp	r3, #56	; 0x38
 8005c18:	d004      	beq.n	8005c24 <HAL_SPI_Init+0x11c>
 8005c1a:	f240 1147 	movw	r1, #327	; 0x147
 8005c1e:	483a      	ldr	r0, [pc, #232]	; (8005d08 <HAL_SPI_Init+0x200>)
 8005c20:	f7fb fa1d 	bl	800105e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d008      	beq.n	8005c3e <HAL_SPI_Init+0x136>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	2b80      	cmp	r3, #128	; 0x80
 8005c32:	d004      	beq.n	8005c3e <HAL_SPI_Init+0x136>
 8005c34:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005c38:	4833      	ldr	r0, [pc, #204]	; (8005d08 <HAL_SPI_Init+0x200>)
 8005c3a:	f7fb fa10 	bl	800105e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d008      	beq.n	8005c58 <HAL_SPI_Init+0x150>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	2b10      	cmp	r3, #16
 8005c4c:	d004      	beq.n	8005c58 <HAL_SPI_Init+0x150>
 8005c4e:	f240 1149 	movw	r1, #329	; 0x149
 8005c52:	482d      	ldr	r0, [pc, #180]	; (8005d08 <HAL_SPI_Init+0x200>)
 8005c54:	f7fb fa03 	bl	800105e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d155      	bne.n	8005d0c <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d008      	beq.n	8005c7a <HAL_SPI_Init+0x172>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d004      	beq.n	8005c7a <HAL_SPI_Init+0x172>
 8005c70:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8005c74:	4824      	ldr	r0, [pc, #144]	; (8005d08 <HAL_SPI_Init+0x200>)
 8005c76:	f7fb f9f2 	bl	800105e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d008      	beq.n	8005c94 <HAL_SPI_Init+0x18c>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d004      	beq.n	8005c94 <HAL_SPI_Init+0x18c>
 8005c8a:	f240 114d 	movw	r1, #333	; 0x14d
 8005c8e:	481e      	ldr	r0, [pc, #120]	; (8005d08 <HAL_SPI_Init+0x200>)
 8005c90:	f7fb f9e5 	bl	800105e <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c9c:	d125      	bne.n	8005cea <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d05d      	beq.n	8005d62 <HAL_SPI_Init+0x25a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	2b08      	cmp	r3, #8
 8005cac:	d059      	beq.n	8005d62 <HAL_SPI_Init+0x25a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	2b10      	cmp	r3, #16
 8005cb4:	d055      	beq.n	8005d62 <HAL_SPI_Init+0x25a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	2b18      	cmp	r3, #24
 8005cbc:	d051      	beq.n	8005d62 <HAL_SPI_Init+0x25a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	2b20      	cmp	r3, #32
 8005cc4:	d04d      	beq.n	8005d62 <HAL_SPI_Init+0x25a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	2b28      	cmp	r3, #40	; 0x28
 8005ccc:	d049      	beq.n	8005d62 <HAL_SPI_Init+0x25a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	2b30      	cmp	r3, #48	; 0x30
 8005cd4:	d045      	beq.n	8005d62 <HAL_SPI_Init+0x25a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	2b38      	cmp	r3, #56	; 0x38
 8005cdc:	d041      	beq.n	8005d62 <HAL_SPI_Init+0x25a>
 8005cde:	f240 1151 	movw	r1, #337	; 0x151
 8005ce2:	4809      	ldr	r0, [pc, #36]	; (8005d08 <HAL_SPI_Init+0x200>)
 8005ce4:	f7fb f9bb 	bl	800105e <assert_failed>
 8005ce8:	e03b      	b.n	8005d62 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	61da      	str	r2, [r3, #28]
 8005cf0:	e037      	b.n	8005d62 <HAL_SPI_Init+0x25a>
 8005cf2:	bf00      	nop
 8005cf4:	40013000 	.word	0x40013000
 8005cf8:	40003800 	.word	0x40003800
 8005cfc:	40003c00 	.word	0x40003c00
 8005d00:	40013400 	.word	0x40013400
 8005d04:	40015000 	.word	0x40015000
 8005d08:	0800b50c 	.word	0x0800b50c
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d020      	beq.n	8005d56 <HAL_SPI_Init+0x24e>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d01c      	beq.n	8005d56 <HAL_SPI_Init+0x24e>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	69db      	ldr	r3, [r3, #28]
 8005d20:	2b10      	cmp	r3, #16
 8005d22:	d018      	beq.n	8005d56 <HAL_SPI_Init+0x24e>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	2b18      	cmp	r3, #24
 8005d2a:	d014      	beq.n	8005d56 <HAL_SPI_Init+0x24e>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	69db      	ldr	r3, [r3, #28]
 8005d30:	2b20      	cmp	r3, #32
 8005d32:	d010      	beq.n	8005d56 <HAL_SPI_Init+0x24e>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	2b28      	cmp	r3, #40	; 0x28
 8005d3a:	d00c      	beq.n	8005d56 <HAL_SPI_Init+0x24e>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	2b30      	cmp	r3, #48	; 0x30
 8005d42:	d008      	beq.n	8005d56 <HAL_SPI_Init+0x24e>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	2b38      	cmp	r3, #56	; 0x38
 8005d4a:	d004      	beq.n	8005d56 <HAL_SPI_Init+0x24e>
 8005d4c:	f240 115b 	movw	r1, #347	; 0x15b
 8005d50:	483a      	ldr	r0, [pc, #232]	; (8005e3c <HAL_SPI_Init+0x334>)
 8005d52:	f7fb f984 	bl	800105e <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d106      	bne.n	8005d82 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7fb f9af 	bl	80010e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2202      	movs	r2, #2
 8005d86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d98:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de6:	ea42 0103 	orr.w	r1, r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	0c1b      	lsrs	r3, r3, #16
 8005e00:	f003 0104 	and.w	r1, r3, #4
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	f003 0210 	and.w	r2, r3, #16
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	69da      	ldr	r2, [r3, #28]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	0800b50c 	.word	0x0800b50c

08005e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e0a7      	b.n	8005fa2 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a55      	ldr	r2, [pc, #340]	; (8005fac <HAL_TIM_Base_Init+0x16c>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d027      	beq.n	8005eac <HAL_TIM_Base_Init+0x6c>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e64:	d022      	beq.n	8005eac <HAL_TIM_Base_Init+0x6c>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a51      	ldr	r2, [pc, #324]	; (8005fb0 <HAL_TIM_Base_Init+0x170>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d01d      	beq.n	8005eac <HAL_TIM_Base_Init+0x6c>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a4f      	ldr	r2, [pc, #316]	; (8005fb4 <HAL_TIM_Base_Init+0x174>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d018      	beq.n	8005eac <HAL_TIM_Base_Init+0x6c>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a4e      	ldr	r2, [pc, #312]	; (8005fb8 <HAL_TIM_Base_Init+0x178>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d013      	beq.n	8005eac <HAL_TIM_Base_Init+0x6c>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a4c      	ldr	r2, [pc, #304]	; (8005fbc <HAL_TIM_Base_Init+0x17c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00e      	beq.n	8005eac <HAL_TIM_Base_Init+0x6c>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a4b      	ldr	r2, [pc, #300]	; (8005fc0 <HAL_TIM_Base_Init+0x180>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d009      	beq.n	8005eac <HAL_TIM_Base_Init+0x6c>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a49      	ldr	r2, [pc, #292]	; (8005fc4 <HAL_TIM_Base_Init+0x184>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d004      	beq.n	8005eac <HAL_TIM_Base_Init+0x6c>
 8005ea2:	f240 1113 	movw	r1, #275	; 0x113
 8005ea6:	4848      	ldr	r0, [pc, #288]	; (8005fc8 <HAL_TIM_Base_Init+0x188>)
 8005ea8:	f7fb f8d9 	bl	800105e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d014      	beq.n	8005ede <HAL_TIM_Base_Init+0x9e>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	2b10      	cmp	r3, #16
 8005eba:	d010      	beq.n	8005ede <HAL_TIM_Base_Init+0x9e>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	2b20      	cmp	r3, #32
 8005ec2:	d00c      	beq.n	8005ede <HAL_TIM_Base_Init+0x9e>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	2b40      	cmp	r3, #64	; 0x40
 8005eca:	d008      	beq.n	8005ede <HAL_TIM_Base_Init+0x9e>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	2b60      	cmp	r3, #96	; 0x60
 8005ed2:	d004      	beq.n	8005ede <HAL_TIM_Base_Init+0x9e>
 8005ed4:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005ed8:	483b      	ldr	r0, [pc, #236]	; (8005fc8 <HAL_TIM_Base_Init+0x188>)
 8005eda:	f7fb f8c0 	bl	800105e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00e      	beq.n	8005f04 <HAL_TIM_Base_Init+0xc4>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eee:	d009      	beq.n	8005f04 <HAL_TIM_Base_Init+0xc4>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef8:	d004      	beq.n	8005f04 <HAL_TIM_Base_Init+0xc4>
 8005efa:	f240 1115 	movw	r1, #277	; 0x115
 8005efe:	4832      	ldr	r0, [pc, #200]	; (8005fc8 <HAL_TIM_Base_Init+0x188>)
 8005f00:	f7fb f8ad 	bl	800105e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d008      	beq.n	8005f1e <HAL_TIM_Base_Init+0xde>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	2b80      	cmp	r3, #128	; 0x80
 8005f12:	d004      	beq.n	8005f1e <HAL_TIM_Base_Init+0xde>
 8005f14:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005f18:	482b      	ldr	r0, [pc, #172]	; (8005fc8 <HAL_TIM_Base_Init+0x188>)
 8005f1a:	f7fb f8a0 	bl	800105e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d106      	bne.n	8005f38 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7fb fa88 	bl	8001448 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3304      	adds	r3, #4
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	f001 fa2c 	bl	80073a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	40010000 	.word	0x40010000
 8005fb0:	40000400 	.word	0x40000400
 8005fb4:	40000800 	.word	0x40000800
 8005fb8:	40000c00 	.word	0x40000c00
 8005fbc:	40014000 	.word	0x40014000
 8005fc0:	40014400 	.word	0x40014400
 8005fc4:	40014800 	.word	0x40014800
 8005fc8:	0800b544 	.word	0x0800b544

08005fcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e0a7      	b.n	800612e <HAL_TIM_PWM_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a55      	ldr	r2, [pc, #340]	; (8006138 <HAL_TIM_PWM_Init+0x16c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d027      	beq.n	8006038 <HAL_TIM_PWM_Init+0x6c>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff0:	d022      	beq.n	8006038 <HAL_TIM_PWM_Init+0x6c>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a51      	ldr	r2, [pc, #324]	; (800613c <HAL_TIM_PWM_Init+0x170>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d01d      	beq.n	8006038 <HAL_TIM_PWM_Init+0x6c>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a4f      	ldr	r2, [pc, #316]	; (8006140 <HAL_TIM_PWM_Init+0x174>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d018      	beq.n	8006038 <HAL_TIM_PWM_Init+0x6c>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a4e      	ldr	r2, [pc, #312]	; (8006144 <HAL_TIM_PWM_Init+0x178>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d013      	beq.n	8006038 <HAL_TIM_PWM_Init+0x6c>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a4c      	ldr	r2, [pc, #304]	; (8006148 <HAL_TIM_PWM_Init+0x17c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00e      	beq.n	8006038 <HAL_TIM_PWM_Init+0x6c>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a4b      	ldr	r2, [pc, #300]	; (800614c <HAL_TIM_PWM_Init+0x180>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d009      	beq.n	8006038 <HAL_TIM_PWM_Init+0x6c>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a49      	ldr	r2, [pc, #292]	; (8006150 <HAL_TIM_PWM_Init+0x184>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d004      	beq.n	8006038 <HAL_TIM_PWM_Init+0x6c>
 800602e:	f240 5129 	movw	r1, #1321	; 0x529
 8006032:	4848      	ldr	r0, [pc, #288]	; (8006154 <HAL_TIM_PWM_Init+0x188>)
 8006034:	f7fb f813 	bl	800105e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d014      	beq.n	800606a <HAL_TIM_PWM_Init+0x9e>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	2b10      	cmp	r3, #16
 8006046:	d010      	beq.n	800606a <HAL_TIM_PWM_Init+0x9e>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	2b20      	cmp	r3, #32
 800604e:	d00c      	beq.n	800606a <HAL_TIM_PWM_Init+0x9e>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	2b40      	cmp	r3, #64	; 0x40
 8006056:	d008      	beq.n	800606a <HAL_TIM_PWM_Init+0x9e>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	2b60      	cmp	r3, #96	; 0x60
 800605e:	d004      	beq.n	800606a <HAL_TIM_PWM_Init+0x9e>
 8006060:	f240 512a 	movw	r1, #1322	; 0x52a
 8006064:	483b      	ldr	r0, [pc, #236]	; (8006154 <HAL_TIM_PWM_Init+0x188>)
 8006066:	f7fa fffa 	bl	800105e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00e      	beq.n	8006090 <HAL_TIM_PWM_Init+0xc4>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800607a:	d009      	beq.n	8006090 <HAL_TIM_PWM_Init+0xc4>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006084:	d004      	beq.n	8006090 <HAL_TIM_PWM_Init+0xc4>
 8006086:	f240 512b 	movw	r1, #1323	; 0x52b
 800608a:	4832      	ldr	r0, [pc, #200]	; (8006154 <HAL_TIM_PWM_Init+0x188>)
 800608c:	f7fa ffe7 	bl	800105e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d008      	beq.n	80060aa <HAL_TIM_PWM_Init+0xde>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	2b80      	cmp	r3, #128	; 0x80
 800609e:	d004      	beq.n	80060aa <HAL_TIM_PWM_Init+0xde>
 80060a0:	f240 512c 	movw	r1, #1324	; 0x52c
 80060a4:	482b      	ldr	r0, [pc, #172]	; (8006154 <HAL_TIM_PWM_Init+0x188>)
 80060a6:	f7fa ffda 	bl	800105e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d106      	bne.n	80060c4 <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f84a 	bl	8006158 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3304      	adds	r3, #4
 80060d4:	4619      	mov	r1, r3
 80060d6:	4610      	mov	r0, r2
 80060d8:	f001 f966 	bl	80073a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	40010000 	.word	0x40010000
 800613c:	40000400 	.word	0x40000400
 8006140:	40000800 	.word	0x40000800
 8006144:	40000c00 	.word	0x40000c00
 8006148:	40014000 	.word	0x40014000
 800614c:	40014400 	.word	0x40014400
 8006150:	40014800 	.word	0x40014800
 8006154:	0800b544 	.word	0x0800b544

08006158 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a9e      	ldr	r2, [pc, #632]	; (80063fc <HAL_TIM_PWM_Start_DMA+0x290>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d10b      	bne.n	80061a0 <HAL_TIM_PWM_Start_DMA+0x34>
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d06c      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2b04      	cmp	r3, #4
 8006192:	d069      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b08      	cmp	r3, #8
 8006198:	d066      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2b0c      	cmp	r3, #12
 800619e:	d063      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a8:	d10b      	bne.n	80061c2 <HAL_TIM_PWM_Start_DMA+0x56>
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d05b      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d058      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d055      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2b0c      	cmp	r3, #12
 80061c0:	d052      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a8e      	ldr	r2, [pc, #568]	; (8006400 <HAL_TIM_PWM_Start_DMA+0x294>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d10b      	bne.n	80061e4 <HAL_TIM_PWM_Start_DMA+0x78>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d04a      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2b04      	cmp	r3, #4
 80061d6:	d047      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2b08      	cmp	r3, #8
 80061dc:	d044      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2b0c      	cmp	r3, #12
 80061e2:	d041      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a86      	ldr	r2, [pc, #536]	; (8006404 <HAL_TIM_PWM_Start_DMA+0x298>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d10b      	bne.n	8006206 <HAL_TIM_PWM_Start_DMA+0x9a>
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d039      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d036      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d033      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2b0c      	cmp	r3, #12
 8006204:	d030      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a7f      	ldr	r2, [pc, #508]	; (8006408 <HAL_TIM_PWM_Start_DMA+0x29c>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d10b      	bne.n	8006228 <HAL_TIM_PWM_Start_DMA+0xbc>
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d028      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b04      	cmp	r3, #4
 800621a:	d025      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b08      	cmp	r3, #8
 8006220:	d022      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2b0c      	cmp	r3, #12
 8006226:	d01f      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a77      	ldr	r2, [pc, #476]	; (800640c <HAL_TIM_PWM_Start_DMA+0x2a0>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d105      	bne.n	800623e <HAL_TIM_PWM_Start_DMA+0xd2>
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d017      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b04      	cmp	r3, #4
 800623c:	d014      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a73      	ldr	r2, [pc, #460]	; (8006410 <HAL_TIM_PWM_Start_DMA+0x2a4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d102      	bne.n	800624e <HAL_TIM_PWM_Start_DMA+0xe2>
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00c      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a70      	ldr	r2, [pc, #448]	; (8006414 <HAL_TIM_PWM_Start_DMA+0x2a8>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d102      	bne.n	800625e <HAL_TIM_PWM_Start_DMA+0xf2>
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d004      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0xfc>
 800625e:	f240 61b3 	movw	r1, #1715	; 0x6b3
 8006262:	486d      	ldr	r0, [pc, #436]	; (8006418 <HAL_TIM_PWM_Start_DMA+0x2ac>)
 8006264:	f7fa fefb 	bl	800105e <assert_failed>

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d109      	bne.n	8006282 <HAL_TIM_PWM_Start_DMA+0x116>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b02      	cmp	r3, #2
 8006278:	bf0c      	ite	eq
 800627a:	2301      	moveq	r3, #1
 800627c:	2300      	movne	r3, #0
 800627e:	b2db      	uxtb	r3, r3
 8006280:	e022      	b.n	80062c8 <HAL_TIM_PWM_Start_DMA+0x15c>
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b04      	cmp	r3, #4
 8006286:	d109      	bne.n	800629c <HAL_TIM_PWM_Start_DMA+0x130>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b02      	cmp	r3, #2
 8006292:	bf0c      	ite	eq
 8006294:	2301      	moveq	r3, #1
 8006296:	2300      	movne	r3, #0
 8006298:	b2db      	uxtb	r3, r3
 800629a:	e015      	b.n	80062c8 <HAL_TIM_PWM_Start_DMA+0x15c>
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2b08      	cmp	r3, #8
 80062a0:	d109      	bne.n	80062b6 <HAL_TIM_PWM_Start_DMA+0x14a>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	bf0c      	ite	eq
 80062ae:	2301      	moveq	r3, #1
 80062b0:	2300      	movne	r3, #0
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	e008      	b.n	80062c8 <HAL_TIM_PWM_Start_DMA+0x15c>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b02      	cmp	r3, #2
 80062c0:	bf0c      	ite	eq
 80062c2:	2301      	moveq	r3, #1
 80062c4:	2300      	movne	r3, #0
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <HAL_TIM_PWM_Start_DMA+0x164>
  {
    return HAL_BUSY;
 80062cc:	2302      	movs	r3, #2
 80062ce:	e173      	b.n	80065b8 <HAL_TIM_PWM_Start_DMA+0x44c>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d109      	bne.n	80062ea <HAL_TIM_PWM_Start_DMA+0x17e>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b01      	cmp	r3, #1
 80062e0:	bf0c      	ite	eq
 80062e2:	2301      	moveq	r3, #1
 80062e4:	2300      	movne	r3, #0
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	e022      	b.n	8006330 <HAL_TIM_PWM_Start_DMA+0x1c4>
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	d109      	bne.n	8006304 <HAL_TIM_PWM_Start_DMA+0x198>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	bf0c      	ite	eq
 80062fc:	2301      	moveq	r3, #1
 80062fe:	2300      	movne	r3, #0
 8006300:	b2db      	uxtb	r3, r3
 8006302:	e015      	b.n	8006330 <HAL_TIM_PWM_Start_DMA+0x1c4>
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2b08      	cmp	r3, #8
 8006308:	d109      	bne.n	800631e <HAL_TIM_PWM_Start_DMA+0x1b2>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b01      	cmp	r3, #1
 8006314:	bf0c      	ite	eq
 8006316:	2301      	moveq	r3, #1
 8006318:	2300      	movne	r3, #0
 800631a:	b2db      	uxtb	r3, r3
 800631c:	e008      	b.n	8006330 <HAL_TIM_PWM_Start_DMA+0x1c4>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b01      	cmp	r3, #1
 8006328:	bf0c      	ite	eq
 800632a:	2301      	moveq	r3, #1
 800632c:	2300      	movne	r3, #0
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d024      	beq.n	800637e <HAL_TIM_PWM_Start_DMA+0x212>
  {
    if ((pData == NULL) && (Length > 0U))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d104      	bne.n	8006344 <HAL_TIM_PWM_Start_DMA+0x1d8>
 800633a:	887b      	ldrh	r3, [r7, #2]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <HAL_TIM_PWM_Start_DMA+0x1d8>
    {
      return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e139      	b.n	80065b8 <HAL_TIM_PWM_Start_DMA+0x44c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d104      	bne.n	8006354 <HAL_TIM_PWM_Start_DMA+0x1e8>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2202      	movs	r2, #2
 800634e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006352:	e016      	b.n	8006382 <HAL_TIM_PWM_Start_DMA+0x216>
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2b04      	cmp	r3, #4
 8006358:	d104      	bne.n	8006364 <HAL_TIM_PWM_Start_DMA+0x1f8>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2202      	movs	r2, #2
 800635e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006362:	e00e      	b.n	8006382 <HAL_TIM_PWM_Start_DMA+0x216>
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2b08      	cmp	r3, #8
 8006368:	d104      	bne.n	8006374 <HAL_TIM_PWM_Start_DMA+0x208>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2202      	movs	r2, #2
 800636e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006372:	e006      	b.n	8006382 <HAL_TIM_PWM_Start_DMA+0x216>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800637c:	e001      	b.n	8006382 <HAL_TIM_PWM_Start_DMA+0x216>
    }
  }
  else
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e11a      	b.n	80065b8 <HAL_TIM_PWM_Start_DMA+0x44c>
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	2b0c      	cmp	r3, #12
 8006386:	f200 80c4 	bhi.w	8006512 <HAL_TIM_PWM_Start_DMA+0x3a6>
 800638a:	a201      	add	r2, pc, #4	; (adr r2, 8006390 <HAL_TIM_PWM_Start_DMA+0x224>)
 800638c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006390:	080063c5 	.word	0x080063c5
 8006394:	08006513 	.word	0x08006513
 8006398:	08006513 	.word	0x08006513
 800639c:	08006513 	.word	0x08006513
 80063a0:	0800643b 	.word	0x0800643b
 80063a4:	08006513 	.word	0x08006513
 80063a8:	08006513 	.word	0x08006513
 80063ac:	08006513 	.word	0x08006513
 80063b0:	08006483 	.word	0x08006483
 80063b4:	08006513 	.word	0x08006513
 80063b8:	08006513 	.word	0x08006513
 80063bc:	08006513 	.word	0x08006513
 80063c0:	080064cb 	.word	0x080064cb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	4a14      	ldr	r2, [pc, #80]	; (800641c <HAL_TIM_PWM_Start_DMA+0x2b0>)
 80063ca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	4a13      	ldr	r2, [pc, #76]	; (8006420 <HAL_TIM_PWM_Start_DMA+0x2b4>)
 80063d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	4a12      	ldr	r2, [pc, #72]	; (8006424 <HAL_TIM_PWM_Start_DMA+0x2b8>)
 80063da:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80063e0:	6879      	ldr	r1, [r7, #4]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3334      	adds	r3, #52	; 0x34
 80063e8:	461a      	mov	r2, r3
 80063ea:	887b      	ldrh	r3, [r7, #2]
 80063ec:	f7fc f8b4 	bl	8002558 <HAL_DMA_Start_IT>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d018      	beq.n	8006428 <HAL_TIM_PWM_Start_DMA+0x2bc>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e0de      	b.n	80065b8 <HAL_TIM_PWM_Start_DMA+0x44c>
 80063fa:	bf00      	nop
 80063fc:	40010000 	.word	0x40010000
 8006400:	40000400 	.word	0x40000400
 8006404:	40000800 	.word	0x40000800
 8006408:	40000c00 	.word	0x40000c00
 800640c:	40014000 	.word	0x40014000
 8006410:	40014400 	.word	0x40014400
 8006414:	40014800 	.word	0x40014800
 8006418:	0800b544 	.word	0x0800b544
 800641c:	08007297 	.word	0x08007297
 8006420:	0800733f 	.word	0x0800733f
 8006424:	08007205 	.word	0x08007205
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006436:	60da      	str	r2, [r3, #12]
      break;
 8006438:	e06e      	b.n	8006518 <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643e:	4a60      	ldr	r2, [pc, #384]	; (80065c0 <HAL_TIM_PWM_Start_DMA+0x454>)
 8006440:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006446:	4a5f      	ldr	r2, [pc, #380]	; (80065c4 <HAL_TIM_PWM_Start_DMA+0x458>)
 8006448:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644e:	4a5e      	ldr	r2, [pc, #376]	; (80065c8 <HAL_TIM_PWM_Start_DMA+0x45c>)
 8006450:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006456:	6879      	ldr	r1, [r7, #4]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3338      	adds	r3, #56	; 0x38
 800645e:	461a      	mov	r2, r3
 8006460:	887b      	ldrh	r3, [r7, #2]
 8006462:	f7fc f879 	bl	8002558 <HAL_DMA_Start_IT>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <HAL_TIM_PWM_Start_DMA+0x304>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e0a3      	b.n	80065b8 <HAL_TIM_PWM_Start_DMA+0x44c>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800647e:	60da      	str	r2, [r3, #12]
      break;
 8006480:	e04a      	b.n	8006518 <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006486:	4a4e      	ldr	r2, [pc, #312]	; (80065c0 <HAL_TIM_PWM_Start_DMA+0x454>)
 8006488:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648e:	4a4d      	ldr	r2, [pc, #308]	; (80065c4 <HAL_TIM_PWM_Start_DMA+0x458>)
 8006490:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006496:	4a4c      	ldr	r2, [pc, #304]	; (80065c8 <HAL_TIM_PWM_Start_DMA+0x45c>)
 8006498:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800649e:	6879      	ldr	r1, [r7, #4]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	333c      	adds	r3, #60	; 0x3c
 80064a6:	461a      	mov	r2, r3
 80064a8:	887b      	ldrh	r3, [r7, #2]
 80064aa:	f7fc f855 	bl	8002558 <HAL_DMA_Start_IT>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d001      	beq.n	80064b8 <HAL_TIM_PWM_Start_DMA+0x34c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e07f      	b.n	80065b8 <HAL_TIM_PWM_Start_DMA+0x44c>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064c6:	60da      	str	r2, [r3, #12]
      break;
 80064c8:	e026      	b.n	8006518 <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ce:	4a3c      	ldr	r2, [pc, #240]	; (80065c0 <HAL_TIM_PWM_Start_DMA+0x454>)
 80064d0:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d6:	4a3b      	ldr	r2, [pc, #236]	; (80065c4 <HAL_TIM_PWM_Start_DMA+0x458>)
 80064d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064de:	4a3a      	ldr	r2, [pc, #232]	; (80065c8 <HAL_TIM_PWM_Start_DMA+0x45c>)
 80064e0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3340      	adds	r3, #64	; 0x40
 80064ee:	461a      	mov	r2, r3
 80064f0:	887b      	ldrh	r3, [r7, #2]
 80064f2:	f7fc f831 	bl	8002558 <HAL_DMA_Start_IT>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <HAL_TIM_PWM_Start_DMA+0x394>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e05b      	b.n	80065b8 <HAL_TIM_PWM_Start_DMA+0x44c>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800650e:	60da      	str	r2, [r3, #12]
      break;
 8006510:	e002      	b.n	8006518 <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    default:
      status = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	75fb      	strb	r3, [r7, #23]
      break;
 8006516:	bf00      	nop
  }

  if (status == HAL_OK)
 8006518:	7dfb      	ldrb	r3, [r7, #23]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d14b      	bne.n	80065b6 <HAL_TIM_PWM_Start_DMA+0x44a>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2201      	movs	r2, #1
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	4618      	mov	r0, r3
 8006528:	f001 fa6e 	bl	8007a08 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a26      	ldr	r2, [pc, #152]	; (80065cc <HAL_TIM_PWM_Start_DMA+0x460>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d107      	bne.n	8006546 <HAL_TIM_PWM_Start_DMA+0x3da>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006544:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a20      	ldr	r2, [pc, #128]	; (80065cc <HAL_TIM_PWM_Start_DMA+0x460>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d018      	beq.n	8006582 <HAL_TIM_PWM_Start_DMA+0x416>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006558:	d013      	beq.n	8006582 <HAL_TIM_PWM_Start_DMA+0x416>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a1c      	ldr	r2, [pc, #112]	; (80065d0 <HAL_TIM_PWM_Start_DMA+0x464>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00e      	beq.n	8006582 <HAL_TIM_PWM_Start_DMA+0x416>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a1a      	ldr	r2, [pc, #104]	; (80065d4 <HAL_TIM_PWM_Start_DMA+0x468>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d009      	beq.n	8006582 <HAL_TIM_PWM_Start_DMA+0x416>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a19      	ldr	r2, [pc, #100]	; (80065d8 <HAL_TIM_PWM_Start_DMA+0x46c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d004      	beq.n	8006582 <HAL_TIM_PWM_Start_DMA+0x416>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a17      	ldr	r2, [pc, #92]	; (80065dc <HAL_TIM_PWM_Start_DMA+0x470>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d111      	bne.n	80065a6 <HAL_TIM_PWM_Start_DMA+0x43a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	2b06      	cmp	r3, #6
 8006592:	d010      	beq.n	80065b6 <HAL_TIM_PWM_Start_DMA+0x44a>
      {
        __HAL_TIM_ENABLE(htim);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f042 0201 	orr.w	r2, r2, #1
 80065a2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065a4:	e007      	b.n	80065b6 <HAL_TIM_PWM_Start_DMA+0x44a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f042 0201 	orr.w	r2, r2, #1
 80065b4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80065b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3718      	adds	r7, #24
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	08007297 	.word	0x08007297
 80065c4:	0800733f 	.word	0x0800733f
 80065c8:	08007205 	.word	0x08007205
 80065cc:	40010000 	.word	0x40010000
 80065d0:	40000400 	.word	0x40000400
 80065d4:	40000800 	.word	0x40000800
 80065d8:	40000c00 	.word	0x40000c00
 80065dc:	40014000 	.word	0x40014000

080065e0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a97      	ldr	r2, [pc, #604]	; (8006850 <HAL_TIM_PWM_Stop_DMA+0x270>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d10b      	bne.n	8006610 <HAL_TIM_PWM_Stop_DMA+0x30>
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d06c      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b04      	cmp	r3, #4
 8006602:	d069      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	2b08      	cmp	r3, #8
 8006608:	d066      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b0c      	cmp	r3, #12
 800660e:	d063      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006618:	d10b      	bne.n	8006632 <HAL_TIM_PWM_Stop_DMA+0x52>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d05b      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2b04      	cmp	r3, #4
 8006624:	d058      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b08      	cmp	r3, #8
 800662a:	d055      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	2b0c      	cmp	r3, #12
 8006630:	d052      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a87      	ldr	r2, [pc, #540]	; (8006854 <HAL_TIM_PWM_Stop_DMA+0x274>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d10b      	bne.n	8006654 <HAL_TIM_PWM_Stop_DMA+0x74>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d04a      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b04      	cmp	r3, #4
 8006646:	d047      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	2b08      	cmp	r3, #8
 800664c:	d044      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b0c      	cmp	r3, #12
 8006652:	d041      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a7f      	ldr	r2, [pc, #508]	; (8006858 <HAL_TIM_PWM_Stop_DMA+0x278>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d10b      	bne.n	8006676 <HAL_TIM_PWM_Stop_DMA+0x96>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d039      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2b04      	cmp	r3, #4
 8006668:	d036      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b08      	cmp	r3, #8
 800666e:	d033      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2b0c      	cmp	r3, #12
 8006674:	d030      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a78      	ldr	r2, [pc, #480]	; (800685c <HAL_TIM_PWM_Stop_DMA+0x27c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d10b      	bne.n	8006698 <HAL_TIM_PWM_Stop_DMA+0xb8>
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d028      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b04      	cmp	r3, #4
 800668a:	d025      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2b08      	cmp	r3, #8
 8006690:	d022      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b0c      	cmp	r3, #12
 8006696:	d01f      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a70      	ldr	r2, [pc, #448]	; (8006860 <HAL_TIM_PWM_Stop_DMA+0x280>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d105      	bne.n	80066ae <HAL_TIM_PWM_Stop_DMA+0xce>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d017      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d014      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a6c      	ldr	r2, [pc, #432]	; (8006864 <HAL_TIM_PWM_Stop_DMA+0x284>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d102      	bne.n	80066be <HAL_TIM_PWM_Stop_DMA+0xde>
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00c      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a69      	ldr	r2, [pc, #420]	; (8006868 <HAL_TIM_PWM_Stop_DMA+0x288>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d102      	bne.n	80066ce <HAL_TIM_PWM_Stop_DMA+0xee>
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d004      	beq.n	80066d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80066ce:	f240 7154 	movw	r1, #1876	; 0x754
 80066d2:	4866      	ldr	r0, [pc, #408]	; (800686c <HAL_TIM_PWM_Stop_DMA+0x28c>)
 80066d4:	f7fa fcc3 	bl	800105e <assert_failed>
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	2b0c      	cmp	r3, #12
 80066dc:	d854      	bhi.n	8006788 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80066de:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <HAL_TIM_PWM_Stop_DMA+0x104>)
 80066e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e4:	08006719 	.word	0x08006719
 80066e8:	08006789 	.word	0x08006789
 80066ec:	08006789 	.word	0x08006789
 80066f0:	08006789 	.word	0x08006789
 80066f4:	08006735 	.word	0x08006735
 80066f8:	08006789 	.word	0x08006789
 80066fc:	08006789 	.word	0x08006789
 8006700:	08006789 	.word	0x08006789
 8006704:	08006751 	.word	0x08006751
 8006708:	08006789 	.word	0x08006789
 800670c:	08006789 	.word	0x08006789
 8006710:	08006789 	.word	0x08006789
 8006714:	0800676d 	.word	0x0800676d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68da      	ldr	r2, [r3, #12]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006726:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672c:	4618      	mov	r0, r3
 800672e:	f7fb ff79 	bl	8002624 <HAL_DMA_Abort_IT>
      break;
 8006732:	e02c      	b.n	800678e <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006742:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006748:	4618      	mov	r0, r3
 800674a:	f7fb ff6b 	bl	8002624 <HAL_DMA_Abort_IT>
      break;
 800674e:	e01e      	b.n	800678e <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68da      	ldr	r2, [r3, #12]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800675e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	4618      	mov	r0, r3
 8006766:	f7fb ff5d 	bl	8002624 <HAL_DMA_Abort_IT>
      break;
 800676a:	e010      	b.n	800678e <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68da      	ldr	r2, [r3, #12]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800677a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006780:	4618      	mov	r0, r3
 8006782:	f7fb ff4f 	bl	8002624 <HAL_DMA_Abort_IT>
      break;
 8006786:	e002      	b.n	800678e <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    default:
      status = HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	73fb      	strb	r3, [r7, #15]
      break;
 800678c:	bf00      	nop
  }

  if (status == HAL_OK)
 800678e:	7bfb      	ldrb	r3, [r7, #15]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d157      	bne.n	8006844 <HAL_TIM_PWM_Stop_DMA+0x264>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2200      	movs	r2, #0
 800679a:	6839      	ldr	r1, [r7, #0]
 800679c:	4618      	mov	r0, r3
 800679e:	f001 f933 	bl	8007a08 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a2a      	ldr	r2, [pc, #168]	; (8006850 <HAL_TIM_PWM_Stop_DMA+0x270>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d117      	bne.n	80067dc <HAL_TIM_PWM_Stop_DMA+0x1fc>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6a1a      	ldr	r2, [r3, #32]
 80067b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80067b6:	4013      	ands	r3, r2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10f      	bne.n	80067dc <HAL_TIM_PWM_Stop_DMA+0x1fc>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6a1a      	ldr	r2, [r3, #32]
 80067c2:	f240 4344 	movw	r3, #1092	; 0x444
 80067c6:	4013      	ands	r3, r2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d107      	bne.n	80067dc <HAL_TIM_PWM_Stop_DMA+0x1fc>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067da:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6a1a      	ldr	r2, [r3, #32]
 80067e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80067e6:	4013      	ands	r3, r2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10f      	bne.n	800680c <HAL_TIM_PWM_Stop_DMA+0x22c>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6a1a      	ldr	r2, [r3, #32]
 80067f2:	f240 4344 	movw	r3, #1092	; 0x444
 80067f6:	4013      	ands	r3, r2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d107      	bne.n	800680c <HAL_TIM_PWM_Stop_DMA+0x22c>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 0201 	bic.w	r2, r2, #1
 800680a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d104      	bne.n	800681c <HAL_TIM_PWM_Stop_DMA+0x23c>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800681a:	e013      	b.n	8006844 <HAL_TIM_PWM_Stop_DMA+0x264>
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2b04      	cmp	r3, #4
 8006820:	d104      	bne.n	800682c <HAL_TIM_PWM_Stop_DMA+0x24c>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800682a:	e00b      	b.n	8006844 <HAL_TIM_PWM_Stop_DMA+0x264>
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	2b08      	cmp	r3, #8
 8006830:	d104      	bne.n	800683c <HAL_TIM_PWM_Stop_DMA+0x25c>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800683a:	e003      	b.n	8006844 <HAL_TIM_PWM_Stop_DMA+0x264>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8006844:	7bfb      	ldrb	r3, [r7, #15]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	40010000 	.word	0x40010000
 8006854:	40000400 	.word	0x40000400
 8006858:	40000800 	.word	0x40000800
 800685c:	40000c00 	.word	0x40000c00
 8006860:	40014000 	.word	0x40014000
 8006864:	40014400 	.word	0x40014400
 8006868:	40014800 	.word	0x40014800
 800686c:	0800b544 	.word	0x0800b544

08006870 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d010      	beq.n	80068a8 <HAL_TIM_PWM_ConfigChannel+0x38>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b04      	cmp	r3, #4
 800688a:	d00d      	beq.n	80068a8 <HAL_TIM_PWM_ConfigChannel+0x38>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b08      	cmp	r3, #8
 8006890:	d00a      	beq.n	80068a8 <HAL_TIM_PWM_ConfigChannel+0x38>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b0c      	cmp	r3, #12
 8006896:	d007      	beq.n	80068a8 <HAL_TIM_PWM_ConfigChannel+0x38>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b3c      	cmp	r3, #60	; 0x3c
 800689c:	d004      	beq.n	80068a8 <HAL_TIM_PWM_ConfigChannel+0x38>
 800689e:	f241 0177 	movw	r1, #4215	; 0x1077
 80068a2:	4893      	ldr	r0, [pc, #588]	; (8006af0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80068a4:	f7fa fbdb 	bl	800105e <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b60      	cmp	r3, #96	; 0x60
 80068ae:	d008      	beq.n	80068c2 <HAL_TIM_PWM_ConfigChannel+0x52>
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b70      	cmp	r3, #112	; 0x70
 80068b6:	d004      	beq.n	80068c2 <HAL_TIM_PWM_ConfigChannel+0x52>
 80068b8:	f241 0178 	movw	r1, #4216	; 0x1078
 80068bc:	488c      	ldr	r0, [pc, #560]	; (8006af0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80068be:	f7fa fbce 	bl	800105e <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d008      	beq.n	80068dc <HAL_TIM_PWM_ConfigChannel+0x6c>
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d004      	beq.n	80068dc <HAL_TIM_PWM_ConfigChannel+0x6c>
 80068d2:	f241 0179 	movw	r1, #4217	; 0x1079
 80068d6:	4886      	ldr	r0, [pc, #536]	; (8006af0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80068d8:	f7fa fbc1 	bl	800105e <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d008      	beq.n	80068f6 <HAL_TIM_PWM_ConfigChannel+0x86>
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	d004      	beq.n	80068f6 <HAL_TIM_PWM_ConfigChannel+0x86>
 80068ec:	f241 017a 	movw	r1, #4218	; 0x107a
 80068f0:	487f      	ldr	r0, [pc, #508]	; (8006af0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80068f2:	f7fa fbb4 	bl	800105e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d101      	bne.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x94>
 8006900:	2302      	movs	r3, #2
 8006902:	e14c      	b.n	8006b9e <HAL_TIM_PWM_ConfigChannel+0x32e>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b0c      	cmp	r3, #12
 8006910:	f200 813d 	bhi.w	8006b8e <HAL_TIM_PWM_ConfigChannel+0x31e>
 8006914:	a201      	add	r2, pc, #4	; (adr r2, 800691c <HAL_TIM_PWM_ConfigChannel+0xac>)
 8006916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691a:	bf00      	nop
 800691c:	08006951 	.word	0x08006951
 8006920:	08006b8f 	.word	0x08006b8f
 8006924:	08006b8f 	.word	0x08006b8f
 8006928:	08006b8f 	.word	0x08006b8f
 800692c:	080069eb 	.word	0x080069eb
 8006930:	08006b8f 	.word	0x08006b8f
 8006934:	08006b8f 	.word	0x08006b8f
 8006938:	08006b8f 	.word	0x08006b8f
 800693c:	08006a73 	.word	0x08006a73
 8006940:	08006b8f 	.word	0x08006b8f
 8006944:	08006b8f 	.word	0x08006b8f
 8006948:	08006b8f 	.word	0x08006b8f
 800694c:	08006b11 	.word	0x08006b11
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a67      	ldr	r2, [pc, #412]	; (8006af4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d027      	beq.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x13a>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006962:	d022      	beq.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x13a>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a63      	ldr	r2, [pc, #396]	; (8006af8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d01d      	beq.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x13a>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a62      	ldr	r2, [pc, #392]	; (8006afc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d018      	beq.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x13a>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a60      	ldr	r2, [pc, #384]	; (8006b00 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d013      	beq.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x13a>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a5f      	ldr	r2, [pc, #380]	; (8006b04 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00e      	beq.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x13a>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a5d      	ldr	r2, [pc, #372]	; (8006b08 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d009      	beq.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x13a>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a5c      	ldr	r2, [pc, #368]	; (8006b0c <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d004      	beq.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x13a>
 80069a0:	f241 0184 	movw	r1, #4228	; 0x1084
 80069a4:	4852      	ldr	r0, [pc, #328]	; (8006af0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80069a6:	f7fa fb5a 	bl	800105e <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68b9      	ldr	r1, [r7, #8]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 fd79 	bl	80074a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	699a      	ldr	r2, [r3, #24]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f042 0208 	orr.w	r2, r2, #8
 80069c4:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	699a      	ldr	r2, [r3, #24]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0204 	bic.w	r2, r2, #4
 80069d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6999      	ldr	r1, [r3, #24]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	691a      	ldr	r2, [r3, #16]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	619a      	str	r2, [r3, #24]
      break;
 80069e8:	e0d4      	b.n	8006b94 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a41      	ldr	r2, [pc, #260]	; (8006af4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d01d      	beq.n	8006a30 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069fc:	d018      	beq.n	8006a30 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a3d      	ldr	r2, [pc, #244]	; (8006af8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d013      	beq.n	8006a30 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a3b      	ldr	r2, [pc, #236]	; (8006afc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d00e      	beq.n	8006a30 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a3a      	ldr	r2, [pc, #232]	; (8006b00 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d009      	beq.n	8006a30 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a38      	ldr	r2, [pc, #224]	; (8006b04 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d004      	beq.n	8006a30 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8006a26:	f241 0195 	movw	r1, #4245	; 0x1095
 8006a2a:	4831      	ldr	r0, [pc, #196]	; (8006af0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006a2c:	f7fa fb17 	bl	800105e <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68b9      	ldr	r1, [r7, #8]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fdc6 	bl	80075c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	699a      	ldr	r2, [r3, #24]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699a      	ldr	r2, [r3, #24]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6999      	ldr	r1, [r3, #24]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	021a      	lsls	r2, r3, #8
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	619a      	str	r2, [r3, #24]
      break;
 8006a70:	e090      	b.n	8006b94 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a1f      	ldr	r2, [pc, #124]	; (8006af4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d018      	beq.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x23e>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a84:	d013      	beq.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x23e>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a1b      	ldr	r2, [pc, #108]	; (8006af8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00e      	beq.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x23e>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a19      	ldr	r2, [pc, #100]	; (8006afc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d009      	beq.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x23e>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a18      	ldr	r2, [pc, #96]	; (8006b00 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d004      	beq.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x23e>
 8006aa4:	f241 01a6 	movw	r1, #4262	; 0x10a6
 8006aa8:	4811      	ldr	r0, [pc, #68]	; (8006af0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006aaa:	f7fa fad8 	bl	800105e <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68b9      	ldr	r1, [r7, #8]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 fe1b 	bl	80076f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	69da      	ldr	r2, [r3, #28]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f042 0208 	orr.w	r2, r2, #8
 8006ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69da      	ldr	r2, [r3, #28]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0204 	bic.w	r2, r2, #4
 8006ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69d9      	ldr	r1, [r3, #28]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	691a      	ldr	r2, [r3, #16]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	61da      	str	r2, [r3, #28]
      break;
 8006aec:	e052      	b.n	8006b94 <HAL_TIM_PWM_ConfigChannel+0x324>
 8006aee:	bf00      	nop
 8006af0:	0800b544 	.word	0x0800b544
 8006af4:	40010000 	.word	0x40010000
 8006af8:	40000400 	.word	0x40000400
 8006afc:	40000800 	.word	0x40000800
 8006b00:	40000c00 	.word	0x40000c00
 8006b04:	40014000 	.word	0x40014000
 8006b08:	40014400 	.word	0x40014400
 8006b0c:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a24      	ldr	r2, [pc, #144]	; (8006ba8 <HAL_TIM_PWM_ConfigChannel+0x338>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d018      	beq.n	8006b4c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b22:	d013      	beq.n	8006b4c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a20      	ldr	r2, [pc, #128]	; (8006bac <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d00e      	beq.n	8006b4c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a1f      	ldr	r2, [pc, #124]	; (8006bb0 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d009      	beq.n	8006b4c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a1d      	ldr	r2, [pc, #116]	; (8006bb4 <HAL_TIM_PWM_ConfigChannel+0x344>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d004      	beq.n	8006b4c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8006b42:	f241 01b7 	movw	r1, #4279	; 0x10b7
 8006b46:	481c      	ldr	r0, [pc, #112]	; (8006bb8 <HAL_TIM_PWM_ConfigChannel+0x348>)
 8006b48:	f7fa fa89 	bl	800105e <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68b9      	ldr	r1, [r7, #8]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 fe60 	bl	8007818 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	69da      	ldr	r2, [r3, #28]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b66:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	69da      	ldr	r2, [r3, #28]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	69d9      	ldr	r1, [r3, #28]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	021a      	lsls	r2, r3, #8
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	61da      	str	r2, [r3, #28]
      break;
 8006b8c:	e002      	b.n	8006b94 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	75fb      	strb	r3, [r7, #23]
      break;
 8006b92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	40010000 	.word	0x40010000
 8006bac:	40000400 	.word	0x40000400
 8006bb0:	40000800 	.word	0x40000800
 8006bb4:	40000c00 	.word	0x40000c00
 8006bb8:	0800b544 	.word	0x0800b544

08006bbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d101      	bne.n	8006bd8 <HAL_TIM_ConfigClockSource+0x1c>
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	e2f0      	b.n	80071ba <HAL_TIM_ConfigClockSource+0x5fe>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2202      	movs	r2, #2
 8006be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf0:	d029      	beq.n	8006c46 <HAL_TIM_ConfigClockSource+0x8a>
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bfa:	d024      	beq.n	8006c46 <HAL_TIM_ConfigClockSource+0x8a>
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d020      	beq.n	8006c46 <HAL_TIM_ConfigClockSource+0x8a>
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b10      	cmp	r3, #16
 8006c0a:	d01c      	beq.n	8006c46 <HAL_TIM_ConfigClockSource+0x8a>
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b20      	cmp	r3, #32
 8006c12:	d018      	beq.n	8006c46 <HAL_TIM_ConfigClockSource+0x8a>
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b30      	cmp	r3, #48	; 0x30
 8006c1a:	d014      	beq.n	8006c46 <HAL_TIM_ConfigClockSource+0x8a>
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b40      	cmp	r3, #64	; 0x40
 8006c22:	d010      	beq.n	8006c46 <HAL_TIM_ConfigClockSource+0x8a>
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b50      	cmp	r3, #80	; 0x50
 8006c2a:	d00c      	beq.n	8006c46 <HAL_TIM_ConfigClockSource+0x8a>
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b60      	cmp	r3, #96	; 0x60
 8006c32:	d008      	beq.n	8006c46 <HAL_TIM_ConfigClockSource+0x8a>
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b70      	cmp	r3, #112	; 0x70
 8006c3a:	d004      	beq.n	8006c46 <HAL_TIM_ConfigClockSource+0x8a>
 8006c3c:	f241 41bb 	movw	r1, #5307	; 0x14bb
 8006c40:	487c      	ldr	r0, [pc, #496]	; (8006e34 <HAL_TIM_ConfigClockSource+0x278>)
 8006c42:	f7fa fa0c 	bl	800105e <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c54:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c5c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c6e:	f000 80f1 	beq.w	8006e54 <HAL_TIM_ConfigClockSource+0x298>
 8006c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c76:	f200 8293 	bhi.w	80071a0 <HAL_TIM_ConfigClockSource+0x5e4>
 8006c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c7e:	d02d      	beq.n	8006cdc <HAL_TIM_ConfigClockSource+0x120>
 8006c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c84:	f200 828c 	bhi.w	80071a0 <HAL_TIM_ConfigClockSource+0x5e4>
 8006c88:	2b70      	cmp	r3, #112	; 0x70
 8006c8a:	d05d      	beq.n	8006d48 <HAL_TIM_ConfigClockSource+0x18c>
 8006c8c:	2b70      	cmp	r3, #112	; 0x70
 8006c8e:	f200 8287 	bhi.w	80071a0 <HAL_TIM_ConfigClockSource+0x5e4>
 8006c92:	2b60      	cmp	r3, #96	; 0x60
 8006c94:	f000 81a0 	beq.w	8006fd8 <HAL_TIM_ConfigClockSource+0x41c>
 8006c98:	2b60      	cmp	r3, #96	; 0x60
 8006c9a:	f200 8281 	bhi.w	80071a0 <HAL_TIM_ConfigClockSource+0x5e4>
 8006c9e:	2b50      	cmp	r3, #80	; 0x50
 8006ca0:	f000 8144 	beq.w	8006f2c <HAL_TIM_ConfigClockSource+0x370>
 8006ca4:	2b50      	cmp	r3, #80	; 0x50
 8006ca6:	f200 827b 	bhi.w	80071a0 <HAL_TIM_ConfigClockSource+0x5e4>
 8006caa:	2b40      	cmp	r3, #64	; 0x40
 8006cac:	f000 81f6 	beq.w	800709c <HAL_TIM_ConfigClockSource+0x4e0>
 8006cb0:	2b40      	cmp	r3, #64	; 0x40
 8006cb2:	f200 8275 	bhi.w	80071a0 <HAL_TIM_ConfigClockSource+0x5e4>
 8006cb6:	2b30      	cmp	r3, #48	; 0x30
 8006cb8:	f000 8246 	beq.w	8007148 <HAL_TIM_ConfigClockSource+0x58c>
 8006cbc:	2b30      	cmp	r3, #48	; 0x30
 8006cbe:	f200 826f 	bhi.w	80071a0 <HAL_TIM_ConfigClockSource+0x5e4>
 8006cc2:	2b20      	cmp	r3, #32
 8006cc4:	f000 8240 	beq.w	8007148 <HAL_TIM_ConfigClockSource+0x58c>
 8006cc8:	2b20      	cmp	r3, #32
 8006cca:	f200 8269 	bhi.w	80071a0 <HAL_TIM_ConfigClockSource+0x5e4>
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 823a 	beq.w	8007148 <HAL_TIM_ConfigClockSource+0x58c>
 8006cd4:	2b10      	cmp	r3, #16
 8006cd6:	f000 8237 	beq.w	8007148 <HAL_TIM_ConfigClockSource+0x58c>
 8006cda:	e261      	b.n	80071a0 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a55      	ldr	r2, [pc, #340]	; (8006e38 <HAL_TIM_ConfigClockSource+0x27c>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	f000 825f 	beq.w	80071a6 <HAL_TIM_ConfigClockSource+0x5ea>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf0:	f000 8259 	beq.w	80071a6 <HAL_TIM_ConfigClockSource+0x5ea>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a50      	ldr	r2, [pc, #320]	; (8006e3c <HAL_TIM_ConfigClockSource+0x280>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	f000 8253 	beq.w	80071a6 <HAL_TIM_ConfigClockSource+0x5ea>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a4e      	ldr	r2, [pc, #312]	; (8006e40 <HAL_TIM_ConfigClockSource+0x284>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	f000 824d 	beq.w	80071a6 <HAL_TIM_ConfigClockSource+0x5ea>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a4c      	ldr	r2, [pc, #304]	; (8006e44 <HAL_TIM_ConfigClockSource+0x288>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	f000 8247 	beq.w	80071a6 <HAL_TIM_ConfigClockSource+0x5ea>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a4a      	ldr	r2, [pc, #296]	; (8006e48 <HAL_TIM_ConfigClockSource+0x28c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	f000 8241 	beq.w	80071a6 <HAL_TIM_ConfigClockSource+0x5ea>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a48      	ldr	r2, [pc, #288]	; (8006e4c <HAL_TIM_ConfigClockSource+0x290>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	f000 823b 	beq.w	80071a6 <HAL_TIM_ConfigClockSource+0x5ea>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a46      	ldr	r2, [pc, #280]	; (8006e50 <HAL_TIM_ConfigClockSource+0x294>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	f000 8235 	beq.w	80071a6 <HAL_TIM_ConfigClockSource+0x5ea>
 8006d3c:	f241 41c7 	movw	r1, #5319	; 0x14c7
 8006d40:	483c      	ldr	r0, [pc, #240]	; (8006e34 <HAL_TIM_ConfigClockSource+0x278>)
 8006d42:	f7fa f98c 	bl	800105e <assert_failed>
      break;
 8006d46:	e22e      	b.n	80071a6 <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a3a      	ldr	r2, [pc, #232]	; (8006e38 <HAL_TIM_ConfigClockSource+0x27c>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d01d      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0x1d2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d5a:	d018      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0x1d2>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a36      	ldr	r2, [pc, #216]	; (8006e3c <HAL_TIM_ConfigClockSource+0x280>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d013      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0x1d2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a35      	ldr	r2, [pc, #212]	; (8006e40 <HAL_TIM_ConfigClockSource+0x284>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00e      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0x1d2>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a33      	ldr	r2, [pc, #204]	; (8006e44 <HAL_TIM_ConfigClockSource+0x288>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d009      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0x1d2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a32      	ldr	r2, [pc, #200]	; (8006e48 <HAL_TIM_ConfigClockSource+0x28c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d004      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0x1d2>
 8006d84:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8006d88:	482a      	ldr	r0, [pc, #168]	; (8006e34 <HAL_TIM_ConfigClockSource+0x278>)
 8006d8a:	f7fa f968 	bl	800105e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d013      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0x202>
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d9e:	d00e      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0x202>
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da8:	d009      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0x202>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006db2:	d004      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0x202>
 8006db4:	f241 41d1 	movw	r1, #5329	; 0x14d1
 8006db8:	481e      	ldr	r0, [pc, #120]	; (8006e34 <HAL_TIM_ConfigClockSource+0x278>)
 8006dba:	f7fa f950 	bl	800105e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dc6:	d014      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x236>
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d010      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x236>
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00c      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x236>
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d008      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x236>
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	2b0a      	cmp	r3, #10
 8006de6:	d004      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x236>
 8006de8:	f241 41d2 	movw	r1, #5330	; 0x14d2
 8006dec:	4811      	ldr	r0, [pc, #68]	; (8006e34 <HAL_TIM_ConfigClockSource+0x278>)
 8006dee:	f7fa f936 	bl	800105e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	2b0f      	cmp	r3, #15
 8006df8:	d904      	bls.n	8006e04 <HAL_TIM_ConfigClockSource+0x248>
 8006dfa:	f241 41d3 	movw	r1, #5331	; 0x14d3
 8006dfe:	480d      	ldr	r0, [pc, #52]	; (8006e34 <HAL_TIM_ConfigClockSource+0x278>)
 8006e00:	f7fa f92d 	bl	800105e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6818      	ldr	r0, [r3, #0]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	6899      	ldr	r1, [r3, #8]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f000 fdd8 	bl	80079c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e26:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	609a      	str	r2, [r3, #8]
      break;
 8006e30:	e1ba      	b.n	80071a8 <HAL_TIM_ConfigClockSource+0x5ec>
 8006e32:	bf00      	nop
 8006e34:	0800b544 	.word	0x0800b544
 8006e38:	40010000 	.word	0x40010000
 8006e3c:	40000400 	.word	0x40000400
 8006e40:	40000800 	.word	0x40000800
 8006e44:	40000c00 	.word	0x40000c00
 8006e48:	40014000 	.word	0x40014000
 8006e4c:	40014400 	.word	0x40014400
 8006e50:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a8a      	ldr	r2, [pc, #552]	; (8007084 <HAL_TIM_ConfigClockSource+0x4c8>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d018      	beq.n	8006e90 <HAL_TIM_ConfigClockSource+0x2d4>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e66:	d013      	beq.n	8006e90 <HAL_TIM_ConfigClockSource+0x2d4>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a86      	ldr	r2, [pc, #536]	; (8007088 <HAL_TIM_ConfigClockSource+0x4cc>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00e      	beq.n	8006e90 <HAL_TIM_ConfigClockSource+0x2d4>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a85      	ldr	r2, [pc, #532]	; (800708c <HAL_TIM_ConfigClockSource+0x4d0>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d009      	beq.n	8006e90 <HAL_TIM_ConfigClockSource+0x2d4>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a83      	ldr	r2, [pc, #524]	; (8007090 <HAL_TIM_ConfigClockSource+0x4d4>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d004      	beq.n	8006e90 <HAL_TIM_ConfigClockSource+0x2d4>
 8006e86:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8006e8a:	4882      	ldr	r0, [pc, #520]	; (8007094 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006e8c:	f7fa f8e7 	bl	800105e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d013      	beq.n	8006ec0 <HAL_TIM_ConfigClockSource+0x304>
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ea0:	d00e      	beq.n	8006ec0 <HAL_TIM_ConfigClockSource+0x304>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eaa:	d009      	beq.n	8006ec0 <HAL_TIM_ConfigClockSource+0x304>
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006eb4:	d004      	beq.n	8006ec0 <HAL_TIM_ConfigClockSource+0x304>
 8006eb6:	f241 41e9 	movw	r1, #5353	; 0x14e9
 8006eba:	4876      	ldr	r0, [pc, #472]	; (8007094 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006ebc:	f7fa f8cf 	bl	800105e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ec8:	d014      	beq.n	8006ef4 <HAL_TIM_ConfigClockSource+0x338>
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d010      	beq.n	8006ef4 <HAL_TIM_ConfigClockSource+0x338>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00c      	beq.n	8006ef4 <HAL_TIM_ConfigClockSource+0x338>
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d008      	beq.n	8006ef4 <HAL_TIM_ConfigClockSource+0x338>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	2b0a      	cmp	r3, #10
 8006ee8:	d004      	beq.n	8006ef4 <HAL_TIM_ConfigClockSource+0x338>
 8006eea:	f241 41ea 	movw	r1, #5354	; 0x14ea
 8006eee:	4869      	ldr	r0, [pc, #420]	; (8007094 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006ef0:	f7fa f8b5 	bl	800105e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	2b0f      	cmp	r3, #15
 8006efa:	d904      	bls.n	8006f06 <HAL_TIM_ConfigClockSource+0x34a>
 8006efc:	f241 41eb 	movw	r1, #5355	; 0x14eb
 8006f00:	4864      	ldr	r0, [pc, #400]	; (8007094 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006f02:	f7fa f8ac 	bl	800105e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6818      	ldr	r0, [r3, #0]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	6899      	ldr	r1, [r3, #8]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	685a      	ldr	r2, [r3, #4]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	f000 fd57 	bl	80079c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f28:	609a      	str	r2, [r3, #8]
      break;
 8006f2a:	e13d      	b.n	80071a8 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a54      	ldr	r2, [pc, #336]	; (8007084 <HAL_TIM_ConfigClockSource+0x4c8>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d01d      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0x3b6>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f3e:	d018      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0x3b6>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a50      	ldr	r2, [pc, #320]	; (8007088 <HAL_TIM_ConfigClockSource+0x4cc>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d013      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0x3b6>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a4f      	ldr	r2, [pc, #316]	; (800708c <HAL_TIM_ConfigClockSource+0x4d0>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d00e      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0x3b6>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a4d      	ldr	r2, [pc, #308]	; (8007090 <HAL_TIM_ConfigClockSource+0x4d4>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d009      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0x3b6>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a4d      	ldr	r2, [pc, #308]	; (8007098 <HAL_TIM_ConfigClockSource+0x4dc>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d004      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0x3b6>
 8006f68:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8006f6c:	4849      	ldr	r0, [pc, #292]	; (8007094 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006f6e:	f7fa f876 	bl	800105e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f7a:	d014      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0x3ea>
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d010      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0x3ea>
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00c      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0x3ea>
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d008      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0x3ea>
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	2b0a      	cmp	r3, #10
 8006f9a:	d004      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0x3ea>
 8006f9c:	f241 41fd 	movw	r1, #5373	; 0x14fd
 8006fa0:	483c      	ldr	r0, [pc, #240]	; (8007094 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006fa2:	f7fa f85c 	bl	800105e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	2b0f      	cmp	r3, #15
 8006fac:	d904      	bls.n	8006fb8 <HAL_TIM_ConfigClockSource+0x3fc>
 8006fae:	f241 41fe 	movw	r1, #5374	; 0x14fe
 8006fb2:	4838      	ldr	r0, [pc, #224]	; (8007094 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006fb4:	f7fa f853 	bl	800105e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6818      	ldr	r0, [r3, #0]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	6859      	ldr	r1, [r3, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	f000 fc85 	bl	80078d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2150      	movs	r1, #80	; 0x50
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f000 fcde 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 8006fd6:	e0e7      	b.n	80071a8 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a29      	ldr	r2, [pc, #164]	; (8007084 <HAL_TIM_ConfigClockSource+0x4c8>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d01d      	beq.n	800701e <HAL_TIM_ConfigClockSource+0x462>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fea:	d018      	beq.n	800701e <HAL_TIM_ConfigClockSource+0x462>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a25      	ldr	r2, [pc, #148]	; (8007088 <HAL_TIM_ConfigClockSource+0x4cc>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d013      	beq.n	800701e <HAL_TIM_ConfigClockSource+0x462>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a24      	ldr	r2, [pc, #144]	; (800708c <HAL_TIM_ConfigClockSource+0x4d0>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00e      	beq.n	800701e <HAL_TIM_ConfigClockSource+0x462>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a22      	ldr	r2, [pc, #136]	; (8007090 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d009      	beq.n	800701e <HAL_TIM_ConfigClockSource+0x462>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a22      	ldr	r2, [pc, #136]	; (8007098 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d004      	beq.n	800701e <HAL_TIM_ConfigClockSource+0x462>
 8007014:	f241 510a 	movw	r1, #5386	; 0x150a
 8007018:	481e      	ldr	r0, [pc, #120]	; (8007094 <HAL_TIM_ConfigClockSource+0x4d8>)
 800701a:	f7fa f820 	bl	800105e <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007026:	d014      	beq.n	8007052 <HAL_TIM_ConfigClockSource+0x496>
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d010      	beq.n	8007052 <HAL_TIM_ConfigClockSource+0x496>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00c      	beq.n	8007052 <HAL_TIM_ConfigClockSource+0x496>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	2b02      	cmp	r3, #2
 800703e:	d008      	beq.n	8007052 <HAL_TIM_ConfigClockSource+0x496>
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	2b0a      	cmp	r3, #10
 8007046:	d004      	beq.n	8007052 <HAL_TIM_ConfigClockSource+0x496>
 8007048:	f241 510d 	movw	r1, #5389	; 0x150d
 800704c:	4811      	ldr	r0, [pc, #68]	; (8007094 <HAL_TIM_ConfigClockSource+0x4d8>)
 800704e:	f7fa f806 	bl	800105e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	2b0f      	cmp	r3, #15
 8007058:	d904      	bls.n	8007064 <HAL_TIM_ConfigClockSource+0x4a8>
 800705a:	f241 510e 	movw	r1, #5390	; 0x150e
 800705e:	480d      	ldr	r0, [pc, #52]	; (8007094 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007060:	f7f9 fffd 	bl	800105e <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6818      	ldr	r0, [r3, #0]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	6859      	ldr	r1, [r3, #4]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	461a      	mov	r2, r3
 8007072:	f000 fc5e 	bl	8007932 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2160      	movs	r1, #96	; 0x60
 800707c:	4618      	mov	r0, r3
 800707e:	f000 fc88 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 8007082:	e091      	b.n	80071a8 <HAL_TIM_ConfigClockSource+0x5ec>
 8007084:	40010000 	.word	0x40010000
 8007088:	40000400 	.word	0x40000400
 800708c:	40000800 	.word	0x40000800
 8007090:	40000c00 	.word	0x40000c00
 8007094:	0800b544 	.word	0x0800b544
 8007098:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a48      	ldr	r2, [pc, #288]	; (80071c4 <HAL_TIM_ConfigClockSource+0x608>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d01d      	beq.n	80070e2 <HAL_TIM_ConfigClockSource+0x526>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ae:	d018      	beq.n	80070e2 <HAL_TIM_ConfigClockSource+0x526>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a44      	ldr	r2, [pc, #272]	; (80071c8 <HAL_TIM_ConfigClockSource+0x60c>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d013      	beq.n	80070e2 <HAL_TIM_ConfigClockSource+0x526>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a43      	ldr	r2, [pc, #268]	; (80071cc <HAL_TIM_ConfigClockSource+0x610>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d00e      	beq.n	80070e2 <HAL_TIM_ConfigClockSource+0x526>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a41      	ldr	r2, [pc, #260]	; (80071d0 <HAL_TIM_ConfigClockSource+0x614>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d009      	beq.n	80070e2 <HAL_TIM_ConfigClockSource+0x526>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a40      	ldr	r2, [pc, #256]	; (80071d4 <HAL_TIM_ConfigClockSource+0x618>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d004      	beq.n	80070e2 <HAL_TIM_ConfigClockSource+0x526>
 80070d8:	f241 511a 	movw	r1, #5402	; 0x151a
 80070dc:	483e      	ldr	r0, [pc, #248]	; (80071d8 <HAL_TIM_ConfigClockSource+0x61c>)
 80070de:	f7f9 ffbe 	bl	800105e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ea:	d014      	beq.n	8007116 <HAL_TIM_ConfigClockSource+0x55a>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d010      	beq.n	8007116 <HAL_TIM_ConfigClockSource+0x55a>
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00c      	beq.n	8007116 <HAL_TIM_ConfigClockSource+0x55a>
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	2b02      	cmp	r3, #2
 8007102:	d008      	beq.n	8007116 <HAL_TIM_ConfigClockSource+0x55a>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	2b0a      	cmp	r3, #10
 800710a:	d004      	beq.n	8007116 <HAL_TIM_ConfigClockSource+0x55a>
 800710c:	f241 511d 	movw	r1, #5405	; 0x151d
 8007110:	4831      	ldr	r0, [pc, #196]	; (80071d8 <HAL_TIM_ConfigClockSource+0x61c>)
 8007112:	f7f9 ffa4 	bl	800105e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	2b0f      	cmp	r3, #15
 800711c:	d904      	bls.n	8007128 <HAL_TIM_ConfigClockSource+0x56c>
 800711e:	f241 511e 	movw	r1, #5406	; 0x151e
 8007122:	482d      	ldr	r0, [pc, #180]	; (80071d8 <HAL_TIM_ConfigClockSource+0x61c>)
 8007124:	f7f9 ff9b 	bl	800105e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6818      	ldr	r0, [r3, #0]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	6859      	ldr	r1, [r3, #4]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	461a      	mov	r2, r3
 8007136:	f000 fbcd 	bl	80078d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2140      	movs	r1, #64	; 0x40
 8007140:	4618      	mov	r0, r3
 8007142:	f000 fc26 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 8007146:	e02f      	b.n	80071a8 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a1d      	ldr	r2, [pc, #116]	; (80071c4 <HAL_TIM_ConfigClockSource+0x608>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d01d      	beq.n	800718e <HAL_TIM_ConfigClockSource+0x5d2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800715a:	d018      	beq.n	800718e <HAL_TIM_ConfigClockSource+0x5d2>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a19      	ldr	r2, [pc, #100]	; (80071c8 <HAL_TIM_ConfigClockSource+0x60c>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d013      	beq.n	800718e <HAL_TIM_ConfigClockSource+0x5d2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a18      	ldr	r2, [pc, #96]	; (80071cc <HAL_TIM_ConfigClockSource+0x610>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d00e      	beq.n	800718e <HAL_TIM_ConfigClockSource+0x5d2>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a16      	ldr	r2, [pc, #88]	; (80071d0 <HAL_TIM_ConfigClockSource+0x614>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d009      	beq.n	800718e <HAL_TIM_ConfigClockSource+0x5d2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a15      	ldr	r2, [pc, #84]	; (80071d4 <HAL_TIM_ConfigClockSource+0x618>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d004      	beq.n	800718e <HAL_TIM_ConfigClockSource+0x5d2>
 8007184:	f241 512d 	movw	r1, #5421	; 0x152d
 8007188:	4813      	ldr	r0, [pc, #76]	; (80071d8 <HAL_TIM_ConfigClockSource+0x61c>)
 800718a:	f7f9 ff68 	bl	800105e <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4619      	mov	r1, r3
 8007198:	4610      	mov	r0, r2
 800719a:	f000 fbfa 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 800719e:	e003      	b.n	80071a8 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	73fb      	strb	r3, [r7, #15]
      break;
 80071a4:	e000      	b.n	80071a8 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 80071a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	40010000 	.word	0x40010000
 80071c8:	40000400 	.word	0x40000400
 80071cc:	40000800 	.word	0x40000800
 80071d0:	40000c00 	.word	0x40000c00
 80071d4:	40014000 	.word	0x40014000
 80071d8:	0800b544 	.word	0x0800b544

080071dc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007210:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	429a      	cmp	r2, r3
 800721a:	d107      	bne.n	800722c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2201      	movs	r2, #1
 8007220:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800722a:	e02a      	b.n	8007282 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	429a      	cmp	r2, r3
 8007234:	d107      	bne.n	8007246 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2202      	movs	r2, #2
 800723a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007244:	e01d      	b.n	8007282 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	429a      	cmp	r2, r3
 800724e:	d107      	bne.n	8007260 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2204      	movs	r2, #4
 8007254:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800725e:	e010      	b.n	8007282 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	429a      	cmp	r2, r3
 8007268:	d107      	bne.n	800727a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2208      	movs	r2, #8
 800726e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007278:	e003      	b.n	8007282 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f7ff ffb4 	bl	80071f0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	771a      	strb	r2, [r3, #28]
}
 800728e:	bf00      	nop
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b084      	sub	sp, #16
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d10b      	bne.n	80072c6 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2201      	movs	r2, #1
 80072b2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	69db      	ldr	r3, [r3, #28]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d136      	bne.n	800732a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072c4:	e031      	b.n	800732a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d10b      	bne.n	80072e8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2202      	movs	r2, #2
 80072d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d125      	bne.n	800732a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072e6:	e020      	b.n	800732a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d10b      	bne.n	800730a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2204      	movs	r2, #4
 80072f6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d114      	bne.n	800732a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007308:	e00f      	b.n	800732a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	429a      	cmp	r2, r3
 8007312:	d10a      	bne.n	800732a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2208      	movs	r2, #8
 8007318:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d103      	bne.n	800732a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f7f9 fc22 	bl	8000b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	771a      	strb	r2, [r3, #28]
}
 8007336:	bf00      	nop
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b084      	sub	sp, #16
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	429a      	cmp	r2, r3
 8007354:	d103      	bne.n	800735e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2201      	movs	r2, #1
 800735a:	771a      	strb	r2, [r3, #28]
 800735c:	e019      	b.n	8007392 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	429a      	cmp	r2, r3
 8007366:	d103      	bne.n	8007370 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2202      	movs	r2, #2
 800736c:	771a      	strb	r2, [r3, #28]
 800736e:	e010      	b.n	8007392 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	429a      	cmp	r2, r3
 8007378:	d103      	bne.n	8007382 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2204      	movs	r2, #4
 800737e:	771a      	strb	r2, [r3, #28]
 8007380:	e007      	b.n	8007392 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	429a      	cmp	r2, r3
 800738a:	d102      	bne.n	8007392 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2208      	movs	r2, #8
 8007390:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f7ff ff22 	bl	80071dc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	771a      	strb	r2, [r3, #28]
}
 800739e:	bf00      	nop
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
	...

080073a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a34      	ldr	r2, [pc, #208]	; (800748c <TIM_Base_SetConfig+0xe4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d00f      	beq.n	80073e0 <TIM_Base_SetConfig+0x38>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c6:	d00b      	beq.n	80073e0 <TIM_Base_SetConfig+0x38>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a31      	ldr	r2, [pc, #196]	; (8007490 <TIM_Base_SetConfig+0xe8>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d007      	beq.n	80073e0 <TIM_Base_SetConfig+0x38>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a30      	ldr	r2, [pc, #192]	; (8007494 <TIM_Base_SetConfig+0xec>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d003      	beq.n	80073e0 <TIM_Base_SetConfig+0x38>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a2f      	ldr	r2, [pc, #188]	; (8007498 <TIM_Base_SetConfig+0xf0>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d108      	bne.n	80073f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a25      	ldr	r2, [pc, #148]	; (800748c <TIM_Base_SetConfig+0xe4>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d01b      	beq.n	8007432 <TIM_Base_SetConfig+0x8a>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007400:	d017      	beq.n	8007432 <TIM_Base_SetConfig+0x8a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a22      	ldr	r2, [pc, #136]	; (8007490 <TIM_Base_SetConfig+0xe8>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d013      	beq.n	8007432 <TIM_Base_SetConfig+0x8a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a21      	ldr	r2, [pc, #132]	; (8007494 <TIM_Base_SetConfig+0xec>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d00f      	beq.n	8007432 <TIM_Base_SetConfig+0x8a>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a20      	ldr	r2, [pc, #128]	; (8007498 <TIM_Base_SetConfig+0xf0>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d00b      	beq.n	8007432 <TIM_Base_SetConfig+0x8a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a1f      	ldr	r2, [pc, #124]	; (800749c <TIM_Base_SetConfig+0xf4>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d007      	beq.n	8007432 <TIM_Base_SetConfig+0x8a>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a1e      	ldr	r2, [pc, #120]	; (80074a0 <TIM_Base_SetConfig+0xf8>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d003      	beq.n	8007432 <TIM_Base_SetConfig+0x8a>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a1d      	ldr	r2, [pc, #116]	; (80074a4 <TIM_Base_SetConfig+0xfc>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d108      	bne.n	8007444 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	4313      	orrs	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	4313      	orrs	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	689a      	ldr	r2, [r3, #8]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a08      	ldr	r2, [pc, #32]	; (800748c <TIM_Base_SetConfig+0xe4>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d103      	bne.n	8007478 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	691a      	ldr	r2, [r3, #16]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	615a      	str	r2, [r3, #20]
}
 800747e:	bf00      	nop
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	40010000 	.word	0x40010000
 8007490:	40000400 	.word	0x40000400
 8007494:	40000800 	.word	0x40000800
 8007498:	40000c00 	.word	0x40000c00
 800749c:	40014000 	.word	0x40014000
 80074a0:	40014400 	.word	0x40014400
 80074a4:	40014800 	.word	0x40014800

080074a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	f023 0201 	bic.w	r2, r3, #1
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f023 0303 	bic.w	r3, r3, #3
 80074de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f023 0302 	bic.w	r3, r3, #2
 80074f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a30      	ldr	r2, [pc, #192]	; (80075c0 <TIM_OC1_SetConfig+0x118>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d119      	bne.n	8007538 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d008      	beq.n	800751e <TIM_OC1_SetConfig+0x76>
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	2b08      	cmp	r3, #8
 8007512:	d004      	beq.n	800751e <TIM_OC1_SetConfig+0x76>
 8007514:	f641 21cb 	movw	r1, #6859	; 0x1acb
 8007518:	482a      	ldr	r0, [pc, #168]	; (80075c4 <TIM_OC1_SetConfig+0x11c>)
 800751a:	f7f9 fda0 	bl	800105e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f023 0308 	bic.w	r3, r3, #8
 8007524:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	4313      	orrs	r3, r2
 800752e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f023 0304 	bic.w	r3, r3, #4
 8007536:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a21      	ldr	r2, [pc, #132]	; (80075c0 <TIM_OC1_SetConfig+0x118>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d12d      	bne.n	800759c <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007548:	d008      	beq.n	800755c <TIM_OC1_SetConfig+0xb4>
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d004      	beq.n	800755c <TIM_OC1_SetConfig+0xb4>
 8007552:	f641 21d8 	movw	r1, #6872	; 0x1ad8
 8007556:	481b      	ldr	r0, [pc, #108]	; (80075c4 <TIM_OC1_SetConfig+0x11c>)
 8007558:	f7f9 fd81 	bl	800105e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007564:	d008      	beq.n	8007578 <TIM_OC1_SetConfig+0xd0>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d004      	beq.n	8007578 <TIM_OC1_SetConfig+0xd0>
 800756e:	f641 21d9 	movw	r1, #6873	; 0x1ad9
 8007572:	4814      	ldr	r0, [pc, #80]	; (80075c4 <TIM_OC1_SetConfig+0x11c>)
 8007574:	f7f9 fd73 	bl	800105e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800757e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007586:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	4313      	orrs	r3, r2
 8007590:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	4313      	orrs	r3, r2
 800759a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	621a      	str	r2, [r3, #32]
}
 80075b6:	bf00      	nop
 80075b8:	3718      	adds	r7, #24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	40010000 	.word	0x40010000
 80075c4:	0800b544 	.word	0x0800b544

080075c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b086      	sub	sp, #24
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	f023 0210 	bic.w	r2, r3, #16
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	021b      	lsls	r3, r3, #8
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	4313      	orrs	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	f023 0320 	bic.w	r3, r3, #32
 8007612:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	011b      	lsls	r3, r3, #4
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	4313      	orrs	r3, r2
 800761e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a31      	ldr	r2, [pc, #196]	; (80076e8 <TIM_OC2_SetConfig+0x120>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d11a      	bne.n	800765e <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d008      	beq.n	8007642 <TIM_OC2_SetConfig+0x7a>
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	2b08      	cmp	r3, #8
 8007636:	d004      	beq.n	8007642 <TIM_OC2_SetConfig+0x7a>
 8007638:	f641 3116 	movw	r1, #6934	; 0x1b16
 800763c:	482b      	ldr	r0, [pc, #172]	; (80076ec <TIM_OC2_SetConfig+0x124>)
 800763e:	f7f9 fd0e 	bl	800105e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007648:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	011b      	lsls	r3, r3, #4
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	4313      	orrs	r3, r2
 8007654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800765c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a21      	ldr	r2, [pc, #132]	; (80076e8 <TIM_OC2_SetConfig+0x120>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d12f      	bne.n	80076c6 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800766e:	d008      	beq.n	8007682 <TIM_OC2_SetConfig+0xba>
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d004      	beq.n	8007682 <TIM_OC2_SetConfig+0xba>
 8007678:	f641 3124 	movw	r1, #6948	; 0x1b24
 800767c:	481b      	ldr	r0, [pc, #108]	; (80076ec <TIM_OC2_SetConfig+0x124>)
 800767e:	f7f9 fcee 	bl	800105e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800768a:	d008      	beq.n	800769e <TIM_OC2_SetConfig+0xd6>
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d004      	beq.n	800769e <TIM_OC2_SetConfig+0xd6>
 8007694:	f641 3125 	movw	r1, #6949	; 0x1b25
 8007698:	4814      	ldr	r0, [pc, #80]	; (80076ec <TIM_OC2_SetConfig+0x124>)
 800769a:	f7f9 fce0 	bl	800105e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	621a      	str	r2, [r3, #32]
}
 80076e0:	bf00      	nop
 80076e2:	3718      	adds	r7, #24
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	40010000 	.word	0x40010000
 80076ec:	0800b544 	.word	0x0800b544

080076f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a1b      	ldr	r3, [r3, #32]
 800770a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800771e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f023 0303 	bic.w	r3, r3, #3
 8007726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	4313      	orrs	r3, r2
 8007730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	021b      	lsls	r3, r3, #8
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	4313      	orrs	r3, r2
 8007744:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a31      	ldr	r2, [pc, #196]	; (8007810 <TIM_OC3_SetConfig+0x120>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d11a      	bne.n	8007784 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d008      	beq.n	8007768 <TIM_OC3_SetConfig+0x78>
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	2b08      	cmp	r3, #8
 800775c:	d004      	beq.n	8007768 <TIM_OC3_SetConfig+0x78>
 800775e:	f641 3161 	movw	r1, #7009	; 0x1b61
 8007762:	482c      	ldr	r0, [pc, #176]	; (8007814 <TIM_OC3_SetConfig+0x124>)
 8007764:	f7f9 fc7b 	bl	800105e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800776e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	021b      	lsls	r3, r3, #8
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	4313      	orrs	r3, r2
 800777a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007782:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a22      	ldr	r2, [pc, #136]	; (8007810 <TIM_OC3_SetConfig+0x120>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d12f      	bne.n	80077ec <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007794:	d008      	beq.n	80077a8 <TIM_OC3_SetConfig+0xb8>
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d004      	beq.n	80077a8 <TIM_OC3_SetConfig+0xb8>
 800779e:	f641 316e 	movw	r1, #7022	; 0x1b6e
 80077a2:	481c      	ldr	r0, [pc, #112]	; (8007814 <TIM_OC3_SetConfig+0x124>)
 80077a4:	f7f9 fc5b 	bl	800105e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077b0:	d008      	beq.n	80077c4 <TIM_OC3_SetConfig+0xd4>
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d004      	beq.n	80077c4 <TIM_OC3_SetConfig+0xd4>
 80077ba:	f641 316f 	movw	r1, #7023	; 0x1b6f
 80077be:	4815      	ldr	r0, [pc, #84]	; (8007814 <TIM_OC3_SetConfig+0x124>)
 80077c0:	f7f9 fc4d 	bl	800105e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	011b      	lsls	r3, r3, #4
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	4313      	orrs	r3, r2
 80077de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	011b      	lsls	r3, r3, #4
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	621a      	str	r2, [r3, #32]
}
 8007806:	bf00      	nop
 8007808:	3718      	adds	r7, #24
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	40010000 	.word	0x40010000
 8007814:	0800b544 	.word	0x0800b544

08007818 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a1b      	ldr	r3, [r3, #32]
 8007826:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800784e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	021b      	lsls	r3, r3, #8
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	4313      	orrs	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007862:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	031b      	lsls	r3, r3, #12
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	4313      	orrs	r3, r2
 800786e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a16      	ldr	r2, [pc, #88]	; (80078cc <TIM_OC4_SetConfig+0xb4>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d117      	bne.n	80078a8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007880:	d008      	beq.n	8007894 <TIM_OC4_SetConfig+0x7c>
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d004      	beq.n	8007894 <TIM_OC4_SetConfig+0x7c>
 800788a:	f641 31ad 	movw	r1, #7085	; 0x1bad
 800788e:	4810      	ldr	r0, [pc, #64]	; (80078d0 <TIM_OC4_SetConfig+0xb8>)
 8007890:	f7f9 fbe5 	bl	800105e <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800789a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	019b      	lsls	r3, r3, #6
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	621a      	str	r2, [r3, #32]
}
 80078c2:	bf00      	nop
 80078c4:	3718      	adds	r7, #24
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	40010000 	.word	0x40010000
 80078d0:	0800b544 	.word	0x0800b544

080078d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6a1b      	ldr	r3, [r3, #32]
 80078e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	f023 0201 	bic.w	r2, r3, #1
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	011b      	lsls	r3, r3, #4
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	4313      	orrs	r3, r2
 8007908:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f023 030a 	bic.w	r3, r3, #10
 8007910:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	4313      	orrs	r3, r2
 8007918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	621a      	str	r2, [r3, #32]
}
 8007926:	bf00      	nop
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007932:	b480      	push	{r7}
 8007934:	b087      	sub	sp, #28
 8007936:	af00      	add	r7, sp, #0
 8007938:	60f8      	str	r0, [r7, #12]
 800793a:	60b9      	str	r1, [r7, #8]
 800793c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	f023 0210 	bic.w	r2, r3, #16
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800795c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	031b      	lsls	r3, r3, #12
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	4313      	orrs	r3, r2
 8007966:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800796e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	011b      	lsls	r3, r3, #4
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	4313      	orrs	r3, r2
 8007978:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	621a      	str	r2, [r3, #32]
}
 8007986:	bf00      	nop
 8007988:	371c      	adds	r7, #28
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007992:	b480      	push	{r7}
 8007994:	b085      	sub	sp, #20
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	f043 0307 	orr.w	r3, r3, #7
 80079b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	609a      	str	r2, [r3, #8]
}
 80079bc:	bf00      	nop
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	021a      	lsls	r2, r3, #8
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	431a      	orrs	r2, r3
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	609a      	str	r2, [r3, #8]
}
 80079fc:	bf00      	nop
 80079fe:	371c      	adds	r7, #28
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4a2a      	ldr	r2, [pc, #168]	; (8007ac0 <TIM_CCxChannelCmd+0xb8>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d020      	beq.n	8007a5e <TIM_CCxChannelCmd+0x56>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a22:	d01c      	beq.n	8007a5e <TIM_CCxChannelCmd+0x56>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4a27      	ldr	r2, [pc, #156]	; (8007ac4 <TIM_CCxChannelCmd+0xbc>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d018      	beq.n	8007a5e <TIM_CCxChannelCmd+0x56>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	4a26      	ldr	r2, [pc, #152]	; (8007ac8 <TIM_CCxChannelCmd+0xc0>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d014      	beq.n	8007a5e <TIM_CCxChannelCmd+0x56>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4a25      	ldr	r2, [pc, #148]	; (8007acc <TIM_CCxChannelCmd+0xc4>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d010      	beq.n	8007a5e <TIM_CCxChannelCmd+0x56>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4a24      	ldr	r2, [pc, #144]	; (8007ad0 <TIM_CCxChannelCmd+0xc8>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d00c      	beq.n	8007a5e <TIM_CCxChannelCmd+0x56>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	4a23      	ldr	r2, [pc, #140]	; (8007ad4 <TIM_CCxChannelCmd+0xcc>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d008      	beq.n	8007a5e <TIM_CCxChannelCmd+0x56>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4a22      	ldr	r2, [pc, #136]	; (8007ad8 <TIM_CCxChannelCmd+0xd0>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d004      	beq.n	8007a5e <TIM_CCxChannelCmd+0x56>
 8007a54:	f641 5198 	movw	r1, #7576	; 0x1d98
 8007a58:	4820      	ldr	r0, [pc, #128]	; (8007adc <TIM_CCxChannelCmd+0xd4>)
 8007a5a:	f7f9 fb00 	bl	800105e <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d010      	beq.n	8007a86 <TIM_CCxChannelCmd+0x7e>
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2b04      	cmp	r3, #4
 8007a68:	d00d      	beq.n	8007a86 <TIM_CCxChannelCmd+0x7e>
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d00a      	beq.n	8007a86 <TIM_CCxChannelCmd+0x7e>
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	2b0c      	cmp	r3, #12
 8007a74:	d007      	beq.n	8007a86 <TIM_CCxChannelCmd+0x7e>
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2b3c      	cmp	r3, #60	; 0x3c
 8007a7a:	d004      	beq.n	8007a86 <TIM_CCxChannelCmd+0x7e>
 8007a7c:	f641 5199 	movw	r1, #7577	; 0x1d99
 8007a80:	4816      	ldr	r0, [pc, #88]	; (8007adc <TIM_CCxChannelCmd+0xd4>)
 8007a82:	f7f9 faec 	bl	800105e <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	f003 031f 	and.w	r3, r3, #31
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a92:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6a1a      	ldr	r2, [r3, #32]
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	43db      	mvns	r3, r3
 8007a9c:	401a      	ands	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6a1a      	ldr	r2, [r3, #32]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	f003 031f 	and.w	r3, r3, #31
 8007aac:	6879      	ldr	r1, [r7, #4]
 8007aae:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab2:	431a      	orrs	r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	621a      	str	r2, [r3, #32]
}
 8007ab8:	bf00      	nop
 8007aba:	3718      	adds	r7, #24
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	40010000 	.word	0x40010000
 8007ac4:	40000400 	.word	0x40000400
 8007ac8:	40000800 	.word	0x40000800
 8007acc:	40000c00 	.word	0x40000c00
 8007ad0:	40014000 	.word	0x40014000
 8007ad4:	40014400 	.word	0x40014400
 8007ad8:	40014800 	.word	0x40014800
 8007adc:	0800b544 	.word	0x0800b544

08007ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a55      	ldr	r2, [pc, #340]	; (8007c44 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d018      	beq.n	8007b26 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007afc:	d013      	beq.n	8007b26 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a51      	ldr	r2, [pc, #324]	; (8007c48 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d00e      	beq.n	8007b26 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a4f      	ldr	r2, [pc, #316]	; (8007c4c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d009      	beq.n	8007b26 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a4e      	ldr	r2, [pc, #312]	; (8007c50 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d004      	beq.n	8007b26 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007b1c:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8007b20:	484c      	ldr	r0, [pc, #304]	; (8007c54 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007b22:	f7f9 fa9c 	bl	800105e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d020      	beq.n	8007b70 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b10      	cmp	r3, #16
 8007b34:	d01c      	beq.n	8007b70 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2b20      	cmp	r3, #32
 8007b3c:	d018      	beq.n	8007b70 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b30      	cmp	r3, #48	; 0x30
 8007b44:	d014      	beq.n	8007b70 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b40      	cmp	r3, #64	; 0x40
 8007b4c:	d010      	beq.n	8007b70 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b50      	cmp	r3, #80	; 0x50
 8007b54:	d00c      	beq.n	8007b70 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2b60      	cmp	r3, #96	; 0x60
 8007b5c:	d008      	beq.n	8007b70 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b70      	cmp	r3, #112	; 0x70
 8007b64:	d004      	beq.n	8007b70 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007b66:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8007b6a:	483a      	ldr	r0, [pc, #232]	; (8007c54 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007b6c:	f7f9 fa77 	bl	800105e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	2b80      	cmp	r3, #128	; 0x80
 8007b76:	d008      	beq.n	8007b8a <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d004      	beq.n	8007b8a <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8007b80:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8007b84:	4833      	ldr	r0, [pc, #204]	; (8007c54 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007b86:	f7f9 fa6a 	bl	800105e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d101      	bne.n	8007b98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007b94:	2302      	movs	r3, #2
 8007b96:	e050      	b.n	8007c3a <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a1b      	ldr	r2, [pc, #108]	; (8007c44 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d018      	beq.n	8007c0e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007be4:	d013      	beq.n	8007c0e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a17      	ldr	r2, [pc, #92]	; (8007c48 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d00e      	beq.n	8007c0e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a15      	ldr	r2, [pc, #84]	; (8007c4c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d009      	beq.n	8007c0e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a14      	ldr	r2, [pc, #80]	; (8007c50 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d004      	beq.n	8007c0e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a13      	ldr	r2, [pc, #76]	; (8007c58 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d10c      	bne.n	8007c28 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	40010000 	.word	0x40010000
 8007c48:	40000400 	.word	0x40000400
 8007c4c:	40000800 	.word	0x40000800
 8007c50:	40000c00 	.word	0x40000c00
 8007c54:	0800b57c 	.word	0x0800b57c
 8007c58:	40014000 	.word	0x40014000

08007c5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a5c      	ldr	r2, [pc, #368]	; (8007de0 <HAL_TIMEx_ConfigBreakDeadTime+0x184>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d004      	beq.n	8007c7e <HAL_TIMEx_ConfigBreakDeadTime+0x22>
 8007c74:	f240 71ee 	movw	r1, #2030	; 0x7ee
 8007c78:	485a      	ldr	r0, [pc, #360]	; (8007de4 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8007c7a:	f7f9 f9f0 	bl	800105e <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c86:	d008      	beq.n	8007c9a <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d004      	beq.n	8007c9a <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 8007c90:	f240 71ef 	movw	r1, #2031	; 0x7ef
 8007c94:	4853      	ldr	r0, [pc, #332]	; (8007de4 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8007c96:	f7f9 f9e2 	bl	800105e <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ca2:	d008      	beq.n	8007cb6 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d004      	beq.n	8007cb6 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 8007cac:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 8007cb0:	484c      	ldr	r0, [pc, #304]	; (8007de4 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8007cb2:	f7f9 f9d4 	bl	800105e <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d013      	beq.n	8007ce6 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cc6:	d00e      	beq.n	8007ce6 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cd0:	d009      	beq.n	8007ce6 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cda:	d004      	beq.n	8007ce6 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8007cdc:	f240 71f1 	movw	r1, #2033	; 0x7f1
 8007ce0:	4840      	ldr	r0, [pc, #256]	; (8007de4 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8007ce2:	f7f9 f9bc 	bl	800105e <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	2bff      	cmp	r3, #255	; 0xff
 8007cec:	d904      	bls.n	8007cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>
 8007cee:	f240 71f2 	movw	r1, #2034	; 0x7f2
 8007cf2:	483c      	ldr	r0, [pc, #240]	; (8007de4 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8007cf4:	f7f9 f9b3 	bl	800105e <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d00:	d008      	beq.n	8007d14 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d004      	beq.n	8007d14 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8007d0a:	f240 71f3 	movw	r1, #2035	; 0x7f3
 8007d0e:	4835      	ldr	r0, [pc, #212]	; (8007de4 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8007d10:	f7f9 f9a5 	bl	800105e <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d009      	beq.n	8007d30 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	695b      	ldr	r3, [r3, #20]
 8007d20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d24:	d004      	beq.n	8007d30 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 8007d26:	f240 71f4 	movw	r1, #2036	; 0x7f4
 8007d2a:	482e      	ldr	r0, [pc, #184]	; (8007de4 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8007d2c:	f7f9 f997 	bl	800105e <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d38:	d008      	beq.n	8007d4c <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	69db      	ldr	r3, [r3, #28]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d004      	beq.n	8007d4c <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 8007d42:	f240 71f5 	movw	r1, #2037	; 0x7f5
 8007d46:	4827      	ldr	r0, [pc, #156]	; (8007de4 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8007d48:	f7f9 f989 	bl	800105e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d101      	bne.n	8007d5a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
 8007d56:	2302      	movs	r3, #2
 8007d58:	e03d      	b.n	8007dd6 <HAL_TIMEx_ConfigBreakDeadTime+0x17a>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	69db      	ldr	r3, [r3, #28]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	40010000 	.word	0x40010000
 8007de4:	0800b57c 	.word	0x0800b57c

08007de8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007de8:	b084      	sub	sp, #16
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	f107 001c 	add.w	r0, r7, #28
 8007df6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d122      	bne.n	8007e46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d105      	bne.n	8007e3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f9a0 	bl	8008180 <USB_CoreReset>
 8007e40:	4603      	mov	r3, r0
 8007e42:	73fb      	strb	r3, [r7, #15]
 8007e44:	e01a      	b.n	8007e7c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f994 	bl	8008180 <USB_CoreReset>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d106      	bne.n	8007e70 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	639a      	str	r2, [r3, #56]	; 0x38
 8007e6e:	e005      	b.n	8007e7c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d10b      	bne.n	8007e9a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f043 0206 	orr.w	r2, r3, #6
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f043 0220 	orr.w	r2, r3, #32
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ea6:	b004      	add	sp, #16
 8007ea8:	4770      	bx	lr

08007eaa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b083      	sub	sp, #12
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f043 0201 	orr.w	r2, r3, #1
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	f023 0201 	bic.w	r2, r3, #1
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f0a:	78fb      	ldrb	r3, [r7, #3]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d115      	bne.n	8007f3c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f1c:	2001      	movs	r0, #1
 8007f1e:	f7f9 fbbd 	bl	800169c <HAL_Delay>
      ms++;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3301      	adds	r3, #1
 8007f26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f91a 	bl	8008162 <USB_GetMode>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d01e      	beq.n	8007f72 <USB_SetCurrentMode+0x84>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2b31      	cmp	r3, #49	; 0x31
 8007f38:	d9f0      	bls.n	8007f1c <USB_SetCurrentMode+0x2e>
 8007f3a:	e01a      	b.n	8007f72 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f3c:	78fb      	ldrb	r3, [r7, #3]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d115      	bne.n	8007f6e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f4e:	2001      	movs	r0, #1
 8007f50:	f7f9 fba4 	bl	800169c <HAL_Delay>
      ms++;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3301      	adds	r3, #1
 8007f58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f901 	bl	8008162 <USB_GetMode>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d005      	beq.n	8007f72 <USB_SetCurrentMode+0x84>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2b31      	cmp	r3, #49	; 0x31
 8007f6a:	d9f0      	bls.n	8007f4e <USB_SetCurrentMode+0x60>
 8007f6c:	e001      	b.n	8007f72 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e005      	b.n	8007f7e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2b32      	cmp	r3, #50	; 0x32
 8007f76:	d101      	bne.n	8007f7c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e000      	b.n	8007f7e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
	...

08007f88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f92:	2300      	movs	r3, #0
 8007f94:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	019b      	lsls	r3, r3, #6
 8007f9a:	f043 0220 	orr.w	r2, r3, #32
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	60fb      	str	r3, [r7, #12]
 8007fa8:	4a08      	ldr	r2, [pc, #32]	; (8007fcc <USB_FlushTxFifo+0x44>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d901      	bls.n	8007fb2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e006      	b.n	8007fc0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	f003 0320 	and.w	r3, r3, #32
 8007fba:	2b20      	cmp	r3, #32
 8007fbc:	d0f1      	beq.n	8007fa2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	00030d40 	.word	0x00030d40

08007fd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2210      	movs	r2, #16
 8007fe0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	60fb      	str	r3, [r7, #12]
 8007fe8:	4a08      	ldr	r2, [pc, #32]	; (800800c <USB_FlushRxFifo+0x3c>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d901      	bls.n	8007ff2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e006      	b.n	8008000 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	f003 0310 	and.w	r3, r3, #16
 8007ffa:	2b10      	cmp	r3, #16
 8007ffc:	d0f1      	beq.n	8007fe2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3714      	adds	r7, #20
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	00030d40 	.word	0x00030d40

08008010 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008010:	b480      	push	{r7}
 8008012:	b089      	sub	sp, #36	; 0x24
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	4611      	mov	r1, r2
 800801c:	461a      	mov	r2, r3
 800801e:	460b      	mov	r3, r1
 8008020:	71fb      	strb	r3, [r7, #7]
 8008022:	4613      	mov	r3, r2
 8008024:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800802e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008032:	2b00      	cmp	r3, #0
 8008034:	d123      	bne.n	800807e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008036:	88bb      	ldrh	r3, [r7, #4]
 8008038:	3303      	adds	r3, #3
 800803a:	089b      	lsrs	r3, r3, #2
 800803c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800803e:	2300      	movs	r3, #0
 8008040:	61bb      	str	r3, [r7, #24]
 8008042:	e018      	b.n	8008076 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008044:	79fb      	ldrb	r3, [r7, #7]
 8008046:	031a      	lsls	r2, r3, #12
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	4413      	add	r3, r2
 800804c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008050:	461a      	mov	r2, r3
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	3301      	adds	r3, #1
 800805c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	3301      	adds	r3, #1
 8008062:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	3301      	adds	r3, #1
 8008068:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	3301      	adds	r3, #1
 800806e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	3301      	adds	r3, #1
 8008074:	61bb      	str	r3, [r7, #24]
 8008076:	69ba      	ldr	r2, [r7, #24]
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	429a      	cmp	r2, r3
 800807c:	d3e2      	bcc.n	8008044 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3724      	adds	r7, #36	; 0x24
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800808c:	b480      	push	{r7}
 800808e:	b08b      	sub	sp, #44	; 0x2c
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	4613      	mov	r3, r2
 8008098:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80080a2:	88fb      	ldrh	r3, [r7, #6]
 80080a4:	089b      	lsrs	r3, r3, #2
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80080aa:	88fb      	ldrh	r3, [r7, #6]
 80080ac:	f003 0303 	and.w	r3, r3, #3
 80080b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80080b2:	2300      	movs	r3, #0
 80080b4:	623b      	str	r3, [r7, #32]
 80080b6:	e014      	b.n	80080e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80080c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c6:	3301      	adds	r3, #1
 80080c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080cc:	3301      	adds	r3, #1
 80080ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	3301      	adds	r3, #1
 80080d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d8:	3301      	adds	r3, #1
 80080da:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80080dc:	6a3b      	ldr	r3, [r7, #32]
 80080de:	3301      	adds	r3, #1
 80080e0:	623b      	str	r3, [r7, #32]
 80080e2:	6a3a      	ldr	r2, [r7, #32]
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d3e6      	bcc.n	80080b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80080ea:	8bfb      	ldrh	r3, [r7, #30]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d01e      	beq.n	800812e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080fa:	461a      	mov	r2, r3
 80080fc:	f107 0310 	add.w	r3, r7, #16
 8008100:	6812      	ldr	r2, [r2, #0]
 8008102:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	6a3b      	ldr	r3, [r7, #32]
 8008108:	b2db      	uxtb	r3, r3
 800810a:	00db      	lsls	r3, r3, #3
 800810c:	fa22 f303 	lsr.w	r3, r2, r3
 8008110:	b2da      	uxtb	r2, r3
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	701a      	strb	r2, [r3, #0]
      i++;
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	3301      	adds	r3, #1
 800811a:	623b      	str	r3, [r7, #32]
      pDest++;
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	3301      	adds	r3, #1
 8008120:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008122:	8bfb      	ldrh	r3, [r7, #30]
 8008124:	3b01      	subs	r3, #1
 8008126:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008128:	8bfb      	ldrh	r3, [r7, #30]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1ea      	bne.n	8008104 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008130:	4618      	mov	r0, r3
 8008132:	372c      	adds	r7, #44	; 0x2c
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	695b      	ldr	r3, [r3, #20]
 8008148:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	699b      	ldr	r3, [r3, #24]
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	4013      	ands	r3, r2
 8008152:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008154:	68fb      	ldr	r3, [r7, #12]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr

08008162 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008162:	b480      	push	{r7}
 8008164:	b083      	sub	sp, #12
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	f003 0301 	and.w	r3, r3, #1
}
 8008172:	4618      	mov	r0, r3
 8008174:	370c      	adds	r7, #12
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
	...

08008180 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008188:	2300      	movs	r3, #0
 800818a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	3301      	adds	r3, #1
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	4a13      	ldr	r2, [pc, #76]	; (80081e0 <USB_CoreReset+0x60>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d901      	bls.n	800819c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e01a      	b.n	80081d2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	daf3      	bge.n	800818c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80081a4:	2300      	movs	r3, #0
 80081a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	f043 0201 	orr.w	r2, r3, #1
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	3301      	adds	r3, #1
 80081b8:	60fb      	str	r3, [r7, #12]
 80081ba:	4a09      	ldr	r2, [pc, #36]	; (80081e0 <USB_CoreReset+0x60>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d901      	bls.n	80081c4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e006      	b.n	80081d2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d0f1      	beq.n	80081b4 <USB_CoreReset+0x34>

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3714      	adds	r7, #20
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	00030d40 	.word	0x00030d40

080081e4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081e4:	b084      	sub	sp, #16
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b084      	sub	sp, #16
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	f107 001c 	add.w	r0, r7, #28
 80081f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008200:	461a      	mov	r2, r3
 8008202:	2300      	movs	r3, #0
 8008204:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008216:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008222:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800822e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008232:	2b00      	cmp	r3, #0
 8008234:	d018      	beq.n	8008268 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008238:	2b01      	cmp	r3, #1
 800823a:	d10a      	bne.n	8008252 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800824a:	f043 0304 	orr.w	r3, r3, #4
 800824e:	6013      	str	r3, [r2, #0]
 8008250:	e014      	b.n	800827c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008260:	f023 0304 	bic.w	r3, r3, #4
 8008264:	6013      	str	r3, [r2, #0]
 8008266:	e009      	b.n	800827c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008276:	f023 0304 	bic.w	r3, r3, #4
 800827a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800827c:	2110      	movs	r1, #16
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f7ff fe82 	bl	8007f88 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7ff fea3 	bl	8007fd0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800828a:	2300      	movs	r3, #0
 800828c:	60fb      	str	r3, [r7, #12]
 800828e:	e015      	b.n	80082bc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	4413      	add	r3, r2
 8008298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800829c:	461a      	mov	r2, r3
 800829e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082a2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b0:	461a      	mov	r2, r3
 80082b2:	2300      	movs	r3, #0
 80082b4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	3301      	adds	r3, #1
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	6a3b      	ldr	r3, [r7, #32]
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d3e5      	bcc.n	8008290 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082d0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00b      	beq.n	80082f6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082e4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a13      	ldr	r2, [pc, #76]	; (8008338 <USB_HostInit+0x154>)
 80082ea:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a13      	ldr	r2, [pc, #76]	; (800833c <USB_HostInit+0x158>)
 80082f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80082f4:	e009      	b.n	800830a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2280      	movs	r2, #128	; 0x80
 80082fa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a10      	ldr	r2, [pc, #64]	; (8008340 <USB_HostInit+0x15c>)
 8008300:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a0f      	ldr	r2, [pc, #60]	; (8008344 <USB_HostInit+0x160>)
 8008306:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800830a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830c:	2b00      	cmp	r3, #0
 800830e:	d105      	bne.n	800831c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	f043 0210 	orr.w	r2, r3, #16
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	699a      	ldr	r2, [r3, #24]
 8008320:	4b09      	ldr	r3, [pc, #36]	; (8008348 <USB_HostInit+0x164>)
 8008322:	4313      	orrs	r3, r2
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008334:	b004      	add	sp, #16
 8008336:	4770      	bx	lr
 8008338:	01000200 	.word	0x01000200
 800833c:	00e00300 	.word	0x00e00300
 8008340:	00600080 	.word	0x00600080
 8008344:	004000e0 	.word	0x004000e0
 8008348:	a3200008 	.word	0xa3200008

0800834c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	460b      	mov	r3, r1
 8008356:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800836a:	f023 0303 	bic.w	r3, r3, #3
 800836e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	78fb      	ldrb	r3, [r7, #3]
 800837a:	f003 0303 	and.w	r3, r3, #3
 800837e:	68f9      	ldr	r1, [r7, #12]
 8008380:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008384:	4313      	orrs	r3, r2
 8008386:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008388:	78fb      	ldrb	r3, [r7, #3]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d107      	bne.n	800839e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008394:	461a      	mov	r2, r3
 8008396:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800839a:	6053      	str	r3, [r2, #4]
 800839c:	e009      	b.n	80083b2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800839e:	78fb      	ldrb	r3, [r7, #3]
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d106      	bne.n	80083b2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083aa:	461a      	mov	r2, r3
 80083ac:	f241 7370 	movw	r3, #6000	; 0x1770
 80083b0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80083cc:	2300      	movs	r3, #0
 80083ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80083e0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80083ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083ee:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80083f0:	2064      	movs	r0, #100	; 0x64
 80083f2:	f7f9 f953 	bl	800169c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80083fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008402:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008404:	200a      	movs	r0, #10
 8008406:	f7f9 f949 	bl	800169c <HAL_Delay>

  return HAL_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008424:	2300      	movs	r3, #0
 8008426:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008438:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d109      	bne.n	8008458 <USB_DriveVbus+0x44>
 8008444:	78fb      	ldrb	r3, [r7, #3]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d106      	bne.n	8008458 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008452:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008456:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800845e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008462:	d109      	bne.n	8008478 <USB_DriveVbus+0x64>
 8008464:	78fb      	ldrb	r3, [r7, #3]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d106      	bne.n	8008478 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008476:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008486:	b480      	push	{r7}
 8008488:	b085      	sub	sp, #20
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008492:	2300      	movs	r3, #0
 8008494:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	0c5b      	lsrs	r3, r3, #17
 80084a4:	f003 0303 	and.w	r3, r3, #3
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3714      	adds	r7, #20
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	b29b      	uxth	r3, r3
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
	...

080084d8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b088      	sub	sp, #32
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	4608      	mov	r0, r1
 80084e2:	4611      	mov	r1, r2
 80084e4:	461a      	mov	r2, r3
 80084e6:	4603      	mov	r3, r0
 80084e8:	70fb      	strb	r3, [r7, #3]
 80084ea:	460b      	mov	r3, r1
 80084ec:	70bb      	strb	r3, [r7, #2]
 80084ee:	4613      	mov	r3, r2
 80084f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80084fa:	78fb      	ldrb	r3, [r7, #3]
 80084fc:	015a      	lsls	r2, r3, #5
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	4413      	add	r3, r2
 8008502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008506:	461a      	mov	r2, r3
 8008508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800850c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800850e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008512:	2b03      	cmp	r3, #3
 8008514:	d87e      	bhi.n	8008614 <USB_HC_Init+0x13c>
 8008516:	a201      	add	r2, pc, #4	; (adr r2, 800851c <USB_HC_Init+0x44>)
 8008518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851c:	0800852d 	.word	0x0800852d
 8008520:	080085d7 	.word	0x080085d7
 8008524:	0800852d 	.word	0x0800852d
 8008528:	08008599 	.word	0x08008599
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800852c:	78fb      	ldrb	r3, [r7, #3]
 800852e:	015a      	lsls	r2, r3, #5
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	4413      	add	r3, r2
 8008534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008538:	461a      	mov	r2, r3
 800853a:	f240 439d 	movw	r3, #1181	; 0x49d
 800853e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008540:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008544:	2b00      	cmp	r3, #0
 8008546:	da10      	bge.n	800856a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008548:	78fb      	ldrb	r3, [r7, #3]
 800854a:	015a      	lsls	r2, r3, #5
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	4413      	add	r3, r2
 8008550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	78fa      	ldrb	r2, [r7, #3]
 8008558:	0151      	lsls	r1, r2, #5
 800855a:	693a      	ldr	r2, [r7, #16]
 800855c:	440a      	add	r2, r1
 800855e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008566:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008568:	e057      	b.n	800861a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008572:	2b00      	cmp	r3, #0
 8008574:	d051      	beq.n	800861a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008576:	78fb      	ldrb	r3, [r7, #3]
 8008578:	015a      	lsls	r2, r3, #5
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	4413      	add	r3, r2
 800857e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	78fa      	ldrb	r2, [r7, #3]
 8008586:	0151      	lsls	r1, r2, #5
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	440a      	add	r2, r1
 800858c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008590:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008594:	60d3      	str	r3, [r2, #12]
      break;
 8008596:	e040      	b.n	800861a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008598:	78fb      	ldrb	r3, [r7, #3]
 800859a:	015a      	lsls	r2, r3, #5
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	4413      	add	r3, r2
 80085a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085a4:	461a      	mov	r2, r3
 80085a6:	f240 639d 	movw	r3, #1693	; 0x69d
 80085aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80085ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	da34      	bge.n	800861e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	78fa      	ldrb	r2, [r7, #3]
 80085c4:	0151      	lsls	r1, r2, #5
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	440a      	add	r2, r1
 80085ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085d2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80085d4:	e023      	b.n	800861e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80085d6:	78fb      	ldrb	r3, [r7, #3]
 80085d8:	015a      	lsls	r2, r3, #5
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	4413      	add	r3, r2
 80085de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085e2:	461a      	mov	r2, r3
 80085e4:	f240 2325 	movw	r3, #549	; 0x225
 80085e8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80085ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	da17      	bge.n	8008622 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80085f2:	78fb      	ldrb	r3, [r7, #3]
 80085f4:	015a      	lsls	r2, r3, #5
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	4413      	add	r3, r2
 80085fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	78fa      	ldrb	r2, [r7, #3]
 8008602:	0151      	lsls	r1, r2, #5
 8008604:	693a      	ldr	r2, [r7, #16]
 8008606:	440a      	add	r2, r1
 8008608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800860c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008610:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008612:	e006      	b.n	8008622 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	77fb      	strb	r3, [r7, #31]
      break;
 8008618:	e004      	b.n	8008624 <USB_HC_Init+0x14c>
      break;
 800861a:	bf00      	nop
 800861c:	e002      	b.n	8008624 <USB_HC_Init+0x14c>
      break;
 800861e:	bf00      	nop
 8008620:	e000      	b.n	8008624 <USB_HC_Init+0x14c>
      break;
 8008622:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800862a:	699a      	ldr	r2, [r3, #24]
 800862c:	78fb      	ldrb	r3, [r7, #3]
 800862e:	f003 030f 	and.w	r3, r3, #15
 8008632:	2101      	movs	r1, #1
 8008634:	fa01 f303 	lsl.w	r3, r1, r3
 8008638:	6939      	ldr	r1, [r7, #16]
 800863a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800863e:	4313      	orrs	r3, r2
 8008640:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800864e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008652:	2b00      	cmp	r3, #0
 8008654:	da03      	bge.n	800865e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800865a:	61bb      	str	r3, [r7, #24]
 800865c:	e001      	b.n	8008662 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800865e:	2300      	movs	r3, #0
 8008660:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7ff ff0f 	bl	8008486 <USB_GetHostSpeed>
 8008668:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800866a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800866e:	2b02      	cmp	r3, #2
 8008670:	d106      	bne.n	8008680 <USB_HC_Init+0x1a8>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2b02      	cmp	r3, #2
 8008676:	d003      	beq.n	8008680 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008678:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800867c:	617b      	str	r3, [r7, #20]
 800867e:	e001      	b.n	8008684 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008680:	2300      	movs	r3, #0
 8008682:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008684:	787b      	ldrb	r3, [r7, #1]
 8008686:	059b      	lsls	r3, r3, #22
 8008688:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800868c:	78bb      	ldrb	r3, [r7, #2]
 800868e:	02db      	lsls	r3, r3, #11
 8008690:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008694:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008696:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800869a:	049b      	lsls	r3, r3, #18
 800869c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80086a0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80086a2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80086a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80086a8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086ae:	78fb      	ldrb	r3, [r7, #3]
 80086b0:	0159      	lsls	r1, r3, #5
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	440b      	add	r3, r1
 80086b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ba:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086c0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80086c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086c6:	2b03      	cmp	r3, #3
 80086c8:	d10f      	bne.n	80086ea <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80086ca:	78fb      	ldrb	r3, [r7, #3]
 80086cc:	015a      	lsls	r2, r3, #5
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	4413      	add	r3, r2
 80086d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	78fa      	ldrb	r2, [r7, #3]
 80086da:	0151      	lsls	r1, r2, #5
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	440a      	add	r2, r1
 80086e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086e8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80086ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3720      	adds	r7, #32
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b08c      	sub	sp, #48	; 0x30
 80086f8:	af02      	add	r7, sp, #8
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	4613      	mov	r3, r2
 8008700:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	785b      	ldrb	r3, [r3, #1]
 800870a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800870c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008710:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800871a:	2b00      	cmp	r3, #0
 800871c:	d02d      	beq.n	800877a <USB_HC_StartXfer+0x86>
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	791b      	ldrb	r3, [r3, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d129      	bne.n	800877a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008726:	79fb      	ldrb	r3, [r7, #7]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d117      	bne.n	800875c <USB_HC_StartXfer+0x68>
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	79db      	ldrb	r3, [r3, #7]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d003      	beq.n	800873c <USB_HC_StartXfer+0x48>
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	79db      	ldrb	r3, [r3, #7]
 8008738:	2b02      	cmp	r3, #2
 800873a:	d10f      	bne.n	800875c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	015a      	lsls	r2, r3, #5
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	4413      	add	r3, r2
 8008744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	69fa      	ldr	r2, [r7, #28]
 800874c:	0151      	lsls	r1, r2, #5
 800874e:	6a3a      	ldr	r2, [r7, #32]
 8008750:	440a      	add	r2, r1
 8008752:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800875a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800875c:	79fb      	ldrb	r3, [r7, #7]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10b      	bne.n	800877a <USB_HC_StartXfer+0x86>
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	795b      	ldrb	r3, [r3, #5]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d107      	bne.n	800877a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	785b      	ldrb	r3, [r3, #1]
 800876e:	4619      	mov	r1, r3
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f000 fa2f 	bl	8008bd4 <USB_DoPing>
      return HAL_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	e0f8      	b.n	800896c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	695b      	ldr	r3, [r3, #20]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d018      	beq.n	80087b4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	8912      	ldrh	r2, [r2, #8]
 800878a:	4413      	add	r3, r2
 800878c:	3b01      	subs	r3, #1
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	8912      	ldrh	r2, [r2, #8]
 8008792:	fbb3 f3f2 	udiv	r3, r3, r2
 8008796:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008798:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800879a:	8b7b      	ldrh	r3, [r7, #26]
 800879c:	429a      	cmp	r2, r3
 800879e:	d90b      	bls.n	80087b8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80087a0:	8b7b      	ldrh	r3, [r7, #26]
 80087a2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80087a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	8912      	ldrh	r2, [r2, #8]
 80087aa:	fb02 f203 	mul.w	r2, r2, r3
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	611a      	str	r2, [r3, #16]
 80087b2:	e001      	b.n	80087b8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80087b4:	2301      	movs	r3, #1
 80087b6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	78db      	ldrb	r3, [r3, #3]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d007      	beq.n	80087d0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80087c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	8912      	ldrh	r2, [r2, #8]
 80087c6:	fb02 f203 	mul.w	r2, r2, r3
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	611a      	str	r2, [r3, #16]
 80087ce:	e003      	b.n	80087d8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	695a      	ldr	r2, [r3, #20]
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80087e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087e2:	04d9      	lsls	r1, r3, #19
 80087e4:	4b63      	ldr	r3, [pc, #396]	; (8008974 <USB_HC_StartXfer+0x280>)
 80087e6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087e8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	7a9b      	ldrb	r3, [r3, #10]
 80087ee:	075b      	lsls	r3, r3, #29
 80087f0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087f4:	69f9      	ldr	r1, [r7, #28]
 80087f6:	0148      	lsls	r0, r1, #5
 80087f8:	6a39      	ldr	r1, [r7, #32]
 80087fa:	4401      	add	r1, r0
 80087fc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008800:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008802:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008804:	79fb      	ldrb	r3, [r7, #7]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d009      	beq.n	800881e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	68d9      	ldr	r1, [r3, #12]
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	015a      	lsls	r2, r3, #5
 8008812:	6a3b      	ldr	r3, [r7, #32]
 8008814:	4413      	add	r3, r2
 8008816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800881a:	460a      	mov	r2, r1
 800881c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800881e:	6a3b      	ldr	r3, [r7, #32]
 8008820:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	2b00      	cmp	r3, #0
 800882c:	bf0c      	ite	eq
 800882e:	2301      	moveq	r3, #1
 8008830:	2300      	movne	r3, #0
 8008832:	b2db      	uxtb	r3, r3
 8008834:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	015a      	lsls	r2, r3, #5
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	4413      	add	r3, r2
 800883e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	69fa      	ldr	r2, [r7, #28]
 8008846:	0151      	lsls	r1, r2, #5
 8008848:	6a3a      	ldr	r2, [r7, #32]
 800884a:	440a      	add	r2, r1
 800884c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008850:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008854:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	4413      	add	r3, r2
 800885e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	7e7b      	ldrb	r3, [r7, #25]
 8008866:	075b      	lsls	r3, r3, #29
 8008868:	69f9      	ldr	r1, [r7, #28]
 800886a:	0148      	lsls	r0, r1, #5
 800886c:	6a39      	ldr	r1, [r7, #32]
 800886e:	4401      	add	r1, r0
 8008870:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008874:	4313      	orrs	r3, r2
 8008876:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	015a      	lsls	r2, r3, #5
 800887c:	6a3b      	ldr	r3, [r7, #32]
 800887e:	4413      	add	r3, r2
 8008880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800888e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	78db      	ldrb	r3, [r3, #3]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d004      	beq.n	80088a2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800889e:	613b      	str	r3, [r7, #16]
 80088a0:	e003      	b.n	80088aa <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088a8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088b0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	015a      	lsls	r2, r3, #5
 80088b6:	6a3b      	ldr	r3, [r7, #32]
 80088b8:	4413      	add	r3, r2
 80088ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088be:	461a      	mov	r2, r3
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80088c4:	79fb      	ldrb	r3, [r7, #7]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80088ca:	2300      	movs	r3, #0
 80088cc:	e04e      	b.n	800896c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	78db      	ldrb	r3, [r3, #3]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d149      	bne.n	800896a <USB_HC_StartXfer+0x276>
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d045      	beq.n	800896a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	79db      	ldrb	r3, [r3, #7]
 80088e2:	2b03      	cmp	r3, #3
 80088e4:	d830      	bhi.n	8008948 <USB_HC_StartXfer+0x254>
 80088e6:	a201      	add	r2, pc, #4	; (adr r2, 80088ec <USB_HC_StartXfer+0x1f8>)
 80088e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ec:	080088fd 	.word	0x080088fd
 80088f0:	08008921 	.word	0x08008921
 80088f4:	080088fd 	.word	0x080088fd
 80088f8:	08008921 	.word	0x08008921
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	695b      	ldr	r3, [r3, #20]
 8008900:	3303      	adds	r3, #3
 8008902:	089b      	lsrs	r3, r3, #2
 8008904:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008906:	8afa      	ldrh	r2, [r7, #22]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	b29b      	uxth	r3, r3
 800890e:	429a      	cmp	r2, r3
 8008910:	d91c      	bls.n	800894c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	f043 0220 	orr.w	r2, r3, #32
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	619a      	str	r2, [r3, #24]
        }
        break;
 800891e:	e015      	b.n	800894c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	3303      	adds	r3, #3
 8008926:	089b      	lsrs	r3, r3, #2
 8008928:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800892a:	8afa      	ldrh	r2, [r7, #22]
 800892c:	6a3b      	ldr	r3, [r7, #32]
 800892e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	b29b      	uxth	r3, r3
 8008936:	429a      	cmp	r2, r3
 8008938:	d90a      	bls.n	8008950 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	619a      	str	r2, [r3, #24]
        }
        break;
 8008946:	e003      	b.n	8008950 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008948:	bf00      	nop
 800894a:	e002      	b.n	8008952 <USB_HC_StartXfer+0x25e>
        break;
 800894c:	bf00      	nop
 800894e:	e000      	b.n	8008952 <USB_HC_StartXfer+0x25e>
        break;
 8008950:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	68d9      	ldr	r1, [r3, #12]
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	785a      	ldrb	r2, [r3, #1]
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	b29b      	uxth	r3, r3
 8008960:	2000      	movs	r0, #0
 8008962:	9000      	str	r0, [sp, #0]
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f7ff fb53 	bl	8008010 <USB_WritePacket>
  }

  return HAL_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3728      	adds	r7, #40	; 0x28
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	1ff80000 	.word	0x1ff80000

08008978 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	b29b      	uxth	r3, r3
}
 800898e:	4618      	mov	r0, r3
 8008990:	3714      	adds	r7, #20
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800899a:	b480      	push	{r7}
 800899c:	b089      	sub	sp, #36	; 0x24
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	460b      	mov	r3, r1
 80089a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80089aa:	78fb      	ldrb	r3, [r7, #3]
 80089ac:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80089ae:	2300      	movs	r3, #0
 80089b0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	015a      	lsls	r2, r3, #5
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	4413      	add	r3, r2
 80089ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	0c9b      	lsrs	r3, r3, #18
 80089c2:	f003 0303 	and.w	r3, r3, #3
 80089c6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	015a      	lsls	r2, r3, #5
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	4413      	add	r3, r2
 80089d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	0fdb      	lsrs	r3, r3, #31
 80089d8:	f003 0301 	and.w	r3, r3, #1
 80089dc:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	f003 0320 	and.w	r3, r3, #32
 80089e6:	2b20      	cmp	r3, #32
 80089e8:	d104      	bne.n	80089f4 <USB_HC_Halt+0x5a>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d101      	bne.n	80089f4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	e0e8      	b.n	8008bc6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d002      	beq.n	8008a00 <USB_HC_Halt+0x66>
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	d173      	bne.n	8008ae8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	015a      	lsls	r2, r3, #5
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	4413      	add	r3, r2
 8008a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	0151      	lsls	r1, r2, #5
 8008a12:	69ba      	ldr	r2, [r7, #24]
 8008a14:	440a      	add	r2, r1
 8008a16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a1e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f003 0320 	and.w	r3, r3, #32
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f040 80cb 	bne.w	8008bc4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d143      	bne.n	8008ac2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	0151      	lsls	r1, r2, #5
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	440a      	add	r2, r1
 8008a50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a58:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	697a      	ldr	r2, [r7, #20]
 8008a6a:	0151      	lsls	r1, r2, #5
 8008a6c:	69ba      	ldr	r2, [r7, #24]
 8008a6e:	440a      	add	r2, r1
 8008a70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a78:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	015a      	lsls	r2, r3, #5
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	4413      	add	r3, r2
 8008a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	697a      	ldr	r2, [r7, #20]
 8008a8a:	0151      	lsls	r1, r2, #5
 8008a8c:	69ba      	ldr	r2, [r7, #24]
 8008a8e:	440a      	add	r2, r1
 8008a90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a98:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	61fb      	str	r3, [r7, #28]
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008aa6:	d81d      	bhi.n	8008ae4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	015a      	lsls	r2, r3, #5
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008aba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008abe:	d0ec      	beq.n	8008a9a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ac0:	e080      	b.n	8008bc4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	015a      	lsls	r2, r3, #5
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	4413      	add	r3, r2
 8008aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	0151      	lsls	r1, r2, #5
 8008ad4:	69ba      	ldr	r2, [r7, #24]
 8008ad6:	440a      	add	r2, r1
 8008ad8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008adc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ae0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ae2:	e06f      	b.n	8008bc4 <USB_HC_Halt+0x22a>
            break;
 8008ae4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ae6:	e06d      	b.n	8008bc4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	015a      	lsls	r2, r3, #5
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	4413      	add	r3, r2
 8008af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	0151      	lsls	r1, r2, #5
 8008afa:	69ba      	ldr	r2, [r7, #24]
 8008afc:	440a      	add	r2, r1
 8008afe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b06:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d143      	bne.n	8008ba0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	0151      	lsls	r1, r2, #5
 8008b2a:	69ba      	ldr	r2, [r7, #24]
 8008b2c:	440a      	add	r2, r1
 8008b2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b36:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	015a      	lsls	r2, r3, #5
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	4413      	add	r3, r2
 8008b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	0151      	lsls	r1, r2, #5
 8008b4a:	69ba      	ldr	r2, [r7, #24]
 8008b4c:	440a      	add	r2, r1
 8008b4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b56:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	0151      	lsls	r1, r2, #5
 8008b6a:	69ba      	ldr	r2, [r7, #24]
 8008b6c:	440a      	add	r2, r1
 8008b6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b76:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	61fb      	str	r3, [r7, #28]
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b84:	d81d      	bhi.n	8008bc2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	015a      	lsls	r2, r3, #5
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b9c:	d0ec      	beq.n	8008b78 <USB_HC_Halt+0x1de>
 8008b9e:	e011      	b.n	8008bc4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	015a      	lsls	r2, r3, #5
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	0151      	lsls	r1, r2, #5
 8008bb2:	69ba      	ldr	r2, [r7, #24]
 8008bb4:	440a      	add	r2, r1
 8008bb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bbe:	6013      	str	r3, [r2, #0]
 8008bc0:	e000      	b.n	8008bc4 <USB_HC_Halt+0x22a>
          break;
 8008bc2:	bf00      	nop
    }
  }

  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3724      	adds	r7, #36	; 0x24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
	...

08008bd4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b087      	sub	sp, #28
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	460b      	mov	r3, r1
 8008bde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008be4:	78fb      	ldrb	r3, [r7, #3]
 8008be6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008be8:	2301      	movs	r3, #1
 8008bea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	04da      	lsls	r2, r3, #19
 8008bf0:	4b15      	ldr	r3, [pc, #84]	; (8008c48 <USB_DoPing+0x74>)
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	0151      	lsls	r1, r2, #5
 8008bf8:	697a      	ldr	r2, [r7, #20]
 8008bfa:	440a      	add	r2, r1
 8008bfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c04:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	015a      	lsls	r2, r3, #5
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008c1c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c24:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	015a      	lsls	r2, r3, #5
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c32:	461a      	mov	r2, r3
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	371c      	adds	r7, #28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	1ff80000 	.word	0x1ff80000

08008c4c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b086      	sub	sp, #24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7ff f935 	bl	8007ecc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008c62:	2110      	movs	r1, #16
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f7ff f98f 	bl	8007f88 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7ff f9b0 	bl	8007fd0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008c70:	2300      	movs	r3, #0
 8008c72:	613b      	str	r3, [r7, #16]
 8008c74:	e01f      	b.n	8008cb6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	015a      	lsls	r2, r3, #5
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c8c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c94:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c9c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	015a      	lsls	r2, r3, #5
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008caa:	461a      	mov	r2, r3
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	613b      	str	r3, [r7, #16]
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	2b0f      	cmp	r3, #15
 8008cba:	d9dc      	bls.n	8008c76 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	613b      	str	r3, [r7, #16]
 8008cc0:	e034      	b.n	8008d2c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	015a      	lsls	r2, r3, #5
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cd8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ce0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ce8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	015a      	lsls	r2, r3, #5
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	617b      	str	r3, [r7, #20]
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d08:	d80c      	bhi.n	8008d24 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	015a      	lsls	r2, r3, #5
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	4413      	add	r3, r2
 8008d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d20:	d0ec      	beq.n	8008cfc <USB_StopHost+0xb0>
 8008d22:	e000      	b.n	8008d26 <USB_StopHost+0xda>
        break;
 8008d24:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	613b      	str	r3, [r7, #16]
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	2b0f      	cmp	r3, #15
 8008d30:	d9c7      	bls.n	8008cc2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d38:	461a      	mov	r2, r3
 8008d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d3e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d46:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f7ff f8ae 	bl	8007eaa <USB_EnableGlobalInt>

  return HAL_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3718      	adds	r7, #24
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008d58:	b590      	push	{r4, r7, lr}
 8008d5a:	b089      	sub	sp, #36	; 0x24
 8008d5c:	af04      	add	r7, sp, #16
 8008d5e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008d60:	2301      	movs	r3, #1
 8008d62:	2202      	movs	r2, #2
 8008d64:	2102      	movs	r1, #2
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fc66 	bl	8009638 <USBH_FindInterface>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
 8008d72:	2bff      	cmp	r3, #255	; 0xff
 8008d74:	d002      	beq.n	8008d7c <USBH_CDC_InterfaceInit+0x24>
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d901      	bls.n	8008d80 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	e13d      	b.n	8008ffc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fc3b 	bl	8009600 <USBH_SelectInterface>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008d8e:	7bbb      	ldrb	r3, [r7, #14]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008d94:	2302      	movs	r3, #2
 8008d96:	e131      	b.n	8008ffc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008d9e:	2050      	movs	r0, #80	; 0x50
 8008da0:	f002 fa00 	bl	800b1a4 <malloc>
 8008da4:	4603      	mov	r3, r0
 8008da6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dae:	69db      	ldr	r3, [r3, #28]
 8008db0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d101      	bne.n	8008dbc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008db8:	2302      	movs	r3, #2
 8008dba:	e11f      	b.n	8008ffc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008dbc:	2250      	movs	r2, #80	; 0x50
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	68b8      	ldr	r0, [r7, #8]
 8008dc2:	f002 f9ff 	bl	800b1c4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	211a      	movs	r1, #26
 8008dcc:	fb01 f303 	mul.w	r3, r1, r3
 8008dd0:	4413      	add	r3, r2
 8008dd2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	b25b      	sxtb	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	da15      	bge.n	8008e0a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	211a      	movs	r1, #26
 8008de4:	fb01 f303 	mul.w	r3, r1, r3
 8008de8:	4413      	add	r3, r2
 8008dea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008dee:	781a      	ldrb	r2, [r3, #0]
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008df4:	7bfb      	ldrb	r3, [r7, #15]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	211a      	movs	r1, #26
 8008dfa:	fb01 f303 	mul.w	r3, r1, r3
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008e04:	881a      	ldrh	r2, [r3, #0]
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	785b      	ldrb	r3, [r3, #1]
 8008e0e:	4619      	mov	r1, r3
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f001 fe32 	bl	800aa7a <USBH_AllocPipe>
 8008e16:	4603      	mov	r3, r0
 8008e18:	461a      	mov	r2, r3
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	7819      	ldrb	r1, [r3, #0]
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	7858      	ldrb	r0, [r3, #1]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	8952      	ldrh	r2, [r2, #10]
 8008e36:	9202      	str	r2, [sp, #8]
 8008e38:	2203      	movs	r2, #3
 8008e3a:	9201      	str	r2, [sp, #4]
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	4623      	mov	r3, r4
 8008e40:	4602      	mov	r2, r0
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f001 fdea 	bl	800aa1c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f002 f8f9 	bl	800b048 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008e56:	2300      	movs	r3, #0
 8008e58:	2200      	movs	r2, #0
 8008e5a:	210a      	movs	r1, #10
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 fbeb 	bl	8009638 <USBH_FindInterface>
 8008e62:	4603      	mov	r3, r0
 8008e64:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	2bff      	cmp	r3, #255	; 0xff
 8008e6a:	d002      	beq.n	8008e72 <USBH_CDC_InterfaceInit+0x11a>
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d901      	bls.n	8008e76 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008e72:	2302      	movs	r3, #2
 8008e74:	e0c2      	b.n	8008ffc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008e76:	7bfb      	ldrb	r3, [r7, #15]
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	211a      	movs	r1, #26
 8008e7c:	fb01 f303 	mul.w	r3, r1, r3
 8008e80:	4413      	add	r3, r2
 8008e82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	b25b      	sxtb	r3, r3
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	da16      	bge.n	8008ebc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008e8e:	7bfb      	ldrb	r3, [r7, #15]
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	211a      	movs	r1, #26
 8008e94:	fb01 f303 	mul.w	r3, r1, r3
 8008e98:	4413      	add	r3, r2
 8008e9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008e9e:	781a      	ldrb	r2, [r3, #0]
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ea4:	7bfb      	ldrb	r3, [r7, #15]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	211a      	movs	r1, #26
 8008eaa:	fb01 f303 	mul.w	r3, r1, r3
 8008eae:	4413      	add	r3, r2
 8008eb0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008eb4:	881a      	ldrh	r2, [r3, #0]
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	835a      	strh	r2, [r3, #26]
 8008eba:	e015      	b.n	8008ee8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	211a      	movs	r1, #26
 8008ec2:	fb01 f303 	mul.w	r3, r1, r3
 8008ec6:	4413      	add	r3, r2
 8008ec8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ecc:	781a      	ldrb	r2, [r3, #0]
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ed2:	7bfb      	ldrb	r3, [r7, #15]
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	211a      	movs	r1, #26
 8008ed8:	fb01 f303 	mul.w	r3, r1, r3
 8008edc:	4413      	add	r3, r2
 8008ede:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008ee2:	881a      	ldrh	r2, [r3, #0]
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008ee8:	7bfb      	ldrb	r3, [r7, #15]
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	211a      	movs	r1, #26
 8008eee:	fb01 f303 	mul.w	r3, r1, r3
 8008ef2:	4413      	add	r3, r2
 8008ef4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	b25b      	sxtb	r3, r3
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	da16      	bge.n	8008f2e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008f00:	7bfb      	ldrb	r3, [r7, #15]
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	211a      	movs	r1, #26
 8008f06:	fb01 f303 	mul.w	r3, r1, r3
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008f10:	781a      	ldrb	r2, [r3, #0]
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008f16:	7bfb      	ldrb	r3, [r7, #15]
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	211a      	movs	r1, #26
 8008f1c:	fb01 f303 	mul.w	r3, r1, r3
 8008f20:	4413      	add	r3, r2
 8008f22:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008f26:	881a      	ldrh	r2, [r3, #0]
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	835a      	strh	r2, [r3, #26]
 8008f2c:	e015      	b.n	8008f5a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	211a      	movs	r1, #26
 8008f34:	fb01 f303 	mul.w	r3, r1, r3
 8008f38:	4413      	add	r3, r2
 8008f3a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008f3e:	781a      	ldrb	r2, [r3, #0]
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008f44:	7bfb      	ldrb	r3, [r7, #15]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	211a      	movs	r1, #26
 8008f4a:	fb01 f303 	mul.w	r3, r1, r3
 8008f4e:	4413      	add	r3, r2
 8008f50:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008f54:	881a      	ldrh	r2, [r3, #0]
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	7b9b      	ldrb	r3, [r3, #14]
 8008f5e:	4619      	mov	r1, r3
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f001 fd8a 	bl	800aa7a <USBH_AllocPipe>
 8008f66:	4603      	mov	r3, r0
 8008f68:	461a      	mov	r2, r3
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	7bdb      	ldrb	r3, [r3, #15]
 8008f72:	4619      	mov	r1, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f001 fd80 	bl	800aa7a <USBH_AllocPipe>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	7b59      	ldrb	r1, [r3, #13]
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	7b98      	ldrb	r0, [r3, #14]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f96:	68ba      	ldr	r2, [r7, #8]
 8008f98:	8b12      	ldrh	r2, [r2, #24]
 8008f9a:	9202      	str	r2, [sp, #8]
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	9201      	str	r2, [sp, #4]
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	4623      	mov	r3, r4
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f001 fd38 	bl	800aa1c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	7b19      	ldrb	r1, [r3, #12]
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	7bd8      	ldrb	r0, [r3, #15]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008fc0:	68ba      	ldr	r2, [r7, #8]
 8008fc2:	8b52      	ldrh	r2, [r2, #26]
 8008fc4:	9202      	str	r2, [sp, #8]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	9201      	str	r2, [sp, #4]
 8008fca:	9300      	str	r3, [sp, #0]
 8008fcc:	4623      	mov	r3, r4
 8008fce:	4602      	mov	r2, r0
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f001 fd23 	bl	800aa1c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	7b5b      	ldrb	r3, [r3, #13]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f002 f82e 	bl	800b048 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	7b1b      	ldrb	r3, [r3, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f002 f827 	bl	800b048 <USBH_LL_SetToggle>

  return USBH_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3714      	adds	r7, #20
 8009000:	46bd      	mov	sp, r7
 8009002:	bd90      	pop	{r4, r7, pc}

08009004 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009012:	69db      	ldr	r3, [r3, #28]
 8009014:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00e      	beq.n	800903c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	4619      	mov	r1, r3
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f001 fd18 	bl	800aa5a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	4619      	mov	r1, r3
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f001 fd43 	bl	800aabc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	7b1b      	ldrb	r3, [r3, #12]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00e      	beq.n	8009062 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	7b1b      	ldrb	r3, [r3, #12]
 8009048:	4619      	mov	r1, r3
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f001 fd05 	bl	800aa5a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	7b1b      	ldrb	r3, [r3, #12]
 8009054:	4619      	mov	r1, r3
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f001 fd30 	bl	800aabc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	7b5b      	ldrb	r3, [r3, #13]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00e      	beq.n	8009088 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	7b5b      	ldrb	r3, [r3, #13]
 800906e:	4619      	mov	r1, r3
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f001 fcf2 	bl	800aa5a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	7b5b      	ldrb	r3, [r3, #13]
 800907a:	4619      	mov	r1, r3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f001 fd1d 	bl	800aabc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800908e:	69db      	ldr	r3, [r3, #28]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00b      	beq.n	80090ac <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800909a:	69db      	ldr	r3, [r3, #28]
 800909c:	4618      	mov	r0, r3
 800909e:	f002 f889 	bl	800b1b4 <free>
    phost->pActiveClass->pData = 0U;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090a8:	2200      	movs	r2, #0
 80090aa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b084      	sub	sp, #16
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090c4:	69db      	ldr	r3, [r3, #28]
 80090c6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	3340      	adds	r3, #64	; 0x40
 80090cc:	4619      	mov	r1, r3
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f8b1 	bl	8009236 <GetLineCoding>
 80090d4:	4603      	mov	r3, r0
 80090d6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80090d8:	7afb      	ldrb	r3, [r7, #11]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d105      	bne.n	80090ea <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80090e4:	2102      	movs	r1, #2
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80090ea:	7afb      	ldrb	r3, [r7, #11]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80090fc:	2301      	movs	r3, #1
 80090fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800910a:	69db      	ldr	r3, [r3, #28]
 800910c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009114:	2b04      	cmp	r3, #4
 8009116:	d877      	bhi.n	8009208 <USBH_CDC_Process+0x114>
 8009118:	a201      	add	r2, pc, #4	; (adr r2, 8009120 <USBH_CDC_Process+0x2c>)
 800911a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911e:	bf00      	nop
 8009120:	08009135 	.word	0x08009135
 8009124:	0800913b 	.word	0x0800913b
 8009128:	0800916b 	.word	0x0800916b
 800912c:	080091df 	.word	0x080091df
 8009130:	080091ed 	.word	0x080091ed
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	73fb      	strb	r3, [r7, #15]
      break;
 8009138:	e06d      	b.n	8009216 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800913e:	4619      	mov	r1, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f897 	bl	8009274 <SetLineCoding>
 8009146:	4603      	mov	r3, r0
 8009148:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800914a:	7bbb      	ldrb	r3, [r7, #14]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d104      	bne.n	800915a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	2202      	movs	r2, #2
 8009154:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009158:	e058      	b.n	800920c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800915a:	7bbb      	ldrb	r3, [r7, #14]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d055      	beq.n	800920c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	2204      	movs	r2, #4
 8009164:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009168:	e050      	b.n	800920c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	3340      	adds	r3, #64	; 0x40
 800916e:	4619      	mov	r1, r3
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 f860 	bl	8009236 <GetLineCoding>
 8009176:	4603      	mov	r3, r0
 8009178:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800917a:	7bbb      	ldrb	r3, [r7, #14]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d126      	bne.n	80091ce <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	2200      	movs	r2, #0
 8009184:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009192:	791b      	ldrb	r3, [r3, #4]
 8009194:	429a      	cmp	r2, r3
 8009196:	d13b      	bne.n	8009210 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091a2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d133      	bne.n	8009210 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091b2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d12b      	bne.n	8009210 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091c0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d124      	bne.n	8009210 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f958 	bl	800947c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80091cc:	e020      	b.n	8009210 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d01d      	beq.n	8009210 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	2204      	movs	r2, #4
 80091d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80091dc:	e018      	b.n	8009210 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f867 	bl	80092b2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 f8da 	bl	800939e <CDC_ProcessReception>
      break;
 80091ea:	e014      	b.n	8009216 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80091ec:	2100      	movs	r1, #0
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 ffe3 	bl	800a1ba <USBH_ClrFeature>
 80091f4:	4603      	mov	r3, r0
 80091f6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80091f8:	7bbb      	ldrb	r3, [r7, #14]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10a      	bne.n	8009214 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	2200      	movs	r2, #0
 8009202:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009206:	e005      	b.n	8009214 <USBH_CDC_Process+0x120>

    default:
      break;
 8009208:	bf00      	nop
 800920a:	e004      	b.n	8009216 <USBH_CDC_Process+0x122>
      break;
 800920c:	bf00      	nop
 800920e:	e002      	b.n	8009216 <USBH_CDC_Process+0x122>
      break;
 8009210:	bf00      	nop
 8009212:	e000      	b.n	8009216 <USBH_CDC_Process+0x122>
      break;
 8009214:	bf00      	nop

  }

  return status;
 8009216:	7bfb      	ldrb	r3, [r7, #15]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	370c      	adds	r7, #12
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr

08009236 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b082      	sub	sp, #8
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	22a1      	movs	r2, #161	; 0xa1
 8009244:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2221      	movs	r2, #33	; 0x21
 800924a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2207      	movs	r2, #7
 800925c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	2207      	movs	r2, #7
 8009262:	4619      	mov	r1, r3
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f001 f988 	bl	800a57a <USBH_CtlReq>
 800926a:	4603      	mov	r3, r0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2221      	movs	r2, #33	; 0x21
 8009282:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2220      	movs	r2, #32
 8009288:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2207      	movs	r2, #7
 800929a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	2207      	movs	r2, #7
 80092a0:	4619      	mov	r1, r3
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f001 f969 	bl	800a57a <USBH_CtlReq>
 80092a8:	4603      	mov	r3, r0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b086      	sub	sp, #24
 80092b6:	af02      	add	r7, sp, #8
 80092b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092c0:	69db      	ldr	r3, [r3, #28]
 80092c2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80092c4:	2300      	movs	r3, #0
 80092c6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d002      	beq.n	80092d8 <CDC_ProcessTransmission+0x26>
 80092d2:	2b02      	cmp	r3, #2
 80092d4:	d023      	beq.n	800931e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80092d6:	e05e      	b.n	8009396 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	8b12      	ldrh	r2, [r2, #24]
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d90b      	bls.n	80092fc <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	69d9      	ldr	r1, [r3, #28]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	8b1a      	ldrh	r2, [r3, #24]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	7b5b      	ldrb	r3, [r3, #13]
 80092f0:	2001      	movs	r0, #1
 80092f2:	9000      	str	r0, [sp, #0]
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f001 fb4e 	bl	800a996 <USBH_BulkSendData>
 80092fa:	e00b      	b.n	8009314 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009304:	b29a      	uxth	r2, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	7b5b      	ldrb	r3, [r3, #13]
 800930a:	2001      	movs	r0, #1
 800930c:	9000      	str	r0, [sp, #0]
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f001 fb41 	bl	800a996 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2202      	movs	r2, #2
 8009318:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800931c:	e03b      	b.n	8009396 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	7b5b      	ldrb	r3, [r3, #13]
 8009322:	4619      	mov	r1, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f001 fe65 	bl	800aff4 <USBH_LL_GetURBState>
 800932a:	4603      	mov	r3, r0
 800932c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800932e:	7afb      	ldrb	r3, [r7, #11]
 8009330:	2b01      	cmp	r3, #1
 8009332:	d128      	bne.n	8009386 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	8b12      	ldrh	r2, [r2, #24]
 800933c:	4293      	cmp	r3, r2
 800933e:	d90e      	bls.n	800935e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	8b12      	ldrh	r2, [r2, #24]
 8009348:	1a9a      	subs	r2, r3, r2
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	69db      	ldr	r3, [r3, #28]
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	8b12      	ldrh	r2, [r2, #24]
 8009356:	441a      	add	r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	61da      	str	r2, [r3, #28]
 800935c:	e002      	b.n	8009364 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009368:	2b00      	cmp	r3, #0
 800936a:	d004      	beq.n	8009376 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009374:	e00e      	b.n	8009394 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f868 	bl	8009454 <USBH_CDC_TransmitCallback>
      break;
 8009384:	e006      	b.n	8009394 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009386:	7afb      	ldrb	r3, [r7, #11]
 8009388:	2b02      	cmp	r3, #2
 800938a:	d103      	bne.n	8009394 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009394:	bf00      	nop
  }
}
 8009396:	bf00      	nop
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b086      	sub	sp, #24
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093ac:	69db      	ldr	r3, [r3, #28]
 80093ae:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80093b0:	2300      	movs	r3, #0
 80093b2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80093ba:	2b03      	cmp	r3, #3
 80093bc:	d002      	beq.n	80093c4 <CDC_ProcessReception+0x26>
 80093be:	2b04      	cmp	r3, #4
 80093c0:	d00e      	beq.n	80093e0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80093c2:	e043      	b.n	800944c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	6a19      	ldr	r1, [r3, #32]
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	8b5a      	ldrh	r2, [r3, #26]
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	7b1b      	ldrb	r3, [r3, #12]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f001 fb05 	bl	800a9e0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	2204      	movs	r2, #4
 80093da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80093de:	e035      	b.n	800944c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	7b1b      	ldrb	r3, [r3, #12]
 80093e4:	4619      	mov	r1, r3
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f001 fe04 	bl	800aff4 <USBH_LL_GetURBState>
 80093ec:	4603      	mov	r3, r0
 80093ee:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80093f0:	7cfb      	ldrb	r3, [r7, #19]
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d129      	bne.n	800944a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	7b1b      	ldrb	r3, [r3, #12]
 80093fa:	4619      	mov	r1, r3
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f001 fd67 	bl	800aed0 <USBH_LL_GetLastXferSize>
 8009402:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	429a      	cmp	r2, r3
 800940c:	d016      	beq.n	800943c <CDC_ProcessReception+0x9e>
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	8b5b      	ldrh	r3, [r3, #26]
 8009412:	461a      	mov	r2, r3
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	4293      	cmp	r3, r2
 8009418:	d910      	bls.n	800943c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	1ad2      	subs	r2, r2, r3
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	6a1a      	ldr	r2, [r3, #32]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	441a      	add	r2, r3
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	2203      	movs	r2, #3
 8009436:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800943a:	e006      	b.n	800944a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f80f 	bl	8009468 <USBH_CDC_ReceiveCallback>
      break;
 800944a:	bf00      	nop
  }
}
 800944c:	bf00      	nop
 800944e:	3718      	adds	r7, #24
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	4613      	mov	r3, r2
 800949c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d101      	bne.n	80094a8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80094a4:	2302      	movs	r3, #2
 80094a6:	e029      	b.n	80094fc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	79fa      	ldrb	r2, [r7, #7]
 80094ac:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f000 f81f 	bl	8009504 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d003      	beq.n	80094f4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f001 fc37 	bl	800ad68 <USBH_LL_Init>

  return USBH_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800950c:	2300      	movs	r3, #0
 800950e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009510:	2300      	movs	r3, #0
 8009512:	60fb      	str	r3, [r7, #12]
 8009514:	e009      	b.n	800952a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	33e0      	adds	r3, #224	; 0xe0
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4413      	add	r3, r2
 8009520:	2200      	movs	r2, #0
 8009522:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	3301      	adds	r3, #1
 8009528:	60fb      	str	r3, [r7, #12]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2b0e      	cmp	r3, #14
 800952e:	d9f2      	bls.n	8009516 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009530:	2300      	movs	r3, #0
 8009532:	60fb      	str	r3, [r7, #12]
 8009534:	e009      	b.n	800954a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	4413      	add	r3, r2
 800953c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009540:	2200      	movs	r2, #0
 8009542:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	3301      	adds	r3, #1
 8009548:	60fb      	str	r3, [r7, #12]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009550:	d3f1      	bcc.n	8009536 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2201      	movs	r2, #1
 8009562:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2240      	movs	r2, #64	; 0x40
 8009576:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2201      	movs	r2, #1
 800958a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3714      	adds	r7, #20
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d016      	beq.n	80095ee <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10e      	bne.n	80095e8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80095d0:	1c59      	adds	r1, r3, #1
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	33de      	adds	r3, #222	; 0xde
 80095dc:	6839      	ldr	r1, [r7, #0]
 80095de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	73fb      	strb	r3, [r7, #15]
 80095e6:	e004      	b.n	80095f2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80095e8:	2302      	movs	r3, #2
 80095ea:	73fb      	strb	r3, [r7, #15]
 80095ec:	e001      	b.n	80095f2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80095ee:	2302      	movs	r3, #2
 80095f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80095f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3714      	adds	r7, #20
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009600:	b480      	push	{r7}
 8009602:	b085      	sub	sp, #20
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	460b      	mov	r3, r1
 800960a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800960c:	2300      	movs	r3, #0
 800960e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009616:	78fa      	ldrb	r2, [r7, #3]
 8009618:	429a      	cmp	r2, r3
 800961a:	d204      	bcs.n	8009626 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	78fa      	ldrb	r2, [r7, #3]
 8009620:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009624:	e001      	b.n	800962a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009626:	2302      	movs	r3, #2
 8009628:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800962a:	7bfb      	ldrb	r3, [r7, #15]
}
 800962c:	4618      	mov	r0, r3
 800962e:	3714      	adds	r7, #20
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009638:	b480      	push	{r7}
 800963a:	b087      	sub	sp, #28
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	4608      	mov	r0, r1
 8009642:	4611      	mov	r1, r2
 8009644:	461a      	mov	r2, r3
 8009646:	4603      	mov	r3, r0
 8009648:	70fb      	strb	r3, [r7, #3]
 800964a:	460b      	mov	r3, r1
 800964c:	70bb      	strb	r3, [r7, #2]
 800964e:	4613      	mov	r3, r2
 8009650:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009652:	2300      	movs	r3, #0
 8009654:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009656:	2300      	movs	r3, #0
 8009658:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009660:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009662:	e025      	b.n	80096b0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009664:	7dfb      	ldrb	r3, [r7, #23]
 8009666:	221a      	movs	r2, #26
 8009668:	fb02 f303 	mul.w	r3, r2, r3
 800966c:	3308      	adds	r3, #8
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	4413      	add	r3, r2
 8009672:	3302      	adds	r3, #2
 8009674:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	795b      	ldrb	r3, [r3, #5]
 800967a:	78fa      	ldrb	r2, [r7, #3]
 800967c:	429a      	cmp	r2, r3
 800967e:	d002      	beq.n	8009686 <USBH_FindInterface+0x4e>
 8009680:	78fb      	ldrb	r3, [r7, #3]
 8009682:	2bff      	cmp	r3, #255	; 0xff
 8009684:	d111      	bne.n	80096aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800968a:	78ba      	ldrb	r2, [r7, #2]
 800968c:	429a      	cmp	r2, r3
 800968e:	d002      	beq.n	8009696 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009690:	78bb      	ldrb	r3, [r7, #2]
 8009692:	2bff      	cmp	r3, #255	; 0xff
 8009694:	d109      	bne.n	80096aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800969a:	787a      	ldrb	r2, [r7, #1]
 800969c:	429a      	cmp	r2, r3
 800969e:	d002      	beq.n	80096a6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80096a0:	787b      	ldrb	r3, [r7, #1]
 80096a2:	2bff      	cmp	r3, #255	; 0xff
 80096a4:	d101      	bne.n	80096aa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80096a6:	7dfb      	ldrb	r3, [r7, #23]
 80096a8:	e006      	b.n	80096b8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80096aa:	7dfb      	ldrb	r3, [r7, #23]
 80096ac:	3301      	adds	r3, #1
 80096ae:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80096b0:	7dfb      	ldrb	r3, [r7, #23]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d9d6      	bls.n	8009664 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80096b6:	23ff      	movs	r3, #255	; 0xff
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	371c      	adds	r7, #28
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f001 fb87 	bl	800ade0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80096d2:	2101      	movs	r1, #1
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f001 fca0 	bl	800b01a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3708      	adds	r7, #8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b088      	sub	sp, #32
 80096e8:	af04      	add	r7, sp, #16
 80096ea:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80096ec:	2302      	movs	r3, #2
 80096ee:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80096f0:	2300      	movs	r3, #0
 80096f2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d102      	bne.n	8009706 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2203      	movs	r2, #3
 8009704:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	b2db      	uxtb	r3, r3
 800970c:	2b0b      	cmp	r3, #11
 800970e:	f200 81b3 	bhi.w	8009a78 <USBH_Process+0x394>
 8009712:	a201      	add	r2, pc, #4	; (adr r2, 8009718 <USBH_Process+0x34>)
 8009714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009718:	08009749 	.word	0x08009749
 800971c:	0800977b 	.word	0x0800977b
 8009720:	080097e3 	.word	0x080097e3
 8009724:	08009a13 	.word	0x08009a13
 8009728:	08009a79 	.word	0x08009a79
 800972c:	08009887 	.word	0x08009887
 8009730:	080099b9 	.word	0x080099b9
 8009734:	080098bd 	.word	0x080098bd
 8009738:	080098dd 	.word	0x080098dd
 800973c:	080098fd 	.word	0x080098fd
 8009740:	0800992b 	.word	0x0800992b
 8009744:	080099fb 	.word	0x080099fb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800974e:	b2db      	uxtb	r3, r3
 8009750:	2b00      	cmp	r3, #0
 8009752:	f000 8193 	beq.w	8009a7c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2201      	movs	r2, #1
 800975a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800975c:	20c8      	movs	r0, #200	; 0xc8
 800975e:	f001 fca3 	bl	800b0a8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f001 fb99 	bl	800ae9a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009778:	e180      	b.n	8009a7c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009780:	2b01      	cmp	r3, #1
 8009782:	d107      	bne.n	8009794 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2202      	movs	r2, #2
 8009790:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009792:	e182      	b.n	8009a9a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800979a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800979e:	d914      	bls.n	80097ca <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80097a6:	3301      	adds	r3, #1
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80097b6:	2b03      	cmp	r3, #3
 80097b8:	d903      	bls.n	80097c2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	220d      	movs	r2, #13
 80097be:	701a      	strb	r2, [r3, #0]
      break;
 80097c0:	e16b      	b.n	8009a9a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	701a      	strb	r2, [r3, #0]
      break;
 80097c8:	e167      	b.n	8009a9a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80097d0:	f103 020a 	add.w	r2, r3, #10
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80097da:	200a      	movs	r0, #10
 80097dc:	f001 fc64 	bl	800b0a8 <USBH_Delay>
      break;
 80097e0:	e15b      	b.n	8009a9a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d005      	beq.n	80097f8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80097f2:	2104      	movs	r1, #4
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80097f8:	2064      	movs	r0, #100	; 0x64
 80097fa:	f001 fc55 	bl	800b0a8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f001 fb24 	bl	800ae4c <USBH_LL_GetSpeed>
 8009804:	4603      	mov	r3, r0
 8009806:	461a      	mov	r2, r3
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2205      	movs	r2, #5
 8009812:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009814:	2100      	movs	r1, #0
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f001 f92f 	bl	800aa7a <USBH_AllocPipe>
 800981c:	4603      	mov	r3, r0
 800981e:	461a      	mov	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009824:	2180      	movs	r1, #128	; 0x80
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f001 f927 	bl	800aa7a <USBH_AllocPipe>
 800982c:	4603      	mov	r3, r0
 800982e:	461a      	mov	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	7919      	ldrb	r1, [r3, #4]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009848:	b292      	uxth	r2, r2
 800984a:	9202      	str	r2, [sp, #8]
 800984c:	2200      	movs	r2, #0
 800984e:	9201      	str	r2, [sp, #4]
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	4603      	mov	r3, r0
 8009854:	2280      	movs	r2, #128	; 0x80
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f001 f8e0 	bl	800aa1c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	7959      	ldrb	r1, [r3, #5]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009870:	b292      	uxth	r2, r2
 8009872:	9202      	str	r2, [sp, #8]
 8009874:	2200      	movs	r2, #0
 8009876:	9201      	str	r2, [sp, #4]
 8009878:	9300      	str	r3, [sp, #0]
 800987a:	4603      	mov	r3, r0
 800987c:	2200      	movs	r2, #0
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f001 f8cc 	bl	800aa1c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009884:	e109      	b.n	8009a9a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f90c 	bl	8009aa4 <USBH_HandleEnum>
 800988c:	4603      	mov	r3, r0
 800988e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009890:	7bbb      	ldrb	r3, [r7, #14]
 8009892:	b2db      	uxtb	r3, r3
 8009894:	2b00      	cmp	r3, #0
 8009896:	f040 80f3 	bne.w	8009a80 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d103      	bne.n	80098b4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2208      	movs	r2, #8
 80098b0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80098b2:	e0e5      	b.n	8009a80 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2207      	movs	r2, #7
 80098b8:	701a      	strb	r2, [r3, #0]
      break;
 80098ba:	e0e1      	b.n	8009a80 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f000 80de 	beq.w	8009a84 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80098ce:	2101      	movs	r1, #1
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2208      	movs	r2, #8
 80098d8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80098da:	e0d3      	b.n	8009a84 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	4619      	mov	r1, r3
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fc20 	bl	800a12c <USBH_SetCfg>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f040 80ca 	bne.w	8009a88 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2209      	movs	r2, #9
 80098f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80098fa:	e0c5      	b.n	8009a88 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009902:	f003 0320 	and.w	r3, r3, #32
 8009906:	2b00      	cmp	r3, #0
 8009908:	d00b      	beq.n	8009922 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800990a:	2101      	movs	r1, #1
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 fc30 	bl	800a172 <USBH_SetFeature>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	f040 80b9 	bne.w	8009a8c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	220a      	movs	r2, #10
 800991e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009920:	e0b4      	b.n	8009a8c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	220a      	movs	r2, #10
 8009926:	701a      	strb	r2, [r3, #0]
      break;
 8009928:	e0b0      	b.n	8009a8c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009930:	2b00      	cmp	r3, #0
 8009932:	f000 80ad 	beq.w	8009a90 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800993e:	2300      	movs	r3, #0
 8009940:	73fb      	strb	r3, [r7, #15]
 8009942:	e016      	b.n	8009972 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009944:	7bfa      	ldrb	r2, [r7, #15]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	32de      	adds	r2, #222	; 0xde
 800994a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800994e:	791a      	ldrb	r2, [r3, #4]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009956:	429a      	cmp	r2, r3
 8009958:	d108      	bne.n	800996c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800995a:	7bfa      	ldrb	r2, [r7, #15]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	32de      	adds	r2, #222	; 0xde
 8009960:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800996a:	e005      	b.n	8009978 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800996c:	7bfb      	ldrb	r3, [r7, #15]
 800996e:	3301      	adds	r3, #1
 8009970:	73fb      	strb	r3, [r7, #15]
 8009972:	7bfb      	ldrb	r3, [r7, #15]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d0e5      	beq.n	8009944 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800997e:	2b00      	cmp	r3, #0
 8009980:	d016      	beq.n	80099b0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	4798      	blx	r3
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d109      	bne.n	80099a8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2206      	movs	r2, #6
 8009998:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80099a0:	2103      	movs	r1, #3
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80099a6:	e073      	b.n	8009a90 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	220d      	movs	r2, #13
 80099ac:	701a      	strb	r2, [r3, #0]
      break;
 80099ae:	e06f      	b.n	8009a90 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	220d      	movs	r2, #13
 80099b4:	701a      	strb	r2, [r3, #0]
      break;
 80099b6:	e06b      	b.n	8009a90 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d017      	beq.n	80099f2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	4798      	blx	r3
 80099ce:	4603      	mov	r3, r0
 80099d0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80099d2:	7bbb      	ldrb	r3, [r7, #14]
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d103      	bne.n	80099e2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	220b      	movs	r2, #11
 80099de:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80099e0:	e058      	b.n	8009a94 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80099e2:	7bbb      	ldrb	r3, [r7, #14]
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d154      	bne.n	8009a94 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	220d      	movs	r2, #13
 80099ee:	701a      	strb	r2, [r3, #0]
      break;
 80099f0:	e050      	b.n	8009a94 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	220d      	movs	r2, #13
 80099f6:	701a      	strb	r2, [r3, #0]
      break;
 80099f8:	e04c      	b.n	8009a94 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d049      	beq.n	8009a98 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a0a:	695b      	ldr	r3, [r3, #20]
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	4798      	blx	r3
      }
      break;
 8009a10:	e042      	b.n	8009a98 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f7ff fd72 	bl	8009504 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d009      	beq.n	8009a3e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d005      	beq.n	8009a54 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a4e:	2105      	movs	r1, #5
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d107      	bne.n	8009a70 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f7ff fe2b 	bl	80096c4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009a6e:	e014      	b.n	8009a9a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f001 f9b5 	bl	800ade0 <USBH_LL_Start>
      break;
 8009a76:	e010      	b.n	8009a9a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009a78:	bf00      	nop
 8009a7a:	e00e      	b.n	8009a9a <USBH_Process+0x3b6>
      break;
 8009a7c:	bf00      	nop
 8009a7e:	e00c      	b.n	8009a9a <USBH_Process+0x3b6>
      break;
 8009a80:	bf00      	nop
 8009a82:	e00a      	b.n	8009a9a <USBH_Process+0x3b6>
    break;
 8009a84:	bf00      	nop
 8009a86:	e008      	b.n	8009a9a <USBH_Process+0x3b6>
      break;
 8009a88:	bf00      	nop
 8009a8a:	e006      	b.n	8009a9a <USBH_Process+0x3b6>
      break;
 8009a8c:	bf00      	nop
 8009a8e:	e004      	b.n	8009a9a <USBH_Process+0x3b6>
      break;
 8009a90:	bf00      	nop
 8009a92:	e002      	b.n	8009a9a <USBH_Process+0x3b6>
      break;
 8009a94:	bf00      	nop
 8009a96:	e000      	b.n	8009a9a <USBH_Process+0x3b6>
      break;
 8009a98:	bf00      	nop
  }
  return USBH_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3710      	adds	r7, #16
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b088      	sub	sp, #32
 8009aa8:	af04      	add	r7, sp, #16
 8009aaa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009aac:	2301      	movs	r3, #1
 8009aae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	785b      	ldrb	r3, [r3, #1]
 8009ab8:	2b07      	cmp	r3, #7
 8009aba:	f200 81c1 	bhi.w	8009e40 <USBH_HandleEnum+0x39c>
 8009abe:	a201      	add	r2, pc, #4	; (adr r2, 8009ac4 <USBH_HandleEnum+0x20>)
 8009ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac4:	08009ae5 	.word	0x08009ae5
 8009ac8:	08009ba3 	.word	0x08009ba3
 8009acc:	08009c0d 	.word	0x08009c0d
 8009ad0:	08009c9b 	.word	0x08009c9b
 8009ad4:	08009d05 	.word	0x08009d05
 8009ad8:	08009d75 	.word	0x08009d75
 8009adc:	08009dbb 	.word	0x08009dbb
 8009ae0:	08009e01 	.word	0x08009e01
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009ae4:	2108      	movs	r1, #8
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fa50 	bl	8009f8c <USBH_Get_DevDesc>
 8009aec:	4603      	mov	r3, r0
 8009aee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009af0:	7bbb      	ldrb	r3, [r7, #14]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d130      	bne.n	8009b58 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	7919      	ldrb	r1, [r3, #4]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009b1a:	b292      	uxth	r2, r2
 8009b1c:	9202      	str	r2, [sp, #8]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	9201      	str	r2, [sp, #4]
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	4603      	mov	r3, r0
 8009b26:	2280      	movs	r2, #128	; 0x80
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 ff77 	bl	800aa1c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	7959      	ldrb	r1, [r3, #5]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b42:	b292      	uxth	r2, r2
 8009b44:	9202      	str	r2, [sp, #8]
 8009b46:	2200      	movs	r2, #0
 8009b48:	9201      	str	r2, [sp, #4]
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2200      	movs	r2, #0
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 ff63 	bl	800aa1c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009b56:	e175      	b.n	8009e44 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b58:	7bbb      	ldrb	r3, [r7, #14]
 8009b5a:	2b03      	cmp	r3, #3
 8009b5c:	f040 8172 	bne.w	8009e44 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b66:	3301      	adds	r3, #1
 8009b68:	b2da      	uxtb	r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b76:	2b03      	cmp	r3, #3
 8009b78:	d903      	bls.n	8009b82 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	220d      	movs	r2, #13
 8009b7e:	701a      	strb	r2, [r3, #0]
      break;
 8009b80:	e160      	b.n	8009e44 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	795b      	ldrb	r3, [r3, #5]
 8009b86:	4619      	mov	r1, r3
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 ff97 	bl	800aabc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	791b      	ldrb	r3, [r3, #4]
 8009b92:	4619      	mov	r1, r3
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 ff91 	bl	800aabc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	701a      	strb	r2, [r3, #0]
      break;
 8009ba0:	e150      	b.n	8009e44 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009ba2:	2112      	movs	r1, #18
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 f9f1 	bl	8009f8c <USBH_Get_DevDesc>
 8009baa:	4603      	mov	r3, r0
 8009bac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009bae:	7bbb      	ldrb	r3, [r7, #14]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d103      	bne.n	8009bbc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2202      	movs	r2, #2
 8009bb8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009bba:	e145      	b.n	8009e48 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009bbc:	7bbb      	ldrb	r3, [r7, #14]
 8009bbe:	2b03      	cmp	r3, #3
 8009bc0:	f040 8142 	bne.w	8009e48 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009bca:	3301      	adds	r3, #1
 8009bcc:	b2da      	uxtb	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009bda:	2b03      	cmp	r3, #3
 8009bdc:	d903      	bls.n	8009be6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	220d      	movs	r2, #13
 8009be2:	701a      	strb	r2, [r3, #0]
      break;
 8009be4:	e130      	b.n	8009e48 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	795b      	ldrb	r3, [r3, #5]
 8009bea:	4619      	mov	r1, r3
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 ff65 	bl	800aabc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	791b      	ldrb	r3, [r3, #4]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 ff5f 	bl	800aabc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	701a      	strb	r2, [r3, #0]
      break;
 8009c0a:	e11d      	b.n	8009e48 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009c0c:	2101      	movs	r1, #1
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fa68 	bl	800a0e4 <USBH_SetAddress>
 8009c14:	4603      	mov	r3, r0
 8009c16:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009c18:	7bbb      	ldrb	r3, [r7, #14]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d132      	bne.n	8009c84 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009c1e:	2002      	movs	r0, #2
 8009c20:	f001 fa42 	bl	800b0a8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2201      	movs	r2, #1
 8009c28:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2203      	movs	r2, #3
 8009c30:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	7919      	ldrb	r1, [r3, #4]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009c46:	b292      	uxth	r2, r2
 8009c48:	9202      	str	r2, [sp, #8]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	9201      	str	r2, [sp, #4]
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	4603      	mov	r3, r0
 8009c52:	2280      	movs	r2, #128	; 0x80
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fee1 	bl	800aa1c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	7959      	ldrb	r1, [r3, #5]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c6e:	b292      	uxth	r2, r2
 8009c70:	9202      	str	r2, [sp, #8]
 8009c72:	2200      	movs	r2, #0
 8009c74:	9201      	str	r2, [sp, #4]
 8009c76:	9300      	str	r3, [sp, #0]
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fecd 	bl	800aa1c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009c82:	e0e3      	b.n	8009e4c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c84:	7bbb      	ldrb	r3, [r7, #14]
 8009c86:	2b03      	cmp	r3, #3
 8009c88:	f040 80e0 	bne.w	8009e4c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	220d      	movs	r2, #13
 8009c90:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	705a      	strb	r2, [r3, #1]
      break;
 8009c98:	e0d8      	b.n	8009e4c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009c9a:	2109      	movs	r1, #9
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 f99d 	bl	8009fdc <USBH_Get_CfgDesc>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ca6:	7bbb      	ldrb	r3, [r7, #14]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d103      	bne.n	8009cb4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2204      	movs	r2, #4
 8009cb0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009cb2:	e0cd      	b.n	8009e50 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009cb4:	7bbb      	ldrb	r3, [r7, #14]
 8009cb6:	2b03      	cmp	r3, #3
 8009cb8:	f040 80ca 	bne.w	8009e50 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	b2da      	uxtb	r2, r3
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009cd2:	2b03      	cmp	r3, #3
 8009cd4:	d903      	bls.n	8009cde <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	220d      	movs	r2, #13
 8009cda:	701a      	strb	r2, [r3, #0]
      break;
 8009cdc:	e0b8      	b.n	8009e50 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	795b      	ldrb	r3, [r3, #5]
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 fee9 	bl	800aabc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	791b      	ldrb	r3, [r3, #4]
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 fee3 	bl	800aabc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	701a      	strb	r2, [r3, #0]
      break;
 8009d02:	e0a5      	b.n	8009e50 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 f965 	bl	8009fdc <USBH_Get_CfgDesc>
 8009d12:	4603      	mov	r3, r0
 8009d14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009d16:	7bbb      	ldrb	r3, [r7, #14]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d103      	bne.n	8009d24 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2205      	movs	r2, #5
 8009d20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009d22:	e097      	b.n	8009e54 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d24:	7bbb      	ldrb	r3, [r7, #14]
 8009d26:	2b03      	cmp	r3, #3
 8009d28:	f040 8094 	bne.w	8009e54 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009d32:	3301      	adds	r3, #1
 8009d34:	b2da      	uxtb	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009d42:	2b03      	cmp	r3, #3
 8009d44:	d903      	bls.n	8009d4e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	220d      	movs	r2, #13
 8009d4a:	701a      	strb	r2, [r3, #0]
      break;
 8009d4c:	e082      	b.n	8009e54 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	795b      	ldrb	r3, [r3, #5]
 8009d52:	4619      	mov	r1, r3
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 feb1 	bl	800aabc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	791b      	ldrb	r3, [r3, #4]
 8009d5e:	4619      	mov	r1, r3
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 feab 	bl	800aabc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	701a      	strb	r2, [r3, #0]
      break;
 8009d72:	e06f      	b.n	8009e54 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d019      	beq.n	8009db2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009d8a:	23ff      	movs	r3, #255	; 0xff
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 f949 	bl	800a024 <USBH_Get_StringDesc>
 8009d92:	4603      	mov	r3, r0
 8009d94:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009d96:	7bbb      	ldrb	r3, [r7, #14]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d103      	bne.n	8009da4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2206      	movs	r2, #6
 8009da0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009da2:	e059      	b.n	8009e58 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009da4:	7bbb      	ldrb	r3, [r7, #14]
 8009da6:	2b03      	cmp	r3, #3
 8009da8:	d156      	bne.n	8009e58 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2206      	movs	r2, #6
 8009dae:	705a      	strb	r2, [r3, #1]
      break;
 8009db0:	e052      	b.n	8009e58 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2206      	movs	r2, #6
 8009db6:	705a      	strb	r2, [r3, #1]
      break;
 8009db8:	e04e      	b.n	8009e58 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d019      	beq.n	8009df8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009dd0:	23ff      	movs	r3, #255	; 0xff
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f926 	bl	800a024 <USBH_Get_StringDesc>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009ddc:	7bbb      	ldrb	r3, [r7, #14]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d103      	bne.n	8009dea <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2207      	movs	r2, #7
 8009de6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009de8:	e038      	b.n	8009e5c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009dea:	7bbb      	ldrb	r3, [r7, #14]
 8009dec:	2b03      	cmp	r3, #3
 8009dee:	d135      	bne.n	8009e5c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2207      	movs	r2, #7
 8009df4:	705a      	strb	r2, [r3, #1]
      break;
 8009df6:	e031      	b.n	8009e5c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2207      	movs	r2, #7
 8009dfc:	705a      	strb	r2, [r3, #1]
      break;
 8009dfe:	e02d      	b.n	8009e5c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d017      	beq.n	8009e3a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009e16:	23ff      	movs	r3, #255	; 0xff
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 f903 	bl	800a024 <USBH_Get_StringDesc>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009e22:	7bbb      	ldrb	r3, [r7, #14]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d102      	bne.n	8009e2e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009e2c:	e018      	b.n	8009e60 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e2e:	7bbb      	ldrb	r3, [r7, #14]
 8009e30:	2b03      	cmp	r3, #3
 8009e32:	d115      	bne.n	8009e60 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	73fb      	strb	r3, [r7, #15]
      break;
 8009e38:	e012      	b.n	8009e60 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8009e3e:	e00f      	b.n	8009e60 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009e40:	bf00      	nop
 8009e42:	e00e      	b.n	8009e62 <USBH_HandleEnum+0x3be>
      break;
 8009e44:	bf00      	nop
 8009e46:	e00c      	b.n	8009e62 <USBH_HandleEnum+0x3be>
      break;
 8009e48:	bf00      	nop
 8009e4a:	e00a      	b.n	8009e62 <USBH_HandleEnum+0x3be>
      break;
 8009e4c:	bf00      	nop
 8009e4e:	e008      	b.n	8009e62 <USBH_HandleEnum+0x3be>
      break;
 8009e50:	bf00      	nop
 8009e52:	e006      	b.n	8009e62 <USBH_HandleEnum+0x3be>
      break;
 8009e54:	bf00      	nop
 8009e56:	e004      	b.n	8009e62 <USBH_HandleEnum+0x3be>
      break;
 8009e58:	bf00      	nop
 8009e5a:	e002      	b.n	8009e62 <USBH_HandleEnum+0x3be>
      break;
 8009e5c:	bf00      	nop
 8009e5e:	e000      	b.n	8009e62 <USBH_HandleEnum+0x3be>
      break;
 8009e60:	bf00      	nop
  }
  return Status;
 8009e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3710      	adds	r7, #16
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	683a      	ldr	r2, [r7, #0]
 8009e7a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009e7e:	bf00      	nop
 8009e80:	370c      	adds	r7, #12
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr

08009e8a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b082      	sub	sp, #8
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e98:	1c5a      	adds	r2, r3, #1
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 f804 	bl	8009eae <USBH_HandleSof>
}
 8009ea6:	bf00      	nop
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b082      	sub	sp, #8
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	2b0b      	cmp	r3, #11
 8009ebe:	d10a      	bne.n	8009ed6 <USBH_HandleSof+0x28>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d005      	beq.n	8009ed6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ed0:	699b      	ldr	r3, [r3, #24]
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	4798      	blx	r3
  }
}
 8009ed6:	bf00      	nop
 8009ed8:	3708      	adds	r7, #8
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009ede:	b480      	push	{r7}
 8009ee0:	b083      	sub	sp, #12
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009eee:	bf00      	nop
}
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009efa:	b480      	push	{r7}
 8009efc:	b083      	sub	sp, #12
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009f0a:	bf00      	nop
}
 8009f0c:	370c      	adds	r7, #12
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr

08009f16 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009f16:	b480      	push	{r7}
 8009f18:	b083      	sub	sp, #12
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2201      	movs	r2, #1
 8009f22:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009f36:	2300      	movs	r3, #0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 ff56 	bl	800ae16 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	791b      	ldrb	r3, [r3, #4]
 8009f6e:	4619      	mov	r1, r3
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 fda3 	bl	800aabc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	795b      	ldrb	r3, [r3, #5]
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 fd9d 	bl	800aabc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b086      	sub	sp, #24
 8009f90:	af02      	add	r7, sp, #8
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	460b      	mov	r3, r1
 8009f96:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009f9e:	78fb      	ldrb	r3, [r7, #3]
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009faa:	2100      	movs	r1, #0
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 f864 	bl	800a07a <USBH_GetDescriptor>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	73fb      	strb	r3, [r7, #15]
 8009fb6:	7bfb      	ldrb	r3, [r7, #15]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d10a      	bne.n	8009fd2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009fc8:	78fa      	ldrb	r2, [r7, #3]
 8009fca:	b292      	uxth	r2, r2
 8009fcc:	4619      	mov	r1, r3
 8009fce:	f000 f918 	bl	800a202 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3710      	adds	r7, #16
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b086      	sub	sp, #24
 8009fe0:	af02      	add	r7, sp, #8
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	331c      	adds	r3, #28
 8009fec:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009fee:	887b      	ldrh	r3, [r7, #2]
 8009ff0:	9300      	str	r3, [sp, #0]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f83d 	bl	800a07a <USBH_GetDescriptor>
 800a000:	4603      	mov	r3, r0
 800a002:	72fb      	strb	r3, [r7, #11]
 800a004:	7afb      	ldrb	r3, [r7, #11]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d107      	bne.n	800a01a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a010:	887a      	ldrh	r2, [r7, #2]
 800a012:	68f9      	ldr	r1, [r7, #12]
 800a014:	4618      	mov	r0, r3
 800a016:	f000 f964 	bl	800a2e2 <USBH_ParseCfgDesc>
  }

  return status;
 800a01a:	7afb      	ldrb	r3, [r7, #11]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b088      	sub	sp, #32
 800a028:	af02      	add	r7, sp, #8
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	607a      	str	r2, [r7, #4]
 800a02e:	461a      	mov	r2, r3
 800a030:	460b      	mov	r3, r1
 800a032:	72fb      	strb	r3, [r7, #11]
 800a034:	4613      	mov	r3, r2
 800a036:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a038:	7afb      	ldrb	r3, [r7, #11]
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a040:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a048:	893b      	ldrh	r3, [r7, #8]
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	460b      	mov	r3, r1
 800a04e:	2100      	movs	r1, #0
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f000 f812 	bl	800a07a <USBH_GetDescriptor>
 800a056:	4603      	mov	r3, r0
 800a058:	75fb      	strb	r3, [r7, #23]
 800a05a:	7dfb      	ldrb	r3, [r7, #23]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d107      	bne.n	800a070 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a066:	893a      	ldrh	r2, [r7, #8]
 800a068:	6879      	ldr	r1, [r7, #4]
 800a06a:	4618      	mov	r0, r3
 800a06c:	f000 fa37 	bl	800a4de <USBH_ParseStringDesc>
  }

  return status;
 800a070:	7dfb      	ldrb	r3, [r7, #23]
}
 800a072:	4618      	mov	r0, r3
 800a074:	3718      	adds	r7, #24
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b084      	sub	sp, #16
 800a07e:	af00      	add	r7, sp, #0
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	607b      	str	r3, [r7, #4]
 800a084:	460b      	mov	r3, r1
 800a086:	72fb      	strb	r3, [r7, #11]
 800a088:	4613      	mov	r3, r2
 800a08a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	789b      	ldrb	r3, [r3, #2]
 800a090:	2b01      	cmp	r3, #1
 800a092:	d11c      	bne.n	800a0ce <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a094:	7afb      	ldrb	r3, [r7, #11]
 800a096:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a09a:	b2da      	uxtb	r2, r3
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2206      	movs	r2, #6
 800a0a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	893a      	ldrh	r2, [r7, #8]
 800a0aa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a0ac:	893b      	ldrh	r3, [r7, #8]
 800a0ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a0b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0b6:	d104      	bne.n	800a0c2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f240 4209 	movw	r2, #1033	; 0x409
 800a0be:	829a      	strh	r2, [r3, #20]
 800a0c0:	e002      	b.n	800a0c8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	8b3a      	ldrh	r2, [r7, #24]
 800a0cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a0ce:	8b3b      	ldrh	r3, [r7, #24]
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	6879      	ldr	r1, [r7, #4]
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 fa50 	bl	800a57a <USBH_CtlReq>
 800a0da:	4603      	mov	r3, r0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	789b      	ldrb	r3, [r3, #2]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d10f      	bne.n	800a118 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2205      	movs	r2, #5
 800a102:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a104:	78fb      	ldrb	r3, [r7, #3]
 800a106:	b29a      	uxth	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a118:	2200      	movs	r2, #0
 800a11a:	2100      	movs	r1, #0
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 fa2c 	bl	800a57a <USBH_CtlReq>
 800a122:	4603      	mov	r3, r0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3708      	adds	r7, #8
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	460b      	mov	r3, r1
 800a136:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	789b      	ldrb	r3, [r3, #2]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d10e      	bne.n	800a15e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2209      	movs	r2, #9
 800a14a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	887a      	ldrh	r2, [r7, #2]
 800a150:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2200      	movs	r2, #0
 800a156:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a15e:	2200      	movs	r2, #0
 800a160:	2100      	movs	r1, #0
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fa09 	bl	800a57a <USBH_CtlReq>
 800a168:	4603      	mov	r3, r0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3708      	adds	r7, #8
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b082      	sub	sp, #8
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	460b      	mov	r3, r1
 800a17c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	789b      	ldrb	r3, [r3, #2]
 800a182:	2b01      	cmp	r3, #1
 800a184:	d10f      	bne.n	800a1a6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2203      	movs	r2, #3
 800a190:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a192:	78fb      	ldrb	r3, [r7, #3]
 800a194:	b29a      	uxth	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 f9e5 	bl	800a57a <USBH_CtlReq>
 800a1b0:	4603      	mov	r3, r0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b082      	sub	sp, #8
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	789b      	ldrb	r3, [r3, #2]
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d10f      	bne.n	800a1ee <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2202      	movs	r2, #2
 800a1d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a1e0:	78fb      	ldrb	r3, [r7, #3]
 800a1e2:	b29a      	uxth	r2, r3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 f9c1 	bl	800a57a <USBH_CtlReq>
 800a1f8:	4603      	mov	r3, r0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3708      	adds	r7, #8
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a202:	b480      	push	{r7}
 800a204:	b085      	sub	sp, #20
 800a206:	af00      	add	r7, sp, #0
 800a208:	60f8      	str	r0, [r7, #12]
 800a20a:	60b9      	str	r1, [r7, #8]
 800a20c:	4613      	mov	r3, r2
 800a20e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	781a      	ldrb	r2, [r3, #0]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	785a      	ldrb	r2, [r3, #1]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	3302      	adds	r3, #2
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	b29a      	uxth	r2, r3
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	3303      	adds	r3, #3
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	b29b      	uxth	r3, r3
 800a230:	021b      	lsls	r3, r3, #8
 800a232:	b29b      	uxth	r3, r3
 800a234:	4313      	orrs	r3, r2
 800a236:	b29a      	uxth	r2, r3
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	791a      	ldrb	r2, [r3, #4]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	795a      	ldrb	r2, [r3, #5]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	799a      	ldrb	r2, [r3, #6]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	79da      	ldrb	r2, [r3, #7]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a25c:	88fb      	ldrh	r3, [r7, #6]
 800a25e:	2b08      	cmp	r3, #8
 800a260:	d939      	bls.n	800a2d6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	3308      	adds	r3, #8
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	b29a      	uxth	r2, r3
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	3309      	adds	r3, #9
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	b29b      	uxth	r3, r3
 800a272:	021b      	lsls	r3, r3, #8
 800a274:	b29b      	uxth	r3, r3
 800a276:	4313      	orrs	r3, r2
 800a278:	b29a      	uxth	r2, r3
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	330a      	adds	r3, #10
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	b29a      	uxth	r2, r3
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	330b      	adds	r3, #11
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	021b      	lsls	r3, r3, #8
 800a290:	b29b      	uxth	r3, r3
 800a292:	4313      	orrs	r3, r2
 800a294:	b29a      	uxth	r2, r3
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	330c      	adds	r3, #12
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	330d      	adds	r3, #13
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	021b      	lsls	r3, r3, #8
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	7b9a      	ldrb	r2, [r3, #14]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	7bda      	ldrb	r2, [r3, #15]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	7c1a      	ldrb	r2, [r3, #16]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	7c5a      	ldrb	r2, [r3, #17]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	745a      	strb	r2, [r3, #17]
  }
}
 800a2d6:	bf00      	nop
 800a2d8:	3714      	adds	r7, #20
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr

0800a2e2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b08a      	sub	sp, #40	; 0x28
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	60f8      	str	r0, [r7, #12]
 800a2ea:	60b9      	str	r1, [r7, #8]
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	781a      	ldrb	r2, [r3, #0]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	785a      	ldrb	r2, [r3, #1]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	3302      	adds	r3, #2
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	b29a      	uxth	r2, r3
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	3303      	adds	r3, #3
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	b29b      	uxth	r3, r3
 800a324:	021b      	lsls	r3, r3, #8
 800a326:	b29b      	uxth	r3, r3
 800a328:	4313      	orrs	r3, r2
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	791a      	ldrb	r2, [r3, #4]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	795a      	ldrb	r2, [r3, #5]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	799a      	ldrb	r2, [r3, #6]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	79da      	ldrb	r2, [r3, #7]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	7a1a      	ldrb	r2, [r3, #8]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a358:	88fb      	ldrh	r3, [r7, #6]
 800a35a:	2b09      	cmp	r3, #9
 800a35c:	d95f      	bls.n	800a41e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a35e:	2309      	movs	r3, #9
 800a360:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a362:	2300      	movs	r3, #0
 800a364:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a366:	e051      	b.n	800a40c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a368:	f107 0316 	add.w	r3, r7, #22
 800a36c:	4619      	mov	r1, r3
 800a36e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a370:	f000 f8e8 	bl	800a544 <USBH_GetNextDesc>
 800a374:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a378:	785b      	ldrb	r3, [r3, #1]
 800a37a:	2b04      	cmp	r3, #4
 800a37c:	d146      	bne.n	800a40c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a37e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a382:	221a      	movs	r2, #26
 800a384:	fb02 f303 	mul.w	r3, r2, r3
 800a388:	3308      	adds	r3, #8
 800a38a:	68fa      	ldr	r2, [r7, #12]
 800a38c:	4413      	add	r3, r2
 800a38e:	3302      	adds	r3, #2
 800a390:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a392:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a394:	69f8      	ldr	r0, [r7, #28]
 800a396:	f000 f846 	bl	800a426 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a39a:	2300      	movs	r3, #0
 800a39c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a3a4:	e022      	b.n	800a3ec <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a3a6:	f107 0316 	add.w	r3, r7, #22
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3ae:	f000 f8c9 	bl	800a544 <USBH_GetNextDesc>
 800a3b2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b6:	785b      	ldrb	r3, [r3, #1]
 800a3b8:	2b05      	cmp	r3, #5
 800a3ba:	d117      	bne.n	800a3ec <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a3bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a3c0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a3c4:	3201      	adds	r2, #1
 800a3c6:	00d2      	lsls	r2, r2, #3
 800a3c8:	211a      	movs	r1, #26
 800a3ca:	fb01 f303 	mul.w	r3, r1, r3
 800a3ce:	4413      	add	r3, r2
 800a3d0:	3308      	adds	r3, #8
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	3304      	adds	r3, #4
 800a3d8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a3da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3dc:	69b8      	ldr	r0, [r7, #24]
 800a3de:	f000 f851 	bl	800a484 <USBH_ParseEPDesc>
            ep_ix++;
 800a3e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	791b      	ldrb	r3, [r3, #4]
 800a3f0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d204      	bcs.n	800a402 <USBH_ParseCfgDesc+0x120>
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	885a      	ldrh	r2, [r3, #2]
 800a3fc:	8afb      	ldrh	r3, [r7, #22]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d8d1      	bhi.n	800a3a6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a402:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a406:	3301      	adds	r3, #1
 800a408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a40c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a410:	2b01      	cmp	r3, #1
 800a412:	d804      	bhi.n	800a41e <USBH_ParseCfgDesc+0x13c>
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	885a      	ldrh	r2, [r3, #2]
 800a418:	8afb      	ldrh	r3, [r7, #22]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d8a4      	bhi.n	800a368 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a41e:	bf00      	nop
 800a420:	3728      	adds	r7, #40	; 0x28
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a426:	b480      	push	{r7}
 800a428:	b083      	sub	sp, #12
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
 800a42e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	781a      	ldrb	r2, [r3, #0]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	785a      	ldrb	r2, [r3, #1]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	789a      	ldrb	r2, [r3, #2]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	78da      	ldrb	r2, [r3, #3]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	791a      	ldrb	r2, [r3, #4]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	795a      	ldrb	r2, [r3, #5]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	799a      	ldrb	r2, [r3, #6]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	79da      	ldrb	r2, [r3, #7]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	7a1a      	ldrb	r2, [r3, #8]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	721a      	strb	r2, [r3, #8]
}
 800a478:	bf00      	nop
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	781a      	ldrb	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	785a      	ldrb	r2, [r3, #1]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	789a      	ldrb	r2, [r3, #2]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	78da      	ldrb	r2, [r3, #3]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	b29a      	uxth	r2, r3
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	3305      	adds	r3, #5
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	021b      	lsls	r3, r3, #8
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	b29a      	uxth	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	799a      	ldrb	r2, [r3, #6]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	719a      	strb	r2, [r3, #6]
}
 800a4d2:	bf00      	nop
 800a4d4:	370c      	adds	r7, #12
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr

0800a4de <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a4de:	b480      	push	{r7}
 800a4e0:	b087      	sub	sp, #28
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	60f8      	str	r0, [r7, #12]
 800a4e6:	60b9      	str	r1, [r7, #8]
 800a4e8:	4613      	mov	r3, r2
 800a4ea:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	2b03      	cmp	r3, #3
 800a4f4:	d120      	bne.n	800a538 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	1e9a      	subs	r2, r3, #2
 800a4fc:	88fb      	ldrh	r3, [r7, #6]
 800a4fe:	4293      	cmp	r3, r2
 800a500:	bf28      	it	cs
 800a502:	4613      	movcs	r3, r2
 800a504:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	3302      	adds	r3, #2
 800a50a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a50c:	2300      	movs	r3, #0
 800a50e:	82fb      	strh	r3, [r7, #22]
 800a510:	e00b      	b.n	800a52a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a512:	8afb      	ldrh	r3, [r7, #22]
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	4413      	add	r3, r2
 800a518:	781a      	ldrb	r2, [r3, #0]
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	3301      	adds	r3, #1
 800a522:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a524:	8afb      	ldrh	r3, [r7, #22]
 800a526:	3302      	adds	r3, #2
 800a528:	82fb      	strh	r3, [r7, #22]
 800a52a:	8afa      	ldrh	r2, [r7, #22]
 800a52c:	8abb      	ldrh	r3, [r7, #20]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d3ef      	bcc.n	800a512 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	2200      	movs	r2, #0
 800a536:	701a      	strb	r2, [r3, #0]
  }
}
 800a538:	bf00      	nop
 800a53a:	371c      	adds	r7, #28
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	881a      	ldrh	r2, [r3, #0]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	b29b      	uxth	r3, r3
 800a558:	4413      	add	r3, r2
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4413      	add	r3, r2
 800a56a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a56c:	68fb      	ldr	r3, [r7, #12]
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3714      	adds	r7, #20
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr

0800a57a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b086      	sub	sp, #24
 800a57e:	af00      	add	r7, sp, #0
 800a580:	60f8      	str	r0, [r7, #12]
 800a582:	60b9      	str	r1, [r7, #8]
 800a584:	4613      	mov	r3, r2
 800a586:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a588:	2301      	movs	r3, #1
 800a58a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	789b      	ldrb	r3, [r3, #2]
 800a590:	2b01      	cmp	r3, #1
 800a592:	d002      	beq.n	800a59a <USBH_CtlReq+0x20>
 800a594:	2b02      	cmp	r3, #2
 800a596:	d00f      	beq.n	800a5b8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a598:	e027      	b.n	800a5ea <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	68ba      	ldr	r2, [r7, #8]
 800a59e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	88fa      	ldrh	r2, [r7, #6]
 800a5a4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2202      	movs	r2, #2
 800a5b0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	75fb      	strb	r3, [r7, #23]
      break;
 800a5b6:	e018      	b.n	800a5ea <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a5b8:	68f8      	ldr	r0, [r7, #12]
 800a5ba:	f000 f81b 	bl	800a5f4 <USBH_HandleControl>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a5c2:	7dfb      	ldrb	r3, [r7, #23]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d002      	beq.n	800a5ce <USBH_CtlReq+0x54>
 800a5c8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ca:	2b03      	cmp	r3, #3
 800a5cc:	d106      	bne.n	800a5dc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	761a      	strb	r2, [r3, #24]
      break;
 800a5da:	e005      	b.n	800a5e8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a5dc:	7dfb      	ldrb	r3, [r7, #23]
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d102      	bne.n	800a5e8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	709a      	strb	r2, [r3, #2]
      break;
 800a5e8:	bf00      	nop
  }
  return status;
 800a5ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3718      	adds	r7, #24
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b086      	sub	sp, #24
 800a5f8:	af02      	add	r7, sp, #8
 800a5fa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a600:	2300      	movs	r3, #0
 800a602:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	7e1b      	ldrb	r3, [r3, #24]
 800a608:	3b01      	subs	r3, #1
 800a60a:	2b0a      	cmp	r3, #10
 800a60c:	f200 8156 	bhi.w	800a8bc <USBH_HandleControl+0x2c8>
 800a610:	a201      	add	r2, pc, #4	; (adr r2, 800a618 <USBH_HandleControl+0x24>)
 800a612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a616:	bf00      	nop
 800a618:	0800a645 	.word	0x0800a645
 800a61c:	0800a65f 	.word	0x0800a65f
 800a620:	0800a6c9 	.word	0x0800a6c9
 800a624:	0800a6ef 	.word	0x0800a6ef
 800a628:	0800a727 	.word	0x0800a727
 800a62c:	0800a751 	.word	0x0800a751
 800a630:	0800a7a3 	.word	0x0800a7a3
 800a634:	0800a7c5 	.word	0x0800a7c5
 800a638:	0800a801 	.word	0x0800a801
 800a63c:	0800a827 	.word	0x0800a827
 800a640:	0800a865 	.word	0x0800a865
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f103 0110 	add.w	r1, r3, #16
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	795b      	ldrb	r3, [r3, #5]
 800a64e:	461a      	mov	r2, r3
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 f943 	bl	800a8dc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2202      	movs	r2, #2
 800a65a:	761a      	strb	r2, [r3, #24]
      break;
 800a65c:	e139      	b.n	800a8d2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	795b      	ldrb	r3, [r3, #5]
 800a662:	4619      	mov	r1, r3
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 fcc5 	bl	800aff4 <USBH_LL_GetURBState>
 800a66a:	4603      	mov	r3, r0
 800a66c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a66e:	7bbb      	ldrb	r3, [r7, #14]
 800a670:	2b01      	cmp	r3, #1
 800a672:	d11e      	bne.n	800a6b2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	7c1b      	ldrb	r3, [r3, #16]
 800a678:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a67c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	8adb      	ldrh	r3, [r3, #22]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00a      	beq.n	800a69c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a686:	7b7b      	ldrb	r3, [r7, #13]
 800a688:	2b80      	cmp	r3, #128	; 0x80
 800a68a:	d103      	bne.n	800a694 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2203      	movs	r2, #3
 800a690:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a692:	e115      	b.n	800a8c0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2205      	movs	r2, #5
 800a698:	761a      	strb	r2, [r3, #24]
      break;
 800a69a:	e111      	b.n	800a8c0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a69c:	7b7b      	ldrb	r3, [r7, #13]
 800a69e:	2b80      	cmp	r3, #128	; 0x80
 800a6a0:	d103      	bne.n	800a6aa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2209      	movs	r2, #9
 800a6a6:	761a      	strb	r2, [r3, #24]
      break;
 800a6a8:	e10a      	b.n	800a8c0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2207      	movs	r2, #7
 800a6ae:	761a      	strb	r2, [r3, #24]
      break;
 800a6b0:	e106      	b.n	800a8c0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a6b2:	7bbb      	ldrb	r3, [r7, #14]
 800a6b4:	2b04      	cmp	r3, #4
 800a6b6:	d003      	beq.n	800a6c0 <USBH_HandleControl+0xcc>
 800a6b8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	f040 8100 	bne.w	800a8c0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	220b      	movs	r2, #11
 800a6c4:	761a      	strb	r2, [r3, #24]
      break;
 800a6c6:	e0fb      	b.n	800a8c0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a6ce:	b29a      	uxth	r2, r3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6899      	ldr	r1, [r3, #8]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	899a      	ldrh	r2, [r3, #12]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	791b      	ldrb	r3, [r3, #4]
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 f93a 	bl	800a95a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2204      	movs	r2, #4
 800a6ea:	761a      	strb	r2, [r3, #24]
      break;
 800a6ec:	e0f1      	b.n	800a8d2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	791b      	ldrb	r3, [r3, #4]
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 fc7d 	bl	800aff4 <USBH_LL_GetURBState>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a6fe:	7bbb      	ldrb	r3, [r7, #14]
 800a700:	2b01      	cmp	r3, #1
 800a702:	d102      	bne.n	800a70a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2209      	movs	r2, #9
 800a708:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a70a:	7bbb      	ldrb	r3, [r7, #14]
 800a70c:	2b05      	cmp	r3, #5
 800a70e:	d102      	bne.n	800a716 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a710:	2303      	movs	r3, #3
 800a712:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a714:	e0d6      	b.n	800a8c4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a716:	7bbb      	ldrb	r3, [r7, #14]
 800a718:	2b04      	cmp	r3, #4
 800a71a:	f040 80d3 	bne.w	800a8c4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	220b      	movs	r2, #11
 800a722:	761a      	strb	r2, [r3, #24]
      break;
 800a724:	e0ce      	b.n	800a8c4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6899      	ldr	r1, [r3, #8]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	899a      	ldrh	r2, [r3, #12]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	795b      	ldrb	r3, [r3, #5]
 800a732:	2001      	movs	r0, #1
 800a734:	9000      	str	r0, [sp, #0]
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 f8ea 	bl	800a910 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a742:	b29a      	uxth	r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2206      	movs	r2, #6
 800a74c:	761a      	strb	r2, [r3, #24]
      break;
 800a74e:	e0c0      	b.n	800a8d2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	795b      	ldrb	r3, [r3, #5]
 800a754:	4619      	mov	r1, r3
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 fc4c 	bl	800aff4 <USBH_LL_GetURBState>
 800a75c:	4603      	mov	r3, r0
 800a75e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a760:	7bbb      	ldrb	r3, [r7, #14]
 800a762:	2b01      	cmp	r3, #1
 800a764:	d103      	bne.n	800a76e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2207      	movs	r2, #7
 800a76a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a76c:	e0ac      	b.n	800a8c8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a76e:	7bbb      	ldrb	r3, [r7, #14]
 800a770:	2b05      	cmp	r3, #5
 800a772:	d105      	bne.n	800a780 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	220c      	movs	r2, #12
 800a778:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a77a:	2303      	movs	r3, #3
 800a77c:	73fb      	strb	r3, [r7, #15]
      break;
 800a77e:	e0a3      	b.n	800a8c8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a780:	7bbb      	ldrb	r3, [r7, #14]
 800a782:	2b02      	cmp	r3, #2
 800a784:	d103      	bne.n	800a78e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2205      	movs	r2, #5
 800a78a:	761a      	strb	r2, [r3, #24]
      break;
 800a78c:	e09c      	b.n	800a8c8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a78e:	7bbb      	ldrb	r3, [r7, #14]
 800a790:	2b04      	cmp	r3, #4
 800a792:	f040 8099 	bne.w	800a8c8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	220b      	movs	r2, #11
 800a79a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a79c:	2302      	movs	r3, #2
 800a79e:	73fb      	strb	r3, [r7, #15]
      break;
 800a7a0:	e092      	b.n	800a8c8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	791b      	ldrb	r3, [r3, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f8d5 	bl	800a95a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a7b6:	b29a      	uxth	r2, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2208      	movs	r2, #8
 800a7c0:	761a      	strb	r2, [r3, #24]

      break;
 800a7c2:	e086      	b.n	800a8d2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	791b      	ldrb	r3, [r3, #4]
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fc12 	bl	800aff4 <USBH_LL_GetURBState>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a7d4:	7bbb      	ldrb	r3, [r7, #14]
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d105      	bne.n	800a7e6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	220d      	movs	r2, #13
 800a7de:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a7e4:	e072      	b.n	800a8cc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a7e6:	7bbb      	ldrb	r3, [r7, #14]
 800a7e8:	2b04      	cmp	r3, #4
 800a7ea:	d103      	bne.n	800a7f4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	220b      	movs	r2, #11
 800a7f0:	761a      	strb	r2, [r3, #24]
      break;
 800a7f2:	e06b      	b.n	800a8cc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a7f4:	7bbb      	ldrb	r3, [r7, #14]
 800a7f6:	2b05      	cmp	r3, #5
 800a7f8:	d168      	bne.n	800a8cc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a7fa:	2303      	movs	r3, #3
 800a7fc:	73fb      	strb	r3, [r7, #15]
      break;
 800a7fe:	e065      	b.n	800a8cc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	795b      	ldrb	r3, [r3, #5]
 800a804:	2201      	movs	r2, #1
 800a806:	9200      	str	r2, [sp, #0]
 800a808:	2200      	movs	r2, #0
 800a80a:	2100      	movs	r1, #0
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 f87f 	bl	800a910 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a818:	b29a      	uxth	r2, r3
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	220a      	movs	r2, #10
 800a822:	761a      	strb	r2, [r3, #24]
      break;
 800a824:	e055      	b.n	800a8d2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	795b      	ldrb	r3, [r3, #5]
 800a82a:	4619      	mov	r1, r3
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 fbe1 	bl	800aff4 <USBH_LL_GetURBState>
 800a832:	4603      	mov	r3, r0
 800a834:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a836:	7bbb      	ldrb	r3, [r7, #14]
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d105      	bne.n	800a848 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a83c:	2300      	movs	r3, #0
 800a83e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	220d      	movs	r2, #13
 800a844:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a846:	e043      	b.n	800a8d0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a848:	7bbb      	ldrb	r3, [r7, #14]
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d103      	bne.n	800a856 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2209      	movs	r2, #9
 800a852:	761a      	strb	r2, [r3, #24]
      break;
 800a854:	e03c      	b.n	800a8d0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a856:	7bbb      	ldrb	r3, [r7, #14]
 800a858:	2b04      	cmp	r3, #4
 800a85a:	d139      	bne.n	800a8d0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	220b      	movs	r2, #11
 800a860:	761a      	strb	r2, [r3, #24]
      break;
 800a862:	e035      	b.n	800a8d0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	7e5b      	ldrb	r3, [r3, #25]
 800a868:	3301      	adds	r3, #1
 800a86a:	b2da      	uxtb	r2, r3
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	765a      	strb	r2, [r3, #25]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	7e5b      	ldrb	r3, [r3, #25]
 800a874:	2b02      	cmp	r3, #2
 800a876:	d806      	bhi.n	800a886 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2201      	movs	r2, #1
 800a882:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a884:	e025      	b.n	800a8d2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a88c:	2106      	movs	r1, #6
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	795b      	ldrb	r3, [r3, #5]
 800a89c:	4619      	mov	r1, r3
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f90c 	bl	800aabc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	791b      	ldrb	r3, [r3, #4]
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 f906 	bl	800aabc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a8b6:	2302      	movs	r3, #2
 800a8b8:	73fb      	strb	r3, [r7, #15]
      break;
 800a8ba:	e00a      	b.n	800a8d2 <USBH_HandleControl+0x2de>

    default:
      break;
 800a8bc:	bf00      	nop
 800a8be:	e008      	b.n	800a8d2 <USBH_HandleControl+0x2de>
      break;
 800a8c0:	bf00      	nop
 800a8c2:	e006      	b.n	800a8d2 <USBH_HandleControl+0x2de>
      break;
 800a8c4:	bf00      	nop
 800a8c6:	e004      	b.n	800a8d2 <USBH_HandleControl+0x2de>
      break;
 800a8c8:	bf00      	nop
 800a8ca:	e002      	b.n	800a8d2 <USBH_HandleControl+0x2de>
      break;
 800a8cc:	bf00      	nop
 800a8ce:	e000      	b.n	800a8d2 <USBH_HandleControl+0x2de>
      break;
 800a8d0:	bf00      	nop
  }

  return status;
 800a8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b088      	sub	sp, #32
 800a8e0:	af04      	add	r7, sp, #16
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a8ea:	79f9      	ldrb	r1, [r7, #7]
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	9303      	str	r3, [sp, #12]
 800a8f0:	2308      	movs	r3, #8
 800a8f2:	9302      	str	r3, [sp, #8]
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	9301      	str	r3, [sp, #4]
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	9300      	str	r3, [sp, #0]
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	2200      	movs	r2, #0
 800a900:	68f8      	ldr	r0, [r7, #12]
 800a902:	f000 fb46 	bl	800af92 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b088      	sub	sp, #32
 800a914:	af04      	add	r7, sp, #16
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	4611      	mov	r1, r2
 800a91c:	461a      	mov	r2, r3
 800a91e:	460b      	mov	r3, r1
 800a920:	80fb      	strh	r3, [r7, #6]
 800a922:	4613      	mov	r3, r2
 800a924:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d001      	beq.n	800a934 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a930:	2300      	movs	r3, #0
 800a932:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a934:	7979      	ldrb	r1, [r7, #5]
 800a936:	7e3b      	ldrb	r3, [r7, #24]
 800a938:	9303      	str	r3, [sp, #12]
 800a93a:	88fb      	ldrh	r3, [r7, #6]
 800a93c:	9302      	str	r3, [sp, #8]
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	9301      	str	r3, [sp, #4]
 800a942:	2301      	movs	r3, #1
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	2300      	movs	r3, #0
 800a948:	2200      	movs	r2, #0
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f000 fb21 	bl	800af92 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a950:	2300      	movs	r3, #0
}
 800a952:	4618      	mov	r0, r3
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b088      	sub	sp, #32
 800a95e:	af04      	add	r7, sp, #16
 800a960:	60f8      	str	r0, [r7, #12]
 800a962:	60b9      	str	r1, [r7, #8]
 800a964:	4611      	mov	r1, r2
 800a966:	461a      	mov	r2, r3
 800a968:	460b      	mov	r3, r1
 800a96a:	80fb      	strh	r3, [r7, #6]
 800a96c:	4613      	mov	r3, r2
 800a96e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a970:	7979      	ldrb	r1, [r7, #5]
 800a972:	2300      	movs	r3, #0
 800a974:	9303      	str	r3, [sp, #12]
 800a976:	88fb      	ldrh	r3, [r7, #6]
 800a978:	9302      	str	r3, [sp, #8]
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	9301      	str	r3, [sp, #4]
 800a97e:	2301      	movs	r3, #1
 800a980:	9300      	str	r3, [sp, #0]
 800a982:	2300      	movs	r3, #0
 800a984:	2201      	movs	r2, #1
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f000 fb03 	bl	800af92 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a98c:	2300      	movs	r3, #0

}
 800a98e:	4618      	mov	r0, r3
 800a990:	3710      	adds	r7, #16
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}

0800a996 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a996:	b580      	push	{r7, lr}
 800a998:	b088      	sub	sp, #32
 800a99a:	af04      	add	r7, sp, #16
 800a99c:	60f8      	str	r0, [r7, #12]
 800a99e:	60b9      	str	r1, [r7, #8]
 800a9a0:	4611      	mov	r1, r2
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	80fb      	strh	r3, [r7, #6]
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d001      	beq.n	800a9ba <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a9ba:	7979      	ldrb	r1, [r7, #5]
 800a9bc:	7e3b      	ldrb	r3, [r7, #24]
 800a9be:	9303      	str	r3, [sp, #12]
 800a9c0:	88fb      	ldrh	r3, [r7, #6]
 800a9c2:	9302      	str	r3, [sp, #8]
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	9301      	str	r3, [sp, #4]
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	9300      	str	r3, [sp, #0]
 800a9cc:	2302      	movs	r3, #2
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f000 fade 	bl	800af92 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b088      	sub	sp, #32
 800a9e4:	af04      	add	r7, sp, #16
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	4611      	mov	r1, r2
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	80fb      	strh	r3, [r7, #6]
 800a9f2:	4613      	mov	r3, r2
 800a9f4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a9f6:	7979      	ldrb	r1, [r7, #5]
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	9303      	str	r3, [sp, #12]
 800a9fc:	88fb      	ldrh	r3, [r7, #6]
 800a9fe:	9302      	str	r3, [sp, #8]
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	9301      	str	r3, [sp, #4]
 800aa04:	2301      	movs	r3, #1
 800aa06:	9300      	str	r3, [sp, #0]
 800aa08:	2302      	movs	r3, #2
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f000 fac0 	bl	800af92 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3710      	adds	r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b086      	sub	sp, #24
 800aa20:	af04      	add	r7, sp, #16
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	4608      	mov	r0, r1
 800aa26:	4611      	mov	r1, r2
 800aa28:	461a      	mov	r2, r3
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	70fb      	strb	r3, [r7, #3]
 800aa2e:	460b      	mov	r3, r1
 800aa30:	70bb      	strb	r3, [r7, #2]
 800aa32:	4613      	mov	r3, r2
 800aa34:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800aa36:	7878      	ldrb	r0, [r7, #1]
 800aa38:	78ba      	ldrb	r2, [r7, #2]
 800aa3a:	78f9      	ldrb	r1, [r7, #3]
 800aa3c:	8b3b      	ldrh	r3, [r7, #24]
 800aa3e:	9302      	str	r3, [sp, #8]
 800aa40:	7d3b      	ldrb	r3, [r7, #20]
 800aa42:	9301      	str	r3, [sp, #4]
 800aa44:	7c3b      	ldrb	r3, [r7, #16]
 800aa46:	9300      	str	r3, [sp, #0]
 800aa48:	4603      	mov	r3, r0
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 fa53 	bl	800aef6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b082      	sub	sp, #8
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
 800aa62:	460b      	mov	r3, r1
 800aa64:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800aa66:	78fb      	ldrb	r3, [r7, #3]
 800aa68:	4619      	mov	r1, r3
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 fa72 	bl	800af54 <USBH_LL_ClosePipe>

  return USBH_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3708      	adds	r7, #8
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b084      	sub	sp, #16
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
 800aa82:	460b      	mov	r3, r1
 800aa84:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 f836 	bl	800aaf8 <USBH_GetFreePipe>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800aa90:	89fb      	ldrh	r3, [r7, #14]
 800aa92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d00a      	beq.n	800aab0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800aa9a:	78fa      	ldrb	r2, [r7, #3]
 800aa9c:	89fb      	ldrh	r3, [r7, #14]
 800aa9e:	f003 030f 	and.w	r3, r3, #15
 800aaa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aaa6:	6879      	ldr	r1, [r7, #4]
 800aaa8:	33e0      	adds	r3, #224	; 0xe0
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	440b      	add	r3, r1
 800aaae:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800aab0:	89fb      	ldrh	r3, [r7, #14]
 800aab2:	b2db      	uxtb	r3, r3
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	460b      	mov	r3, r1
 800aac6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800aac8:	78fb      	ldrb	r3, [r7, #3]
 800aaca:	2b0a      	cmp	r3, #10
 800aacc:	d80d      	bhi.n	800aaea <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800aace:	78fb      	ldrb	r3, [r7, #3]
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	33e0      	adds	r3, #224	; 0xe0
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	4413      	add	r3, r2
 800aad8:	685a      	ldr	r2, [r3, #4]
 800aada:	78fb      	ldrb	r3, [r7, #3]
 800aadc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800aae0:	6879      	ldr	r1, [r7, #4]
 800aae2:	33e0      	adds	r3, #224	; 0xe0
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	440b      	add	r3, r1
 800aae8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ab00:	2300      	movs	r3, #0
 800ab02:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800ab04:	2300      	movs	r3, #0
 800ab06:	73fb      	strb	r3, [r7, #15]
 800ab08:	e00f      	b.n	800ab2a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ab0a:	7bfb      	ldrb	r3, [r7, #15]
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	33e0      	adds	r3, #224	; 0xe0
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	4413      	add	r3, r2
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d102      	bne.n	800ab24 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ab1e:	7bfb      	ldrb	r3, [r7, #15]
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	e007      	b.n	800ab34 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800ab24:	7bfb      	ldrb	r3, [r7, #15]
 800ab26:	3301      	adds	r3, #1
 800ab28:	73fb      	strb	r3, [r7, #15]
 800ab2a:	7bfb      	ldrb	r3, [r7, #15]
 800ab2c:	2b0a      	cmp	r3, #10
 800ab2e:	d9ec      	bls.n	800ab0a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ab30:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ab44:	2201      	movs	r2, #1
 800ab46:	490e      	ldr	r1, [pc, #56]	; (800ab80 <MX_USB_HOST_Init+0x40>)
 800ab48:	480e      	ldr	r0, [pc, #56]	; (800ab84 <MX_USB_HOST_Init+0x44>)
 800ab4a:	f7fe fca1 	bl	8009490 <USBH_Init>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d001      	beq.n	800ab58 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ab54:	f7f6 fa7e 	bl	8001054 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ab58:	490b      	ldr	r1, [pc, #44]	; (800ab88 <MX_USB_HOST_Init+0x48>)
 800ab5a:	480a      	ldr	r0, [pc, #40]	; (800ab84 <MX_USB_HOST_Init+0x44>)
 800ab5c:	f7fe fd26 	bl	80095ac <USBH_RegisterClass>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d001      	beq.n	800ab6a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ab66:	f7f6 fa75 	bl	8001054 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ab6a:	4806      	ldr	r0, [pc, #24]	; (800ab84 <MX_USB_HOST_Init+0x44>)
 800ab6c:	f7fe fdaa 	bl	80096c4 <USBH_Start>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d001      	beq.n	800ab7a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ab76:	f7f6 fa6d 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ab7a:	bf00      	nop
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	0800aba1 	.word	0x0800aba1
 800ab84:	200008ec 	.word	0x200008ec
 800ab88:	2000000c 	.word	0x2000000c

0800ab8c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ab90:	4802      	ldr	r0, [pc, #8]	; (800ab9c <MX_USB_HOST_Process+0x10>)
 800ab92:	f7fe fda7 	bl	80096e4 <USBH_Process>
}
 800ab96:	bf00      	nop
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	200008ec 	.word	0x200008ec

0800aba0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	460b      	mov	r3, r1
 800abaa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800abac:	78fb      	ldrb	r3, [r7, #3]
 800abae:	3b01      	subs	r3, #1
 800abb0:	2b04      	cmp	r3, #4
 800abb2:	d819      	bhi.n	800abe8 <USBH_UserProcess+0x48>
 800abb4:	a201      	add	r2, pc, #4	; (adr r2, 800abbc <USBH_UserProcess+0x1c>)
 800abb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abba:	bf00      	nop
 800abbc:	0800abe9 	.word	0x0800abe9
 800abc0:	0800abd9 	.word	0x0800abd9
 800abc4:	0800abe9 	.word	0x0800abe9
 800abc8:	0800abe1 	.word	0x0800abe1
 800abcc:	0800abd1 	.word	0x0800abd1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800abd0:	4b09      	ldr	r3, [pc, #36]	; (800abf8 <USBH_UserProcess+0x58>)
 800abd2:	2203      	movs	r2, #3
 800abd4:	701a      	strb	r2, [r3, #0]
  break;
 800abd6:	e008      	b.n	800abea <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800abd8:	4b07      	ldr	r3, [pc, #28]	; (800abf8 <USBH_UserProcess+0x58>)
 800abda:	2202      	movs	r2, #2
 800abdc:	701a      	strb	r2, [r3, #0]
  break;
 800abde:	e004      	b.n	800abea <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800abe0:	4b05      	ldr	r3, [pc, #20]	; (800abf8 <USBH_UserProcess+0x58>)
 800abe2:	2201      	movs	r2, #1
 800abe4:	701a      	strb	r2, [r3, #0]
  break;
 800abe6:	e000      	b.n	800abea <USBH_UserProcess+0x4a>

  default:
  break;
 800abe8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800abea:	bf00      	nop
 800abec:	370c      	adds	r7, #12
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	200000cc 	.word	0x200000cc

0800abfc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b08a      	sub	sp, #40	; 0x28
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac04:	f107 0314 	add.w	r3, r7, #20
 800ac08:	2200      	movs	r2, #0
 800ac0a:	601a      	str	r2, [r3, #0]
 800ac0c:	605a      	str	r2, [r3, #4]
 800ac0e:	609a      	str	r2, [r3, #8]
 800ac10:	60da      	str	r2, [r3, #12]
 800ac12:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac1c:	d147      	bne.n	800acae <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac1e:	2300      	movs	r3, #0
 800ac20:	613b      	str	r3, [r7, #16]
 800ac22:	4b25      	ldr	r3, [pc, #148]	; (800acb8 <HAL_HCD_MspInit+0xbc>)
 800ac24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac26:	4a24      	ldr	r2, [pc, #144]	; (800acb8 <HAL_HCD_MspInit+0xbc>)
 800ac28:	f043 0301 	orr.w	r3, r3, #1
 800ac2c:	6313      	str	r3, [r2, #48]	; 0x30
 800ac2e:	4b22      	ldr	r3, [pc, #136]	; (800acb8 <HAL_HCD_MspInit+0xbc>)
 800ac30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac32:	f003 0301 	and.w	r3, r3, #1
 800ac36:	613b      	str	r3, [r7, #16]
 800ac38:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ac3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ac40:	2300      	movs	r3, #0
 800ac42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac44:	2300      	movs	r3, #0
 800ac46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ac48:	f107 0314 	add.w	r3, r7, #20
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	481b      	ldr	r0, [pc, #108]	; (800acbc <HAL_HCD_MspInit+0xc0>)
 800ac50:	f7f7 ff74 	bl	8002b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ac54:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ac58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac5a:	2302      	movs	r3, #2
 800ac5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac62:	2303      	movs	r3, #3
 800ac64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ac66:	230a      	movs	r3, #10
 800ac68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac6a:	f107 0314 	add.w	r3, r7, #20
 800ac6e:	4619      	mov	r1, r3
 800ac70:	4812      	ldr	r0, [pc, #72]	; (800acbc <HAL_HCD_MspInit+0xc0>)
 800ac72:	f7f7 ff63 	bl	8002b3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ac76:	4b10      	ldr	r3, [pc, #64]	; (800acb8 <HAL_HCD_MspInit+0xbc>)
 800ac78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac7a:	4a0f      	ldr	r2, [pc, #60]	; (800acb8 <HAL_HCD_MspInit+0xbc>)
 800ac7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac80:	6353      	str	r3, [r2, #52]	; 0x34
 800ac82:	2300      	movs	r3, #0
 800ac84:	60fb      	str	r3, [r7, #12]
 800ac86:	4b0c      	ldr	r3, [pc, #48]	; (800acb8 <HAL_HCD_MspInit+0xbc>)
 800ac88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac8a:	4a0b      	ldr	r2, [pc, #44]	; (800acb8 <HAL_HCD_MspInit+0xbc>)
 800ac8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac90:	6453      	str	r3, [r2, #68]	; 0x44
 800ac92:	4b09      	ldr	r3, [pc, #36]	; (800acb8 <HAL_HCD_MspInit+0xbc>)
 800ac94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac9a:	60fb      	str	r3, [r7, #12]
 800ac9c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ac9e:	2200      	movs	r2, #0
 800aca0:	2100      	movs	r1, #0
 800aca2:	2043      	movs	r0, #67	; 0x43
 800aca4:	f7f7 f9ec 	bl	8002080 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aca8:	2043      	movs	r0, #67	; 0x43
 800acaa:	f7f7 fa15 	bl	80020d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800acae:	bf00      	nop
 800acb0:	3728      	adds	r7, #40	; 0x28
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	40023800 	.word	0x40023800
 800acbc:	40020000 	.word	0x40020000

0800acc0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800acce:	4618      	mov	r0, r3
 800acd0:	f7ff f8db 	bl	8009e8a <USBH_LL_IncTimer>
}
 800acd4:	bf00      	nop
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800acea:	4618      	mov	r0, r3
 800acec:	f7ff f913 	bl	8009f16 <USBH_LL_Connect>
}
 800acf0:	bf00      	nop
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7ff f91c 	bl	8009f44 <USBH_LL_Disconnect>
}
 800ad0c:	bf00      	nop
 800ad0e:	3708      	adds	r7, #8
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	70fb      	strb	r3, [r7, #3]
 800ad20:	4613      	mov	r3, r2
 800ad22:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ad24:	bf00      	nop
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7ff f8cd 	bl	8009ede <USBH_LL_PortEnabled>
}
 800ad44:	bf00      	nop
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7ff f8cd 	bl	8009efa <USBH_LL_PortDisabled>
}
 800ad60:	bf00      	nop
 800ad62:	3708      	adds	r7, #8
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d12a      	bne.n	800add0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ad7a:	4a18      	ldr	r2, [pc, #96]	; (800addc <USBH_LL_Init+0x74>)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4a15      	ldr	r2, [pc, #84]	; (800addc <USBH_LL_Init+0x74>)
 800ad86:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ad8a:	4b14      	ldr	r3, [pc, #80]	; (800addc <USBH_LL_Init+0x74>)
 800ad8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ad90:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ad92:	4b12      	ldr	r3, [pc, #72]	; (800addc <USBH_LL_Init+0x74>)
 800ad94:	2208      	movs	r2, #8
 800ad96:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ad98:	4b10      	ldr	r3, [pc, #64]	; (800addc <USBH_LL_Init+0x74>)
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ad9e:	4b0f      	ldr	r3, [pc, #60]	; (800addc <USBH_LL_Init+0x74>)
 800ada0:	2200      	movs	r2, #0
 800ada2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ada4:	4b0d      	ldr	r3, [pc, #52]	; (800addc <USBH_LL_Init+0x74>)
 800ada6:	2202      	movs	r2, #2
 800ada8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800adaa:	4b0c      	ldr	r3, [pc, #48]	; (800addc <USBH_LL_Init+0x74>)
 800adac:	2200      	movs	r2, #0
 800adae:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800adb0:	480a      	ldr	r0, [pc, #40]	; (800addc <USBH_LL_Init+0x74>)
 800adb2:	f7f8 f9a9 	bl	8003108 <HAL_HCD_Init>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d001      	beq.n	800adc0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800adbc:	f7f6 f94a 	bl	8001054 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800adc0:	4806      	ldr	r0, [pc, #24]	; (800addc <USBH_LL_Init+0x74>)
 800adc2:	f7f8 fd98 	bl	80038f6 <HAL_HCD_GetCurrentFrame>
 800adc6:	4603      	mov	r3, r0
 800adc8:	4619      	mov	r1, r3
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f7ff f84e 	bl	8009e6c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800add0:	2300      	movs	r3, #0
}
 800add2:	4618      	mov	r0, r3
 800add4:	3708      	adds	r7, #8
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	20000cc4 	.word	0x20000cc4

0800ade0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ade8:	2300      	movs	r3, #0
 800adea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800adec:	2300      	movs	r3, #0
 800adee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7f8 fd07 	bl	800380a <HAL_HCD_Start>
 800adfc:	4603      	mov	r3, r0
 800adfe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae00:	7bfb      	ldrb	r3, [r7, #15]
 800ae02:	4618      	mov	r0, r3
 800ae04:	f000 f95c 	bl	800b0c0 <USBH_Get_USB_Status>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b084      	sub	sp, #16
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae22:	2300      	movs	r3, #0
 800ae24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f7f8 fd0f 	bl	8003850 <HAL_HCD_Stop>
 800ae32:	4603      	mov	r3, r0
 800ae34:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae36:	7bfb      	ldrb	r3, [r7, #15]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f000 f941 	bl	800b0c0 <USBH_Get_USB_Status>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae42:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3710      	adds	r7, #16
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ae54:	2301      	movs	r3, #1
 800ae56:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7f8 fd57 	bl	8003912 <HAL_HCD_GetCurrentSpeed>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b02      	cmp	r3, #2
 800ae68:	d00c      	beq.n	800ae84 <USBH_LL_GetSpeed+0x38>
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d80d      	bhi.n	800ae8a <USBH_LL_GetSpeed+0x3e>
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d002      	beq.n	800ae78 <USBH_LL_GetSpeed+0x2c>
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d003      	beq.n	800ae7e <USBH_LL_GetSpeed+0x32>
 800ae76:	e008      	b.n	800ae8a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae7c:	e008      	b.n	800ae90 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	73fb      	strb	r3, [r7, #15]
    break;
 800ae82:	e005      	b.n	800ae90 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ae84:	2302      	movs	r3, #2
 800ae86:	73fb      	strb	r3, [r7, #15]
    break;
 800ae88:	e002      	b.n	800ae90 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	73fb      	strb	r3, [r7, #15]
    break;
 800ae8e:	bf00      	nop
  }
  return  speed;
 800ae90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b084      	sub	sp, #16
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aea2:	2300      	movs	r3, #0
 800aea4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aea6:	2300      	movs	r3, #0
 800aea8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7f8 fcea 	bl	800388a <HAL_HCD_ResetPort>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aeba:	7bfb      	ldrb	r3, [r7, #15]
 800aebc:	4618      	mov	r0, r3
 800aebe:	f000 f8ff 	bl	800b0c0 <USBH_Get_USB_Status>
 800aec2:	4603      	mov	r3, r0
 800aec4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aec6:	7bbb      	ldrb	r3, [r7, #14]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3710      	adds	r7, #16
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	460b      	mov	r3, r1
 800aeda:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aee2:	78fa      	ldrb	r2, [r7, #3]
 800aee4:	4611      	mov	r1, r2
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7f8 fcf1 	bl	80038ce <HAL_HCD_HC_GetXferCount>
 800aeec:	4603      	mov	r3, r0
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3708      	adds	r7, #8
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aef6:	b590      	push	{r4, r7, lr}
 800aef8:	b089      	sub	sp, #36	; 0x24
 800aefa:	af04      	add	r7, sp, #16
 800aefc:	6078      	str	r0, [r7, #4]
 800aefe:	4608      	mov	r0, r1
 800af00:	4611      	mov	r1, r2
 800af02:	461a      	mov	r2, r3
 800af04:	4603      	mov	r3, r0
 800af06:	70fb      	strb	r3, [r7, #3]
 800af08:	460b      	mov	r3, r1
 800af0a:	70bb      	strb	r3, [r7, #2]
 800af0c:	4613      	mov	r3, r2
 800af0e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af10:	2300      	movs	r3, #0
 800af12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af14:	2300      	movs	r3, #0
 800af16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800af1e:	787c      	ldrb	r4, [r7, #1]
 800af20:	78ba      	ldrb	r2, [r7, #2]
 800af22:	78f9      	ldrb	r1, [r7, #3]
 800af24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af26:	9302      	str	r3, [sp, #8]
 800af28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800af2c:	9301      	str	r3, [sp, #4]
 800af2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af32:	9300      	str	r3, [sp, #0]
 800af34:	4623      	mov	r3, r4
 800af36:	f7f8 f955 	bl	80031e4 <HAL_HCD_HC_Init>
 800af3a:	4603      	mov	r3, r0
 800af3c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800af3e:	7bfb      	ldrb	r3, [r7, #15]
 800af40:	4618      	mov	r0, r3
 800af42:	f000 f8bd 	bl	800b0c0 <USBH_Get_USB_Status>
 800af46:	4603      	mov	r3, r0
 800af48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3714      	adds	r7, #20
 800af50:	46bd      	mov	sp, r7
 800af52:	bd90      	pop	{r4, r7, pc}

0800af54 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	460b      	mov	r3, r1
 800af5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af60:	2300      	movs	r3, #0
 800af62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af64:	2300      	movs	r3, #0
 800af66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af6e:	78fa      	ldrb	r2, [r7, #3]
 800af70:	4611      	mov	r1, r2
 800af72:	4618      	mov	r0, r3
 800af74:	f7f8 f9c5 	bl	8003302 <HAL_HCD_HC_Halt>
 800af78:	4603      	mov	r3, r0
 800af7a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800af7c:	7bfb      	ldrb	r3, [r7, #15]
 800af7e:	4618      	mov	r0, r3
 800af80:	f000 f89e 	bl	800b0c0 <USBH_Get_USB_Status>
 800af84:	4603      	mov	r3, r0
 800af86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af88:	7bbb      	ldrb	r3, [r7, #14]
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3710      	adds	r7, #16
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}

0800af92 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800af92:	b590      	push	{r4, r7, lr}
 800af94:	b089      	sub	sp, #36	; 0x24
 800af96:	af04      	add	r7, sp, #16
 800af98:	6078      	str	r0, [r7, #4]
 800af9a:	4608      	mov	r0, r1
 800af9c:	4611      	mov	r1, r2
 800af9e:	461a      	mov	r2, r3
 800afa0:	4603      	mov	r3, r0
 800afa2:	70fb      	strb	r3, [r7, #3]
 800afa4:	460b      	mov	r3, r1
 800afa6:	70bb      	strb	r3, [r7, #2]
 800afa8:	4613      	mov	r3, r2
 800afaa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800afb0:	2300      	movs	r3, #0
 800afb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800afba:	787c      	ldrb	r4, [r7, #1]
 800afbc:	78ba      	ldrb	r2, [r7, #2]
 800afbe:	78f9      	ldrb	r1, [r7, #3]
 800afc0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800afc4:	9303      	str	r3, [sp, #12]
 800afc6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800afc8:	9302      	str	r3, [sp, #8]
 800afca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afcc:	9301      	str	r3, [sp, #4]
 800afce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800afd2:	9300      	str	r3, [sp, #0]
 800afd4:	4623      	mov	r3, r4
 800afd6:	f7f8 f9b7 	bl	8003348 <HAL_HCD_HC_SubmitRequest>
 800afda:	4603      	mov	r3, r0
 800afdc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800afde:	7bfb      	ldrb	r3, [r7, #15]
 800afe0:	4618      	mov	r0, r3
 800afe2:	f000 f86d 	bl	800b0c0 <USBH_Get_USB_Status>
 800afe6:	4603      	mov	r3, r0
 800afe8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afea:	7bbb      	ldrb	r3, [r7, #14]
}
 800afec:	4618      	mov	r0, r3
 800afee:	3714      	adds	r7, #20
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd90      	pop	{r4, r7, pc}

0800aff4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	460b      	mov	r3, r1
 800affe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b006:	78fa      	ldrb	r2, [r7, #3]
 800b008:	4611      	mov	r1, r2
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7f8 fc4b 	bl	80038a6 <HAL_HCD_HC_GetURBState>
 800b010:	4603      	mov	r3, r0
}
 800b012:	4618      	mov	r0, r3
 800b014:	3708      	adds	r7, #8
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b082      	sub	sp, #8
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
 800b022:	460b      	mov	r3, r1
 800b024:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d103      	bne.n	800b038 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b030:	78fb      	ldrb	r3, [r7, #3]
 800b032:	4618      	mov	r0, r3
 800b034:	f000 f870 	bl	800b118 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b038:	20c8      	movs	r0, #200	; 0xc8
 800b03a:	f7f6 fb2f 	bl	800169c <HAL_Delay>
  return USBH_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	460b      	mov	r3, r1
 800b052:	70fb      	strb	r3, [r7, #3]
 800b054:	4613      	mov	r3, r2
 800b056:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b05e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b060:	78fb      	ldrb	r3, [r7, #3]
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	212c      	movs	r1, #44	; 0x2c
 800b066:	fb01 f303 	mul.w	r3, r1, r3
 800b06a:	4413      	add	r3, r2
 800b06c:	333b      	adds	r3, #59	; 0x3b
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d009      	beq.n	800b088 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b074:	78fb      	ldrb	r3, [r7, #3]
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	212c      	movs	r1, #44	; 0x2c
 800b07a:	fb01 f303 	mul.w	r3, r1, r3
 800b07e:	4413      	add	r3, r2
 800b080:	3354      	adds	r3, #84	; 0x54
 800b082:	78ba      	ldrb	r2, [r7, #2]
 800b084:	701a      	strb	r2, [r3, #0]
 800b086:	e008      	b.n	800b09a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b088:	78fb      	ldrb	r3, [r7, #3]
 800b08a:	68fa      	ldr	r2, [r7, #12]
 800b08c:	212c      	movs	r1, #44	; 0x2c
 800b08e:	fb01 f303 	mul.w	r3, r1, r3
 800b092:	4413      	add	r3, r2
 800b094:	3355      	adds	r3, #85	; 0x55
 800b096:	78ba      	ldrb	r2, [r7, #2]
 800b098:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b09a:	2300      	movs	r3, #0
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3714      	adds	r7, #20
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f7f6 faf3 	bl	800169c <HAL_Delay>
}
 800b0b6:	bf00      	nop
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
	...

0800b0c0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b085      	sub	sp, #20
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b0ce:	79fb      	ldrb	r3, [r7, #7]
 800b0d0:	2b03      	cmp	r3, #3
 800b0d2:	d817      	bhi.n	800b104 <USBH_Get_USB_Status+0x44>
 800b0d4:	a201      	add	r2, pc, #4	; (adr r2, 800b0dc <USBH_Get_USB_Status+0x1c>)
 800b0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0da:	bf00      	nop
 800b0dc:	0800b0ed 	.word	0x0800b0ed
 800b0e0:	0800b0f3 	.word	0x0800b0f3
 800b0e4:	0800b0f9 	.word	0x0800b0f9
 800b0e8:	0800b0ff 	.word	0x0800b0ff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b0f0:	e00b      	b.n	800b10a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b0f2:	2302      	movs	r3, #2
 800b0f4:	73fb      	strb	r3, [r7, #15]
    break;
 800b0f6:	e008      	b.n	800b10a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b0fc:	e005      	b.n	800b10a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b0fe:	2302      	movs	r3, #2
 800b100:	73fb      	strb	r3, [r7, #15]
    break;
 800b102:	e002      	b.n	800b10a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b104:	2302      	movs	r3, #2
 800b106:	73fb      	strb	r3, [r7, #15]
    break;
 800b108:	bf00      	nop
  }
  return usb_status;
 800b10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3714      	adds	r7, #20
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr

0800b118 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	4603      	mov	r3, r0
 800b120:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b122:	79fb      	ldrb	r3, [r7, #7]
 800b124:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b126:	79fb      	ldrb	r3, [r7, #7]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d102      	bne.n	800b132 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800b12c:	2301      	movs	r3, #1
 800b12e:	73fb      	strb	r3, [r7, #15]
 800b130:	e001      	b.n	800b136 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b132:	2300      	movs	r3, #0
 800b134:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b136:	7bfb      	ldrb	r3, [r7, #15]
 800b138:	461a      	mov	r2, r3
 800b13a:	2101      	movs	r1, #1
 800b13c:	4803      	ldr	r0, [pc, #12]	; (800b14c <MX_DriverVbusFS+0x34>)
 800b13e:	f7f7 ff99 	bl	8003074 <HAL_GPIO_WritePin>
}
 800b142:	bf00      	nop
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	40020800 	.word	0x40020800

0800b150 <__errno>:
 800b150:	4b01      	ldr	r3, [pc, #4]	; (800b158 <__errno+0x8>)
 800b152:	6818      	ldr	r0, [r3, #0]
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	2000002c 	.word	0x2000002c

0800b15c <__libc_init_array>:
 800b15c:	b570      	push	{r4, r5, r6, lr}
 800b15e:	4d0d      	ldr	r5, [pc, #52]	; (800b194 <__libc_init_array+0x38>)
 800b160:	4c0d      	ldr	r4, [pc, #52]	; (800b198 <__libc_init_array+0x3c>)
 800b162:	1b64      	subs	r4, r4, r5
 800b164:	10a4      	asrs	r4, r4, #2
 800b166:	2600      	movs	r6, #0
 800b168:	42a6      	cmp	r6, r4
 800b16a:	d109      	bne.n	800b180 <__libc_init_array+0x24>
 800b16c:	4d0b      	ldr	r5, [pc, #44]	; (800b19c <__libc_init_array+0x40>)
 800b16e:	4c0c      	ldr	r4, [pc, #48]	; (800b1a0 <__libc_init_array+0x44>)
 800b170:	f000 f8f8 	bl	800b364 <_init>
 800b174:	1b64      	subs	r4, r4, r5
 800b176:	10a4      	asrs	r4, r4, #2
 800b178:	2600      	movs	r6, #0
 800b17a:	42a6      	cmp	r6, r4
 800b17c:	d105      	bne.n	800b18a <__libc_init_array+0x2e>
 800b17e:	bd70      	pop	{r4, r5, r6, pc}
 800b180:	f855 3b04 	ldr.w	r3, [r5], #4
 800b184:	4798      	blx	r3
 800b186:	3601      	adds	r6, #1
 800b188:	e7ee      	b.n	800b168 <__libc_init_array+0xc>
 800b18a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b18e:	4798      	blx	r3
 800b190:	3601      	adds	r6, #1
 800b192:	e7f2      	b.n	800b17a <__libc_init_array+0x1e>
 800b194:	0800b5e4 	.word	0x0800b5e4
 800b198:	0800b5e4 	.word	0x0800b5e4
 800b19c:	0800b5e4 	.word	0x0800b5e4
 800b1a0:	0800b5e8 	.word	0x0800b5e8

0800b1a4 <malloc>:
 800b1a4:	4b02      	ldr	r3, [pc, #8]	; (800b1b0 <malloc+0xc>)
 800b1a6:	4601      	mov	r1, r0
 800b1a8:	6818      	ldr	r0, [r3, #0]
 800b1aa:	f000 b863 	b.w	800b274 <_malloc_r>
 800b1ae:	bf00      	nop
 800b1b0:	2000002c 	.word	0x2000002c

0800b1b4 <free>:
 800b1b4:	4b02      	ldr	r3, [pc, #8]	; (800b1c0 <free+0xc>)
 800b1b6:	4601      	mov	r1, r0
 800b1b8:	6818      	ldr	r0, [r3, #0]
 800b1ba:	f000 b80b 	b.w	800b1d4 <_free_r>
 800b1be:	bf00      	nop
 800b1c0:	2000002c 	.word	0x2000002c

0800b1c4 <memset>:
 800b1c4:	4402      	add	r2, r0
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d100      	bne.n	800b1ce <memset+0xa>
 800b1cc:	4770      	bx	lr
 800b1ce:	f803 1b01 	strb.w	r1, [r3], #1
 800b1d2:	e7f9      	b.n	800b1c8 <memset+0x4>

0800b1d4 <_free_r>:
 800b1d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1d6:	2900      	cmp	r1, #0
 800b1d8:	d048      	beq.n	800b26c <_free_r+0x98>
 800b1da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1de:	9001      	str	r0, [sp, #4]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	f1a1 0404 	sub.w	r4, r1, #4
 800b1e6:	bfb8      	it	lt
 800b1e8:	18e4      	addlt	r4, r4, r3
 800b1ea:	f000 f8ad 	bl	800b348 <__malloc_lock>
 800b1ee:	4a20      	ldr	r2, [pc, #128]	; (800b270 <_free_r+0x9c>)
 800b1f0:	9801      	ldr	r0, [sp, #4]
 800b1f2:	6813      	ldr	r3, [r2, #0]
 800b1f4:	4615      	mov	r5, r2
 800b1f6:	b933      	cbnz	r3, 800b206 <_free_r+0x32>
 800b1f8:	6063      	str	r3, [r4, #4]
 800b1fa:	6014      	str	r4, [r2, #0]
 800b1fc:	b003      	add	sp, #12
 800b1fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b202:	f000 b8a7 	b.w	800b354 <__malloc_unlock>
 800b206:	42a3      	cmp	r3, r4
 800b208:	d90b      	bls.n	800b222 <_free_r+0x4e>
 800b20a:	6821      	ldr	r1, [r4, #0]
 800b20c:	1862      	adds	r2, r4, r1
 800b20e:	4293      	cmp	r3, r2
 800b210:	bf04      	itt	eq
 800b212:	681a      	ldreq	r2, [r3, #0]
 800b214:	685b      	ldreq	r3, [r3, #4]
 800b216:	6063      	str	r3, [r4, #4]
 800b218:	bf04      	itt	eq
 800b21a:	1852      	addeq	r2, r2, r1
 800b21c:	6022      	streq	r2, [r4, #0]
 800b21e:	602c      	str	r4, [r5, #0]
 800b220:	e7ec      	b.n	800b1fc <_free_r+0x28>
 800b222:	461a      	mov	r2, r3
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	b10b      	cbz	r3, 800b22c <_free_r+0x58>
 800b228:	42a3      	cmp	r3, r4
 800b22a:	d9fa      	bls.n	800b222 <_free_r+0x4e>
 800b22c:	6811      	ldr	r1, [r2, #0]
 800b22e:	1855      	adds	r5, r2, r1
 800b230:	42a5      	cmp	r5, r4
 800b232:	d10b      	bne.n	800b24c <_free_r+0x78>
 800b234:	6824      	ldr	r4, [r4, #0]
 800b236:	4421      	add	r1, r4
 800b238:	1854      	adds	r4, r2, r1
 800b23a:	42a3      	cmp	r3, r4
 800b23c:	6011      	str	r1, [r2, #0]
 800b23e:	d1dd      	bne.n	800b1fc <_free_r+0x28>
 800b240:	681c      	ldr	r4, [r3, #0]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	6053      	str	r3, [r2, #4]
 800b246:	4421      	add	r1, r4
 800b248:	6011      	str	r1, [r2, #0]
 800b24a:	e7d7      	b.n	800b1fc <_free_r+0x28>
 800b24c:	d902      	bls.n	800b254 <_free_r+0x80>
 800b24e:	230c      	movs	r3, #12
 800b250:	6003      	str	r3, [r0, #0]
 800b252:	e7d3      	b.n	800b1fc <_free_r+0x28>
 800b254:	6825      	ldr	r5, [r4, #0]
 800b256:	1961      	adds	r1, r4, r5
 800b258:	428b      	cmp	r3, r1
 800b25a:	bf04      	itt	eq
 800b25c:	6819      	ldreq	r1, [r3, #0]
 800b25e:	685b      	ldreq	r3, [r3, #4]
 800b260:	6063      	str	r3, [r4, #4]
 800b262:	bf04      	itt	eq
 800b264:	1949      	addeq	r1, r1, r5
 800b266:	6021      	streq	r1, [r4, #0]
 800b268:	6054      	str	r4, [r2, #4]
 800b26a:	e7c7      	b.n	800b1fc <_free_r+0x28>
 800b26c:	b003      	add	sp, #12
 800b26e:	bd30      	pop	{r4, r5, pc}
 800b270:	200000d0 	.word	0x200000d0

0800b274 <_malloc_r>:
 800b274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b276:	1ccd      	adds	r5, r1, #3
 800b278:	f025 0503 	bic.w	r5, r5, #3
 800b27c:	3508      	adds	r5, #8
 800b27e:	2d0c      	cmp	r5, #12
 800b280:	bf38      	it	cc
 800b282:	250c      	movcc	r5, #12
 800b284:	2d00      	cmp	r5, #0
 800b286:	4606      	mov	r6, r0
 800b288:	db01      	blt.n	800b28e <_malloc_r+0x1a>
 800b28a:	42a9      	cmp	r1, r5
 800b28c:	d903      	bls.n	800b296 <_malloc_r+0x22>
 800b28e:	230c      	movs	r3, #12
 800b290:	6033      	str	r3, [r6, #0]
 800b292:	2000      	movs	r0, #0
 800b294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b296:	f000 f857 	bl	800b348 <__malloc_lock>
 800b29a:	4921      	ldr	r1, [pc, #132]	; (800b320 <_malloc_r+0xac>)
 800b29c:	680a      	ldr	r2, [r1, #0]
 800b29e:	4614      	mov	r4, r2
 800b2a0:	b99c      	cbnz	r4, 800b2ca <_malloc_r+0x56>
 800b2a2:	4f20      	ldr	r7, [pc, #128]	; (800b324 <_malloc_r+0xb0>)
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	b923      	cbnz	r3, 800b2b2 <_malloc_r+0x3e>
 800b2a8:	4621      	mov	r1, r4
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	f000 f83c 	bl	800b328 <_sbrk_r>
 800b2b0:	6038      	str	r0, [r7, #0]
 800b2b2:	4629      	mov	r1, r5
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	f000 f837 	bl	800b328 <_sbrk_r>
 800b2ba:	1c43      	adds	r3, r0, #1
 800b2bc:	d123      	bne.n	800b306 <_malloc_r+0x92>
 800b2be:	230c      	movs	r3, #12
 800b2c0:	6033      	str	r3, [r6, #0]
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	f000 f846 	bl	800b354 <__malloc_unlock>
 800b2c8:	e7e3      	b.n	800b292 <_malloc_r+0x1e>
 800b2ca:	6823      	ldr	r3, [r4, #0]
 800b2cc:	1b5b      	subs	r3, r3, r5
 800b2ce:	d417      	bmi.n	800b300 <_malloc_r+0x8c>
 800b2d0:	2b0b      	cmp	r3, #11
 800b2d2:	d903      	bls.n	800b2dc <_malloc_r+0x68>
 800b2d4:	6023      	str	r3, [r4, #0]
 800b2d6:	441c      	add	r4, r3
 800b2d8:	6025      	str	r5, [r4, #0]
 800b2da:	e004      	b.n	800b2e6 <_malloc_r+0x72>
 800b2dc:	6863      	ldr	r3, [r4, #4]
 800b2de:	42a2      	cmp	r2, r4
 800b2e0:	bf0c      	ite	eq
 800b2e2:	600b      	streq	r3, [r1, #0]
 800b2e4:	6053      	strne	r3, [r2, #4]
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	f000 f834 	bl	800b354 <__malloc_unlock>
 800b2ec:	f104 000b 	add.w	r0, r4, #11
 800b2f0:	1d23      	adds	r3, r4, #4
 800b2f2:	f020 0007 	bic.w	r0, r0, #7
 800b2f6:	1ac2      	subs	r2, r0, r3
 800b2f8:	d0cc      	beq.n	800b294 <_malloc_r+0x20>
 800b2fa:	1a1b      	subs	r3, r3, r0
 800b2fc:	50a3      	str	r3, [r4, r2]
 800b2fe:	e7c9      	b.n	800b294 <_malloc_r+0x20>
 800b300:	4622      	mov	r2, r4
 800b302:	6864      	ldr	r4, [r4, #4]
 800b304:	e7cc      	b.n	800b2a0 <_malloc_r+0x2c>
 800b306:	1cc4      	adds	r4, r0, #3
 800b308:	f024 0403 	bic.w	r4, r4, #3
 800b30c:	42a0      	cmp	r0, r4
 800b30e:	d0e3      	beq.n	800b2d8 <_malloc_r+0x64>
 800b310:	1a21      	subs	r1, r4, r0
 800b312:	4630      	mov	r0, r6
 800b314:	f000 f808 	bl	800b328 <_sbrk_r>
 800b318:	3001      	adds	r0, #1
 800b31a:	d1dd      	bne.n	800b2d8 <_malloc_r+0x64>
 800b31c:	e7cf      	b.n	800b2be <_malloc_r+0x4a>
 800b31e:	bf00      	nop
 800b320:	200000d0 	.word	0x200000d0
 800b324:	200000d4 	.word	0x200000d4

0800b328 <_sbrk_r>:
 800b328:	b538      	push	{r3, r4, r5, lr}
 800b32a:	4d06      	ldr	r5, [pc, #24]	; (800b344 <_sbrk_r+0x1c>)
 800b32c:	2300      	movs	r3, #0
 800b32e:	4604      	mov	r4, r0
 800b330:	4608      	mov	r0, r1
 800b332:	602b      	str	r3, [r5, #0]
 800b334:	f7f5 ffa0 	bl	8001278 <_sbrk>
 800b338:	1c43      	adds	r3, r0, #1
 800b33a:	d102      	bne.n	800b342 <_sbrk_r+0x1a>
 800b33c:	682b      	ldr	r3, [r5, #0]
 800b33e:	b103      	cbz	r3, 800b342 <_sbrk_r+0x1a>
 800b340:	6023      	str	r3, [r4, #0]
 800b342:	bd38      	pop	{r3, r4, r5, pc}
 800b344:	20000fc8 	.word	0x20000fc8

0800b348 <__malloc_lock>:
 800b348:	4801      	ldr	r0, [pc, #4]	; (800b350 <__malloc_lock+0x8>)
 800b34a:	f000 b809 	b.w	800b360 <__retarget_lock_acquire_recursive>
 800b34e:	bf00      	nop
 800b350:	20000fd0 	.word	0x20000fd0

0800b354 <__malloc_unlock>:
 800b354:	4801      	ldr	r0, [pc, #4]	; (800b35c <__malloc_unlock+0x8>)
 800b356:	f000 b804 	b.w	800b362 <__retarget_lock_release_recursive>
 800b35a:	bf00      	nop
 800b35c:	20000fd0 	.word	0x20000fd0

0800b360 <__retarget_lock_acquire_recursive>:
 800b360:	4770      	bx	lr

0800b362 <__retarget_lock_release_recursive>:
 800b362:	4770      	bx	lr

0800b364 <_init>:
 800b364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b366:	bf00      	nop
 800b368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b36a:	bc08      	pop	{r3}
 800b36c:	469e      	mov	lr, r3
 800b36e:	4770      	bx	lr

0800b370 <_fini>:
 800b370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b372:	bf00      	nop
 800b374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b376:	bc08      	pop	{r3}
 800b378:	469e      	mov	lr, r3
 800b37a:	4770      	bx	lr
